{
  "version": 2,
  "suites": {
    "test/e2e/404-page-router/index.test.ts": {
      "passed": [
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /docs/error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /docs/error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /docs/error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /docs/error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready"
      ],
      "failed": [
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false should not throw any errors when re-fetching the route info"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir-legacy-edge-runtime-config/index.test.ts": {
      "passed": [
        "app-dir edge runtime config should warn the legacy object config export"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/_allow-underscored-root-directory/_allow-underscored-root-directory.test.ts": {
      "passed": [],
      "failed": [
        "_allow-underscored-root-directory should not serve app path with underscore",
        "_allow-underscored-root-directory should pages path with a underscore at the root",
        "_allow-underscored-root-directory should serve app path with %5F"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-allowed-origins/app-action-allowed-origins.test.ts": {
      "passed": [
        "app-dir action allowed origins should pass if localhost is set as a safe origin"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-allowed-origins/app-action-disallowed-origins.test.ts": {
      "passed": [
        "app-dir action disallowed origins should error if x-forwarded-host does not match the origin"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-navigation/index.test.ts": {
      "passed": [
        "app-dir action handling should handle actions correctly after following a relative link",
        "app-dir action handling should handle actions correctly after navigation / redirection events"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-revalidate-remount/actions-revalidate-remount.test.ts": {
      "passed": [
        "actions-revalidate-remount should not remount the page + loading component when revalidating"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-export.test.ts": {
      "passed": [],
      "failed": [
        "app-dir action handling - next export should error when use export output for server actions"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-form-state.test.ts": {
      "passed": [],
      "failed": [
        "app-dir action useActionState should send the action to the provided permalink with form state when JS disabled",
        "app-dir action useActionState should support hydrating the app from progressively enhanced form request",
        "app-dir action useActionState should support submitting form state with JS",
        "app-dir action useActionState should support submitting form state without JS"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-progressive-enhancement.test.ts": {
      "passed": [
        "app-dir action progressive enhancement should support actions from client without JS",
        "app-dir action progressive enhancement should support formData and redirect without JS"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-size-limit-invalid.test.ts": {
      "passed": [
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is a negative number",
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is a negative size",
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is invalid"
      ],
      "failed": [
        "app-dir action size limit invalid config should respect the size set in serverActions.bodySizeLimit",
        "app-dir action size limit invalid config should respect the size set in serverActions.bodySizeLimit when submitting form"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action.test.ts": {
      "passed": [
        "app-dir action handling Edge SSR should allow cookie and header async storages",
        "app-dir action handling Edge SSR should handle basic actions correctly",
        "app-dir action handling Edge SSR should handle calls to redirect() with a absolute URL in a single pass",
        "app-dir action handling Edge SSR should handle calls to redirect() with a relative URL in a single pass",
        "app-dir action handling Edge SSR should handle calls to redirect() with external URLs",
        "app-dir action handling Edge SSR should handle unicode search params",
        "app-dir action handling Edge SSR should return error response for hoc auth wrappers in edge runtime",
        "app-dir action handling caching disabled by default should not override force-cache in server action",
        "app-dir action handling caching disabled by default should not override revalidate in server action",
        "app-dir action handling caching disabled by default should use no-store as default for server action",
        "app-dir action handling encryption should send encrypted values from the closed over closure",
        "app-dir action handling fetch actions should handle a fetch action initiated from a static page",
        "app-dir action handling fetch actions should handle calls to redirect() with a absolute URL in a single pass",
        "app-dir action handling fetch actions should handle calls to redirect() with a relative URL in a single pass",
        "app-dir action handling fetch actions should handle calls to redirect() with external URLs",
        "app-dir action handling fetch actions should handle redirects to routes that provide an invalid RSC response",
        "app-dir action handling fetch actions should handle revalidatePath",
        "app-dir action handling fetch actions should handle revalidateTag",
        "app-dir action handling fetch actions should invalidate client cache on other routes when cookies.set is called",
        "app-dir action handling fetch actions should invalidate client cache when path is revalidated",
        "app-dir action handling fetch actions should invalidate client cache when tag is revalidated",
        "app-dir action handling fetch actions should revalidate when cookies.set is called",
        "app-dir action handling fetch actions should revalidate when cookies.set is called in a client action",
        "app-dir action handling fetch actions should store revalidation data in the prefetch cache",
        "app-dir action handling redirects displays searchParams correctly when redirecting with SearchParams",
        "app-dir action handling redirects merges cookies correctly when redirecting",
        "app-dir action handling redirects redirects properly when server action handler redirects with a 307 status code",
        "app-dir action handling redirects redirects properly when server action handler redirects with a 308 status code",
        "app-dir action handling redirects redirects properly when server action handler uses `permanentRedirect`",
        "app-dir action handling redirects redirects properly when server action handler uses `redirect`",
        "app-dir action handling redirects should not forward next-action header to a redirected RSC request",
        "app-dir action handling server actions render client components server component imported action should support importing client components from actions",
        "app-dir action handling should 404 when POSTing an invalid server action",
        "app-dir action handling should be possible to catch network errors",
        "app-dir action handling should be possible to catch regular errors",
        "app-dir action handling should forward action request to a worker that contains the action handler (edge)",
        "app-dir action handling should forward action request to a worker that contains the action handler (node)",
        "app-dir action handling should handle action correctly with middleware rewrite",
        "app-dir action handling should handle actions executed in quick succession",
        "app-dir action handling should handle basic actions correctly",
        "app-dir action handling should log a warning when a server action is not found but an id is provided",
        "app-dir action handling should not block navigation events while a server action is in flight",
        "app-dir action handling should not block router.back() while a server action is in flight",
        "app-dir action handling should not error when a forwarded action triggers a redirect (edge)",
        "app-dir action handling should not error when a forwarded action triggers a redirect (node)",
        "app-dir action handling should not log errors for non-action form POSTs",
        "app-dir action handling should only submit action once when resubmitting an action after navigation",
        "app-dir action handling should propagate errors from a `text/plain` response to an error boundary",
        "app-dir action handling should push new route when redirecting",
        "app-dir action handling should report errors with bad inputs correctly",
        "app-dir action handling should support .bind",
        "app-dir action handling should support chained .bind",
        "app-dir action handling should support formData and redirect",
        "app-dir action handling should support headers and cookies",
        "app-dir action handling should support headers in client imported actions",
        "app-dir action handling should support hoc auth wrappers",
        "app-dir action handling should support importing actions in client components",
        "app-dir action handling should support importing the same action module instance in both server and action layers",
        "app-dir action handling should support next/dynamic with ssr: false",
        "app-dir action handling should support next/dynamic with ssr: false (edge)",
        "app-dir action handling should support notFound",
        "app-dir action handling should support notFound (javascript disabled)",
        "app-dir action handling should support setting cookies in route handlers with the correct overrides",
        "app-dir action handling should support uploading files",
        "app-dir action handling should trigger a refresh for a server action that also dispatches a navigation event",
        "app-dir action handling should trigger a refresh for a server action that gets discarded due to a navigation",
        "app-dir action handling should trigger an error boundary for action responses with an invalid content-type",
        "app-dir action handling should work with interception routes"
      ],
      "failed": [
        "app-dir action handling should not expose action content in sourcemaps"
      ],
      "pending": [
        "app-dir action handling fetch actions should handle revalidateTag + redirect",
        "app-dir action handling server actions render client components client component imported action should support importing client components from actions"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-a11y/index.test.ts": {
      "passed": [
        "app a11y features route announcer should announce document.title changes",
        "app a11y features route announcer should announce h1 changes",
        "app a11y features route announcer should announce route changes when h1 changes inside an inner layout",
        "app a11y features route announcer should not announce the initital title"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-alias/app-alias.test.ts": {
      "passed": [
        "app-dir alias should generate app-build-manifest correctly",
        "app-dir alias should handle typescript paths alias correctly",
        "app-dir alias should not contain installed react/react-dom version in client chunks",
        "app-dir alias should resolve css imports from outside with src folder presented"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-basepath-custom-server/index.test.ts": {
      "passed": [
        "custom-app-server-action-redirect redirects with basepath properly when server action handler uses `redirect`",
        "custom-app-server-action-redirect redirects with proper cookies set from both redirect response and post respose"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-basepath/index.test.ts": {
      "passed": [
        "app dir - basepath should handle redirect in dynamic in suspense boundary routes with basePath",
        "app dir - basepath should only make a single RSC call to the current page (/base/refresh)",
        "app dir - basepath should only make a single RSC call to the current page (/base/refresh?foo=bar)",
        "app dir - basepath should prefix metadata og image with basePath",
        "app dir - basepath should prefix redirect() with basePath",
        "app dir - basepath should properly stream an internal server action redirect() with a absolute URL",
        "app dir - basepath should properly stream an internal server action redirect() with a relative URL",
        "app dir - basepath should redirect externally when encountering absolute URLs on the same host outside the basePath",
        "app dir - basepath should render usePathname without the basePath",
        "app dir - basepath should successfully hard navigate from pages -> app",
        "app dir - basepath should support Link with basePath prefixed",
        "app dir - basepath should support `basePath`"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-client-cache/client-cache.defaults.test.ts": {
      "passed": [
        "app dir client cache semantics (default semantics) prefetch={false} should not prefetch the page at all",
        "app dir client cache semantics (default semantics) prefetch={false} should not re-use the page segment cache",
        "app dir client cache semantics (default semantics) prefetch={true} should prefetch again after 5 mins if the link is visible again",
        "app dir client cache semantics (default semantics) prefetch={true} should prefetch the full page",
        "app dir client cache semantics (default semantics) prefetch={true} should re-use the cache for the full page, only for 5 mins",
        "app dir client cache semantics (default semantics) prefetch={undefined} - default should not re-use the page segment cache",
        "app dir client cache semantics (default semantics) prefetch={undefined} - default should prefetch partially a dynamic page",
        "app dir client cache semantics (default semantics) prefetch={undefined} - default should refetch the full page after 5 mins",
        "app dir client cache semantics (default semantics) prefetch={undefined} - default should respect a loading boundary that returns `null`",
        "app dir client cache semantics (default semantics) should renew the initial seeded data after expiration time"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-client-cache/client-cache.experimental.test.ts": {
      "passed": [
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 prefetch={false} should trigger a loading state before fetching the page, followed by fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 prefetch={false} without a loading boundary should get fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 prefetch={true} should re-use the cache for 5 minutes (default \"static\" time)",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 prefetch={undefined} - default should trigger a loading state before fetching the page, followed by fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 prefetch={undefined} - default without a loading boundary should get fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0 telemetry should send staleTimes feature usage event",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0, static: 0 should trigger a loading state before fetching the page, followed by fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) dynamic: 0, static: 0 without a loading boundary should get fresh data on every subsequent navigation",
        "app dir client cache semantics (experimental staleTimes) static: 180 prefetch={true} should use the custom static override time (3 minutes)",
        "app dir client cache semantics (experimental staleTimes) static: 180 prefetch={undefined} - default should re-use the loading boundary for the custom static override time (3 minutes)",
        "app dir client cache semantics (experimental staleTimes) static: 180 telemetry should send staleTimes feature usage event"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-client-cache/client-cache.original.test.ts": {
      "passed": [
        "app dir client cache semantics (30s/5min) prefetch={false} should not prefetch the page at all",
        "app dir client cache semantics (30s/5min) prefetch={false} should re-use the cache only for 30 seconds",
        "app dir client cache semantics (30s/5min) prefetch={true} should prefetch again after 5 mins if the link is visible again",
        "app dir client cache semantics (30s/5min) prefetch={true} should prefetch the full page",
        "app dir client cache semantics (30s/5min) prefetch={true} should re-use the cache for the full page, only for 5 mins",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should prefetch partially a dynamic page",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should re-use the full cache for only 30 seconds",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should refetch below the fold after 30 seconds",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should refetch the full page after 5 mins",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should renew the 30s cache once the data is revalidated",
        "app dir client cache semantics (30s/5min) prefetch={undefined} - default should respect a loading boundary that returns `null`",
        "app dir client cache semantics (30s/5min) should renew the initial seeded data after expiration time",
        "app dir client cache semantics (30s/5min) should seed the prefetch cache with the fetched page data"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-client-cache/client-cache.parallel-routes.test.ts": {
      "passed": [
        "app dir client cache with parallel routes prefetch={true} should prefetch the full page",
        "app dir client cache with parallel routes prefetch={true} should re-use the cache for the full page, only for 5 mins"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-compilation/index.test.ts": {
      "passed": [
        "app dir Loading should render loading.js in initial html for slow page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-config-crossorigin/index.test.ts": {
      "passed": ["app dir - crossOrigin config skip in start mode"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-css-pageextensions/index.test.ts": {
      "passed": [
        "app dir - css with pageextensions css support with pageextensions page in app directory with pageextention, css should work should support global css inside layout"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-css/index.test.ts": {
      "passed": [
        "app dir - css css support chunks should bundle css resources into chunks",
        "app dir - css css support client components should support css modules inside client components",
        "app dir - css css support client components should support css modules inside client page",
        "app dir - css css support client layouts should support css modules inside client layouts",
        "app dir - css css support client layouts should support global css inside client layouts",
        "app dir - css css support client pages should support css modules inside client pages",
        "app dir - css css support client pages should support global css inside client pages",
        "app dir - css css support css ordering should have inner layers take precedence over outer layers",
        "app dir - css css support page extensions should include css imported in MDX pages",
        "app dir - css css support server layouts should support css modules inside server layouts",
        "app dir - css css support server layouts should support external css imports",
        "app dir - css css support server pages should not contain pages css in app dir page",
        "app dir - css css support server pages should support css modules inside server pages",
        "app dir - css css support server pages should support global css inside server pages",
        "app dir - css css support special entries should include css imported in client not-found.js",
        "app dir - css css support special entries should include css imported in client template.js",
        "app dir - css css support special entries should include css imported in error.js",
        "app dir - css css support special entries should include css imported in loading.js",
        "app dir - css css support special entries should include css imported in root not-found.js",
        "app dir - css css support special entries should include css imported in server not-found.js",
        "app dir - css css support special entries should include css imported in server template.js",
        "app dir - css css support special entries should include root layout css for root not-found.js",
        "app dir - css pages dir should include css modules and global css after page transition",
        "app dir - css sass support client layouts should support global sass/scss inside client layouts",
        "app dir - css sass support client layouts should support sass/scss modules inside client layouts",
        "app dir - css sass support client pages should support global sass/scss inside client pages",
        "app dir - css sass support client pages should support sass/scss modules inside client pages",
        "app dir - css sass support server layouts should support global sass/scss inside server layouts",
        "app dir - css sass support server layouts should support sass/scss modules inside server layouts",
        "app dir - css sass support server pages should support global sass/scss inside server pages",
        "app dir - css sass support server pages should support sass/scss modules inside server pages"
      ],
      "failed": [],
      "pending": [
        "app dir - css css support server layouts should support global css inside server layouts"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-custom-cache-handler/index.test.ts": {
      "passed": [
        "app-dir - custom-cache-handler - cjs cjs module exports should have logs from cache-handler",
        "app-dir - custom-cache-handler - cjs-default-export cjs default export should have logs from cache-handler",
        "app-dir - custom-cache-handler - esm esm default export should have logs from cache-handler"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-edge-root-layout/index.test.ts": {
      "passed": [
        "app-dir edge runtime root layout should mark static contain metadata routes as edge functions",
        "app-dir edge runtime root layout should not emit metadata files into bad paths"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-edge/app-edge.test.ts": {
      "passed": [
        "app-dir edge SSR should handle /index routes correctly",
        "app-dir edge SSR should handle edge only routes",
        "app-dir edge SSR should retrieve cookies in a server component in the edge runtime",
        "app-dir edge SSR should treat process as object without polyfill in edge runtime"
      ],
      "failed": [
        "app-dir edge SSR should generate matchers correctly in middleware manifest"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-esm-js/index.test.ts": {
      "passed": [
        "app-dir - esm js extension should be able to render nextjs api in app router",
        "app-dir - esm js extension should be able to use nextjs api in pages router",
        "app-dir - esm js extension should support next/og image"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-external/app-external.test.ts": {
      "passed": [
        "app dir - external dependency app route should resolve next/server api from external esm package",
        "app dir - external dependency mixed syntax external modules should handle mixed module in server and client components",
        "app dir - external dependency mixed syntax external modules should handle mixed module with next/dynamic",
        "app dir - external dependency react in external esm packages should support namespace import with ESM packages",
        "app dir - external dependency react in external esm packages should use the same react in client app",
        "app dir - external dependency react in external esm packages should use the same react in edge server app",
        "app dir - external dependency react in external esm packages should use the same react in pages",
        "app dir - external dependency react in external esm packages should use the same react in server app",
        "app dir - external dependency server actions should compile server actions from node_modules in client components",
        "app dir - external dependency server actions should prefer to resolve esm over cjs for bundling optout packages",
        "app dir - external dependency should be able to opt-out 3rd party packages being bundled in server components",
        "app dir - external dependency should correctly collect global css imports and mark them as side effects",
        "app dir - external dependency should emit cjs helpers for external cjs modules when compiled",
        "app dir - external dependency should export client module references in esm",
        "app dir - external dependency should handle external async module libraries correctly",
        "app dir - external dependency should handle external css modules",
        "app dir - external dependency should handle external css modules in pages",
        "app dir - external dependency should handle external next/font",
        "app dir - external dependency should have proper tree-shaking for known modules in CJS",
        "app dir - external dependency should resolve 3rd party package exports based on the react-server condition",
        "app dir - external dependency should resolve the subset react in server components based on the react-server condition",
        "app dir - external dependency should support exporting multiple star re-exports",
        "app dir - external dependency should transpile specific external packages with the `transpilePackages` option",
        "app dir - external dependency should use the same async storages if imported directly",
        "app dir - external dependency should use the same export type for packages in both ssr and client"
      ],
      "failed": [],
      "pending": [
        "app dir - external dependency should not apply swc optimizer transform for external packages in browser layer in web worker"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-fetch-deduping/app-fetch-deduping.test.ts": {
      "passed": ["app-fetch-deduping should skip other scenarios"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-invalid-revalidate/app-invalid-revalidate.test.ts": {
      "passed": [
        "app-invalid-revalidate should error properly for invalid revalidate at layout",
        "app-invalid-revalidate should error properly for invalid revalidate at page",
        "app-invalid-revalidate should error properly for invalid revalidate on fetch",
        "app-invalid-revalidate should error properly for invalid revalidate on unstable_cache"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-middleware/app-middleware.test.ts": {
      "passed": [
        "app dir - middleware with middleware in src dir works without crashing when using requestAsyncStorage",
        "app dir - middleware without pages dir Updates headers",
        "app-dir with middleware Mutate request headers for Edge Functions Adds new headers",
        "app-dir with middleware Mutate request headers for Edge Functions Deletes headers",
        "app-dir with middleware Mutate request headers for Edge Functions Supports draft mode",
        "app-dir with middleware Mutate request headers for Edge Functions Updates headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Adds new headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Deletes headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Supports draft mode",
        "app-dir with middleware Mutate request headers for Serverless Functions Updates headers",
        "app-dir with middleware Mutate request headers for next/headers Adds new headers",
        "app-dir with middleware Mutate request headers for next/headers Deletes headers",
        "app-dir with middleware Mutate request headers for next/headers Supports draft mode",
        "app-dir with middleware Mutate request headers for next/headers Updates headers",
        "app-dir with middleware should be possible to modify cookies & read them in an RSC in a single request"
      ],
      "failed": [
        "app-dir with middleware should filter correctly after middleware rewrite"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-false-loading/app-prefetch-false-loading.test.ts": {
      "passed": [
        "app-prefetch-false-loading should not re-trigger loading state when navigating between pages that share a dynamic layout",
        "app-prefetch-false-loading should render loading for the initial render"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-false/app-prefetch-false.test.ts": {
      "passed": [
        "app-prefetch-false should avoid double-fetching when optimistic navigation fails"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-static/app-prefetch-static.test.ts": {
      "passed": [
        "app-prefetch-static should correctly navigate between static & dynamic pages"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch/prefetching.stale-times.test.ts": {
      "passed": [
        "app dir - prefetching (custom staleTime) should not fetch again when a static page was prefetched when navigating to it twice",
        "app dir - prefetching (custom staleTime) should not re-fetch cached data when navigating back to a route group"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch/prefetching.test.ts": {
      "passed": [
        "app dir - prefetching NEXT_RSC_UNION_QUERY query name is _rsc",
        "app dir - prefetching dynamic rendering /force-dynamic should not re-render layout when navigating between sub-pages",
        "app dir - prefetching dynamic rendering /force-dynamic should update search params following a link click",
        "app dir - prefetching dynamic rendering /revalidate-0 should not re-render layout when navigating between sub-pages",
        "app dir - prefetching dynamic rendering /revalidate-0 should update search params following a link click",
        "app dir - prefetching fetch priority should have an auto priority for all other fetch operations",
        "app dir - prefetching fetch priority should prefetch links in viewport with low priority",
        "app dir - prefetching fetch priority should prefetch with high priority when navigating to a page without a prefetch entry",
        "app dir - prefetching invalid URLs should not throw when an invalid URL is passed to Link",
        "app dir - prefetching invalid URLs should throw when an invalid URL is passed to router.prefetch",
        "app dir - prefetching should calculate `_rsc` query based on `Next-Url`",
        "app dir - prefetching should immediately render the loading state for a dynamic segment when fetched from higher up in the tree",
        "app dir - prefetching should navigate when prefetch is false",
        "app dir - prefetching should not fetch again when a static page was prefetched",
        "app dir - prefetching should not have prefetch error for static path",
        "app dir - prefetching should not need to prefetch the layout if the prefetch is initiated at the same segment",
        "app dir - prefetching should not prefetch for a bot user agent",
        "app dir - prefetching should not re-render error component when triggering a prefetch action",
        "app dir - prefetching should only prefetch the loading state and not the component tree when prefetching at the same segment",
        "app dir - prefetching should show layout eagerly when prefetched with loading one level down"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-rendering/rendering.test.ts": {
      "passed": [
        "app dir rendering ISR should revalidate the page when revalidate is configured",
        "app dir rendering SSR only should run data fetch in parallel",
        "app dir rendering SSR only should run data in layout and page",
        "app dir rendering should serve app/page.server.js at /",
        "app dir rendering static only should run data in layout and page",
        "app dir rendering static only should run data in parallel and use cached version for production"
      ],
      "failed": [],
      "pending": [
        "app dir rendering mixed static and dynamic should generate static data during build and use it"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes-client-component/app-routes-client-component.test.ts": {
      "passed": [
        "referencing a client component in an app route responds without error"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes-subrequests/app-routes-subrequests.test.ts": {
      "passed": ["app-routes-subrequests shortcuts after 5 subrequests"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes-trailing-slash/app-routes-trailing-slash.test.ts": {
      "passed": [
        "app-routes-trailing-slash should handle trailing slash for edge runtime",
        "app-routes-trailing-slash should handle trailing slash for node runtime"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes/app-custom-route-base-path.test.ts": {
      "passed": [
        "app-custom-routes automatic implementations implements HEAD on routes with GET already implemented",
        "app-custom-routes automatic implementations implements OPTIONS on routes",
        "app-custom-routes basic fetch request with a response abort via a DELETE request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a DELETE request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a GET request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a GET request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PATCH request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PATCH request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a POST request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a POST request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PUT request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PUT request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response request can read query parameters",
        "app-custom-routes basic fetch request with a response request can read query parameters (edge)",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.json() helper",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.redirect() helper",
        "app-custom-routes basic fetch request with a response route groups routes to the correct handler",
        "app-custom-routes body can handle handle a streaming request and streaming response",
        "app-custom-routes body can handle handle a streaming request and streaming response (edge)",
        "app-custom-routes body can read a JSON encoded body",
        "app-custom-routes body can read a JSON encoded body (edge)",
        "app-custom-routes body can read a JSON encoded body for DELETE requests",
        "app-custom-routes body can read a JSON encoded body for OPTIONS requests",
        "app-custom-routes body can read a streamed JSON encoded body",
        "app-custom-routes body can read a streamed JSON encoded body (edge)",
        "app-custom-routes body can read the text body",
        "app-custom-routes body can read the text body (edge)",
        "app-custom-routes context does not provide params to routes without dynamic parameters",
        "app-custom-routes context provides params to routes with catch-all routes",
        "app-custom-routes context provides params to routes with dynamic parameters",
        "app-custom-routes customized metadata routes should work if conflict with metadata routes convention",
        "app-custom-routes dynamic = \"force-static\" strips search, headers, and domain from request",
        "app-custom-routes edge functions returns a response when headers are accessed",
        "app-custom-routes edge functions returns response using edge runtime",
        "app-custom-routes error conditions responds with 400 (Bad Request) when the requested method is not a valid HTTP method",
        "app-custom-routes error conditions responds with 405 (Method Not Allowed) when method is not implemented",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler calls NextResponse.next()",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler throws an error",
        "app-custom-routes hooks cookies gets the correct values",
        "app-custom-routes hooks cookies().has() gets the correct values",
        "app-custom-routes hooks headers gets the correct values",
        "app-custom-routes hooks notFound can respond correctly in edge",
        "app-custom-routes hooks notFound can respond correctly in nodejs",
        "app-custom-routes hooks permanentRedirect can respond correctly",
        "app-custom-routes hooks redirect can respond correctly",
        "app-custom-routes hooks req.cookies gets the correct values",
        "app-custom-routes no bundle error should not print bundling warning about React",
        "app-custom-routes no response returned should print an error when no response is returned",
        "app-custom-routes works with api prefix correctly does not statically generate with dynamic usage",
        "app-custom-routes works with api prefix correctly statically generates correctly with no dynamic usage",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/first/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/second/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/three/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/first/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/second/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/three/data.json"
      ],
      "failed": [],
      "pending": [
        "app-custom-routes basic fetch request with a response response supports the NextResponse.rewrite() helper"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes/app-custom-routes.test.ts": {
      "passed": [
        "app-custom-routes automatic implementations implements HEAD on routes with GET already implemented",
        "app-custom-routes automatic implementations implements OPTIONS on routes",
        "app-custom-routes basic fetch request with a response abort via a DELETE request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a DELETE request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a GET request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a GET request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PATCH request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PATCH request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a POST request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a POST request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PUT request aborts without error on /basic/endpoint",
        "app-custom-routes basic fetch request with a response abort via a PUT request aborts without error on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response request can read query parameters",
        "app-custom-routes basic fetch request with a response request can read query parameters (edge)",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.json() helper",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.redirect() helper",
        "app-custom-routes basic fetch request with a response route groups routes to the correct handler",
        "app-custom-routes body can handle handle a streaming request and streaming response",
        "app-custom-routes body can handle handle a streaming request and streaming response (edge)",
        "app-custom-routes body can read a JSON encoded body",
        "app-custom-routes body can read a JSON encoded body (edge)",
        "app-custom-routes body can read a JSON encoded body for DELETE requests",
        "app-custom-routes body can read a JSON encoded body for OPTIONS requests",
        "app-custom-routes body can read a streamed JSON encoded body",
        "app-custom-routes body can read a streamed JSON encoded body (edge)",
        "app-custom-routes body can read the text body",
        "app-custom-routes body can read the text body (edge)",
        "app-custom-routes context does not provide params to routes without dynamic parameters",
        "app-custom-routes context provides params to routes with catch-all routes",
        "app-custom-routes context provides params to routes with dynamic parameters",
        "app-custom-routes customized metadata routes should work if conflict with metadata routes convention",
        "app-custom-routes dynamic = \"force-static\" strips search, headers, and domain from request",
        "app-custom-routes edge functions returns a response when headers are accessed",
        "app-custom-routes edge functions returns response using edge runtime",
        "app-custom-routes error conditions responds with 400 (Bad Request) when the requested method is not a valid HTTP method",
        "app-custom-routes error conditions responds with 405 (Method Not Allowed) when method is not implemented",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler calls NextResponse.next()",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler throws an error",
        "app-custom-routes hooks cookies gets the correct values",
        "app-custom-routes hooks cookies().has() gets the correct values",
        "app-custom-routes hooks headers gets the correct values",
        "app-custom-routes hooks notFound can respond correctly in edge",
        "app-custom-routes hooks notFound can respond correctly in nodejs",
        "app-custom-routes hooks permanentRedirect can respond correctly",
        "app-custom-routes hooks redirect can respond correctly",
        "app-custom-routes hooks req.cookies gets the correct values",
        "app-custom-routes no bundle error should not print bundling warning about React",
        "app-custom-routes no response returned should print an error when no response is returned",
        "app-custom-routes works with api prefix correctly does not statically generate with dynamic usage",
        "app-custom-routes works with api prefix correctly statically generates correctly with no dynamic usage",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/first/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/second/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/three/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/first/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/second/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/three/data.json"
      ],
      "failed": [],
      "pending": [
        "app-custom-routes basic fetch request with a response response supports the NextResponse.rewrite() helper"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-simple-routes/app-simple-routes.test.ts": {
      "passed": [
        "app-simple-routes works with simple routes renders a edge route",
        "app-simple-routes works with simple routes renders a node route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-static/app-static-custom-handler.test.ts": {
      "passed": [
        "app-dir static/dynamic handling Incremental cache limits should cache large data when using custom cache handler and force-cache mode",
        "app-dir static/dynamic handling fetch `cache` should supercede dynamic config when force-dynamic is used",
        "app-dir static/dynamic handling fetchCache config should supercede dynamic config when force-dynamic is used",
        "app-dir static/dynamic handling force-dynamic should supercede a \"default\" cache value",
        "app-dir static/dynamic handling should allow dynamic routes to access cookies",
        "app-dir static/dynamic handling should build dynamic param with edge runtime correctly",
        "app-dir static/dynamic handling should cache correctly for cache: no-store",
        "app-dir static/dynamic handling should cache correctly for fetchCache = default-cache",
        "app-dir static/dynamic handling should cache correctly for fetchCache = force-cache",
        "app-dir static/dynamic handling should cache correctly handle JSON body",
        "app-dir static/dynamic handling should cache correctly when accessing search params opts into dynamic rendering",
        "app-dir static/dynamic handling should cache correctly with POST method and revalidate",
        "app-dir static/dynamic handling should cache correctly with authorization header and revalidate",
        "app-dir static/dynamic handling should cache correctly with cookie header and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate edge",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding edge",
        "app-dir static/dynamic handling should correctly handle fetchCache = \"force-no-store\"",
        "app-dir static/dynamic handling should correctly handle statusCode with notFound + ISR",
        "app-dir static/dynamic handling should correctly include headers instance in cache key",
        "app-dir static/dynamic handling should correctly skip caching POST fetch for POST handler",
        "app-dir static/dynamic handling should force SSR correctly for headers usage",
        "app-dir static/dynamic handling should handle dynamicParams: true correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with default dynamicParams correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with layout dynamicParams = false correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with page dynamicParams = false correctly",
        "app-dir static/dynamic handling should have correct prerender-manifest entries",
        "app-dir static/dynamic handling should have deterministic etag across revalidates",
        "app-dir static/dynamic handling should have logs from cache-handler",
        "app-dir static/dynamic handling should honor fetch cache correctly",
        "app-dir static/dynamic handling should honor fetch cache correctly (edge)",
        "app-dir static/dynamic handling should infer a fetchCache of force-no-store when force-dynamic is used",
        "app-dir static/dynamic handling should keep querystring on static page",
        "app-dir static/dynamic handling should not cache correctly with POST method request init",
        "app-dir static/dynamic handling should not cache non-ok statusCode",
        "app-dir static/dynamic handling should not error with dynamic server usage with force-static",
        "app-dir static/dynamic handling should not error with force-dynamic and catch-all routes",
        "app-dir static/dynamic handling should not error with generateStaticParams and authed data on revalidate",
        "app-dir static/dynamic handling should not error with generateStaticParams and dynamic data",
        "app-dir static/dynamic handling should not have cache tags header for non-minimal mode",
        "app-dir static/dynamic handling should not throw Dynamic Server Usage error when using generateStaticParams with draftMode",
        "app-dir static/dynamic handling should output debug info for static bailouts",
        "app-dir static/dynamic handling should produce response with url from fetch",
        "app-dir static/dynamic handling should propagate unstable_cache tags correctly",
        "app-dir static/dynamic handling should properly error when dynamic = \"error\" page uses dynamic",
        "app-dir static/dynamic handling should render not found pages correctly and fallback to the default one",
        "app-dir static/dynamic handling should skip cache in draft mode",
        "app-dir static/dynamic handling should skip fetch cache when accessing request properties",
        "app-dir static/dynamic handling should skip fetch cache when an authorization header is present after dynamic usage",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch cache option",
        "app-dir static/dynamic handling should ssr dynamically when forced via config",
        "app-dir static/dynamic handling should still cache even though the `traceparent` header was different",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/route-handler",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/route-handler",
        "app-dir static/dynamic handling should use auto no cache when no fetch config",
        "app-dir static/dynamic handling should warn for too many cache tags",
        "app-dir static/dynamic handling should work with dynamic path no generateStaticParams",
        "app-dir static/dynamic handling should work with forced dynamic path",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-node",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-node",
        "app-dir static/dynamic handling unstable_cache should bypass cache in draft mode",
        "app-dir static/dynamic handling unstable_cache should not error when calling a fetch no-cache",
        "app-dir static/dynamic handling unstable_cache should not error when calling a fetch no-store",
        "app-dir static/dynamic handling unstable_cache should not error when retrieving the value undefined",
        "app-dir static/dynamic handling unstable_cache should retrieve the same value on second request",
        "app-dir static/dynamic handling unstable_noStore should not opt-out of static optimization when used in next/cache",
        "app-dir static/dynamic handling unstable_noStore should opt-out of static optimization",
        "app-dir static/dynamic handling usePathname should have the correct values",
        "app-dir static/dynamic handling usePathname should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams client should bailout to client rendering - with suspense boundary",
        "app-dir static/dynamic handling useSearchParams client should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams server response should bailout to client rendering - with suspense boundary"
      ],
      "failed": [
        "app-dir static/dynamic handling should output HTML/RSC files for static paths"
      ],
      "pending": [
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-edge",
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-node",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch revalidate option",
        "app-dir static/dynamic handling useSearchParams client should have empty search params on force-static",
        "app-dir static/dynamic handling useSearchParams server response should have empty search params on force-static"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-static/app-static.test.ts": {
      "passed": [
        "app-dir static/dynamic handling Incremental cache limits should load data only at build time even if response data size is greater than 2MB and FetchCache is possible",
        "app-dir static/dynamic handling fetch `cache` should supercede dynamic config when force-dynamic is used",
        "app-dir static/dynamic handling fetchCache config should supercede dynamic config when force-dynamic is used",
        "app-dir static/dynamic handling force-dynamic should supercede a \"default\" cache value",
        "app-dir static/dynamic handling it should revalidate correctly with edge route handler",
        "app-dir static/dynamic handling it should revalidate correctly with node route handler",
        "app-dir static/dynamic handling it should revalidate tag correctly with edge route handler",
        "app-dir static/dynamic handling it should revalidate tag correctly with node route handler",
        "app-dir static/dynamic handling should allow dynamic routes to access cookies",
        "app-dir static/dynamic handling should build dynamic param with edge runtime correctly",
        "app-dir static/dynamic handling should cache correctly for cache: no-store",
        "app-dir static/dynamic handling should cache correctly for fetchCache = default-cache",
        "app-dir static/dynamic handling should cache correctly for fetchCache = force-cache",
        "app-dir static/dynamic handling should cache correctly handle JSON body",
        "app-dir static/dynamic handling should cache correctly when accessing search params opts into dynamic rendering",
        "app-dir static/dynamic handling should cache correctly with POST method and revalidate",
        "app-dir static/dynamic handling should cache correctly with authorization header and revalidate",
        "app-dir static/dynamic handling should cache correctly with cookie header and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate edge",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding edge",
        "app-dir static/dynamic handling should correctly error and not update cache for ISR",
        "app-dir static/dynamic handling should correctly handle fetchCache = \"force-no-store\"",
        "app-dir static/dynamic handling should correctly handle statusCode with notFound + ISR",
        "app-dir static/dynamic handling should correctly include headers instance in cache key",
        "app-dir static/dynamic handling should correctly skip caching POST fetch for POST handler",
        "app-dir static/dynamic handling should force SSR correctly for headers usage",
        "app-dir static/dynamic handling should handle dynamicParams: false correctly",
        "app-dir static/dynamic handling should handle dynamicParams: true correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with default dynamicParams correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with layout dynamicParams = false correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with page dynamicParams = false correctly",
        "app-dir static/dynamic handling should have correct prerender-manifest entries",
        "app-dir static/dynamic handling should have deterministic etag across revalidates",
        "app-dir static/dynamic handling should honor dynamic = \"force-static\" correctly",
        "app-dir static/dynamic handling should honor dynamic = \"force-static\" correctly (lazy)",
        "app-dir static/dynamic handling should honor fetch cache correctly",
        "app-dir static/dynamic handling should honor fetch cache correctly (edge)",
        "app-dir static/dynamic handling should honor fetch cache in generateStaticParams",
        "app-dir static/dynamic handling should honor force-static with fetch cache: no-store correctly",
        "app-dir static/dynamic handling should infer a fetchCache of force-no-store when force-dynamic is used",
        "app-dir static/dynamic handling should keep querystring on static page",
        "app-dir static/dynamic handling should navigate to static path correctly",
        "app-dir static/dynamic handling should not cache correctly with POST method request init",
        "app-dir static/dynamic handling should not cache non-ok statusCode",
        "app-dir static/dynamic handling should not error with dynamic server usage with force-static",
        "app-dir static/dynamic handling should not error with force-dynamic and catch-all routes",
        "app-dir static/dynamic handling should not error with generateStaticParams and authed data on revalidate",
        "app-dir static/dynamic handling should not error with generateStaticParams and dynamic data",
        "app-dir static/dynamic handling should not have cache tags header for non-minimal mode",
        "app-dir static/dynamic handling should not revalidate / when revalidate is not used",
        "app-dir static/dynamic handling should not throw Dynamic Server Usage error when using generateStaticParams with draftMode",
        "app-dir static/dynamic handling should output debug info for static bailouts",
        "app-dir static/dynamic handling should produce response with url from fetch",
        "app-dir static/dynamic handling should propagate unstable_cache tags correctly",
        "app-dir static/dynamic handling should properly error when dynamic = \"error\" page uses dynamic",
        "app-dir static/dynamic handling should properly revalidate a route handler that triggers dynamic usage with force-static",
        "app-dir static/dynamic handling should render not found pages correctly and fallback to the default one",
        "app-dir static/dynamic handling should revalidate all fetches during on-demand revalidate",
        "app-dir static/dynamic handling should revalidate correctly with config and fetch revalidate",
        "app-dir static/dynamic handling should skip cache in draft mode",
        "app-dir static/dynamic handling should skip fetch cache when accessing request properties",
        "app-dir static/dynamic handling should skip fetch cache when an authorization header is present after dynamic usage",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch cache option",
        "app-dir static/dynamic handling should ssr dynamically when forced via config",
        "app-dir static/dynamic handling should still cache even though the `traceparent` header was different",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/route-handler",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/route-handler",
        "app-dir static/dynamic handling should use auto no cache when no fetch config",
        "app-dir static/dynamic handling should warn for too many cache tags",
        "app-dir static/dynamic handling should work with dynamic path no generateStaticParams",
        "app-dir static/dynamic handling should work with forced dynamic path",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-node",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-node",
        "app-dir static/dynamic handling unstable_cache should bypass cache in draft mode",
        "app-dir static/dynamic handling unstable_cache should not error when calling a fetch no-cache",
        "app-dir static/dynamic handling unstable_cache should not error when calling a fetch no-store",
        "app-dir static/dynamic handling unstable_cache should not error when retrieving the value undefined",
        "app-dir static/dynamic handling unstable_cache should retrieve the same value on second request",
        "app-dir static/dynamic handling unstable_noStore should not opt-out of static optimization when used in next/cache",
        "app-dir static/dynamic handling unstable_noStore should opt-out of static optimization",
        "app-dir static/dynamic handling usePathname should have the correct values",
        "app-dir static/dynamic handling usePathname should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams client should bailout to client rendering - with suspense boundary",
        "app-dir static/dynamic handling useSearchParams client should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams server response should bailout to client rendering - with suspense boundary"
      ],
      "failed": [
        "app-dir static/dynamic handling should output HTML/RSC files for static paths"
      ],
      "pending": [
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-edge",
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-node",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch revalidate option",
        "app-dir static/dynamic handling useSearchParams client should have empty search params on force-static",
        "app-dir static/dynamic handling useSearchParams server response should have empty search params on force-static"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-validation/validation.test.ts": {
      "passed": [
        "app dir - validation should error when passing invalid router state tree"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/experimental-compile.test.ts": {
      "passed": [
        "app dir - basic <Link /> should allow linking from app page to pages page",
        "app dir - basic <Link /> should be soft for back navigation",
        "app dir - basic <Link /> should be soft for forward navigation",
        "app dir - basic <Link /> should hard push",
        "app dir - basic <Link /> should hard replace",
        "app dir - basic <Link /> should navigate to pages dynamic route from pages page if it overlaps with an app page",
        "app dir - basic <Link /> should push to external url",
        "app dir - basic <Link /> should replace to external url",
        "app dir - basic <Link /> should soft push",
        "app dir - basic <Link /> should soft replace",
        "app dir - basic bootstrap scripts should only bootstrap with one script, prinitializing the rest",
        "app dir - basic bootstrap scripts should successfully bootstrap even when using CSP",
        "app dir - basic data fetch with response over 16KB with chunked encoding should load page when fetching a large amount of data",
        "app dir - basic known bugs should handle as on next/link",
        "app dir - basic known bugs should handle next/link back to initially loaded page",
        "app dir - basic known bugs should handle router.refresh without resetting state",
        "app dir - basic known bugs should not do additional pushState when already on the page",
        "app dir - basic known bugs should not share flight data between requests",
        "app dir - basic known bugs should support React cache client component",
        "app dir - basic known bugs should support React cache client component client-navigation",
        "app dir - basic known bugs should support React cache middleware overriding headers",
        "app dir - basic known bugs should support React cache server component",
        "app dir - basic known bugs should support React cache server component client-navigation",
        "app dir - basic known bugs should support React fetch instrumentation server component",
        "app dir - basic known bugs should support React fetch instrumentation server component client-navigation",
        "app dir - basic next/script should insert preload tags for beforeInteractive and afterInteractive scripts",
        "app dir - basic next/script should load stylesheets for next/scripts",
        "app dir - basic next/script should pass `nonce`",
        "app dir - basic next/script should pass nonce when using next/font",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts with a src prop",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts without a src prop",
        "app dir - basic next/script should support next/script and render in correct order",
        "app dir - basic rewrites should support rewrites on client-side navigation",
        "app dir - basic rewrites should support rewrites on client-side navigation from pages to app with existing pages path",
        "app dir - basic rewrites should support rewrites on initial load",
        "app dir - basic searchParams prop client component should have the correct search params",
        "app dir - basic searchParams prop client component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop client component should have the correct search params on rewrite",
        "app dir - basic searchParams prop server component should have the correct search params",
        "app dir - basic searchParams prop server component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop server component should have the correct search params on rewrite",
        "app dir - basic server components Loading should render loading.js in browser for slow layout",
        "app dir - basic server components Loading should render loading.js in browser for slow layout and page",
        "app dir - basic server components Loading should render loading.js in browser for slow page",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout and page",
        "app dir - basic server components Loading should render loading.js in initial html for slow page",
        "app dir - basic server components catch-all routes should handle catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional segments",
        "app dir - basic server components catch-all routes should handle optional segments root",
        "app dir - basic server components catch-all routes should handle required segments",
        "app dir - basic server components catch-all routes should handle required segments root as not found",
        "app dir - basic server components client components should have consistent query and params handling",
        "app dir - basic server components dynamic routes should only pass params that apply to the layout",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for redirect",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for rewrite",
        "app dir - basic server components next/router should support router.back and router.forward",
        "app dir - basic server components should include client component layout with server component route should include it client-side",
        "app dir - basic server components should include client component layout with server component route should include it server-side",
        "app dir - basic server components should not serve .client.js as a path",
        "app dir - basic server components should not serve .server.js as a path",
        "app dir - basic server components should serve client component should serve client-side",
        "app dir - basic server components should serve client component should serve server-side",
        "app dir - basic server components should serve shared component",
        "app dir - basic should ensure the </body></html> suffix is at the end of the stream",
        "app dir - basic should handle hash in initial url",
        "app dir - basic should have correct searchParams and params (client)",
        "app dir - basic should have correct searchParams and params (server)",
        "app dir - basic should include document html and body",
        "app dir - basic should include layouts when no direct parent layout",
        "app dir - basic should include parent document when no direct parent layout",
        "app dir - basic should match redirects in pages correctly $path",
        "app dir - basic should not create new root layout when nested (optional)",
        "app dir - basic should not include parent when not in parent directory",
        "app dir - basic should not rerender layout when navigating between routes in the same layout",
        "app dir - basic should not serve when layout is provided but no folder index",
        "app dir - basic should not share edge workers",
        "app dir - basic should pass props from getServerSideProps in root layout",
        "app dir - basic should provide query for getStaticProps page correctly",
        "app dir - basic should return normalized dynamic route params for catch-all edge page",
        "app dir - basic should return the `vary` header from edge runtime",
        "app dir - basic should return the `vary` header from pages for flight requests",
        "app dir - basic should serve /index as separate page",
        "app dir - basic should serve dynamic parameter",
        "app dir - basic should serve dynamic route from pages",
        "app dir - basic should serve from app",
        "app dir - basic should serve from pages",
        "app dir - basic should serve from public",
        "app dir - basic should serve nested parent",
        "app dir - basic should serve page as a segment name correctly",
        "app dir - basic should serve polyfills for browsers that do not support modules",
        "app dir - basic should use new root layout when provided",
        "app dir - basic should use text/x-component for flight",
        "app dir - basic should use text/x-component for flight with edge runtime",
        "app dir - basic should work for catch-all edge page",
        "app dir - basic template component should render the template that holds state in a client component and reset on navigation",
        "app dir - basic template component should render the template that is a server component and rerender on navigation"
      ],
      "failed": [
        "app dir - basic should encode chunk path correctly",
        "app dir - basic should generate build traces correctly",
        "app dir - basic should not apply client router filter on shallow",
        "app dir - basic should successfully detect app route during prefetch"
      ],
      "pending": [
        "app dir - basic known bugs should support React fetch instrumentation client component",
        "app dir - basic known bugs should support React fetch instrumentation client component client-navigation",
        "app dir - basic should handle css imports in next/dynamic correctly",
        "app dir - basic should match partial parameters",
        "app dir - basic should not include parent when not in parent directory with route in directory"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/flying-shuttle.test.ts": {
      "passed": [],
      "failed": [
        "should output updated trace files should have file hashes in trace files"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/index.test.ts": {
      "passed": [
        "app dir - basic <Link /> should allow linking from app page to pages page",
        "app dir - basic <Link /> should be soft for back navigation",
        "app dir - basic <Link /> should be soft for forward navigation",
        "app dir - basic <Link /> should hard push",
        "app dir - basic <Link /> should hard replace",
        "app dir - basic <Link /> should navigate to pages dynamic route from pages page if it overlaps with an app page",
        "app dir - basic <Link /> should push to external url",
        "app dir - basic <Link /> should replace to external url",
        "app dir - basic <Link /> should soft push",
        "app dir - basic <Link /> should soft replace",
        "app dir - basic bootstrap scripts should only bootstrap with one script, prinitializing the rest",
        "app dir - basic bootstrap scripts should successfully bootstrap even when using CSP",
        "app dir - basic data fetch with response over 16KB with chunked encoding should load page when fetching a large amount of data",
        "app dir - basic known bugs should handle as on next/link",
        "app dir - basic known bugs should handle next/link back to initially loaded page",
        "app dir - basic known bugs should handle router.refresh without resetting state",
        "app dir - basic known bugs should not do additional pushState when already on the page",
        "app dir - basic known bugs should not share flight data between requests",
        "app dir - basic known bugs should support React cache client component",
        "app dir - basic known bugs should support React cache client component client-navigation",
        "app dir - basic known bugs should support React cache middleware overriding headers",
        "app dir - basic known bugs should support React cache server component",
        "app dir - basic known bugs should support React cache server component client-navigation",
        "app dir - basic known bugs should support React fetch instrumentation server component",
        "app dir - basic known bugs should support React fetch instrumentation server component client-navigation",
        "app dir - basic next/script should insert preload tags for beforeInteractive and afterInteractive scripts",
        "app dir - basic next/script should load stylesheets for next/scripts",
        "app dir - basic next/script should pass `nonce`",
        "app dir - basic next/script should pass nonce when using next/font",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts with a src prop",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts without a src prop",
        "app dir - basic next/script should support next/script and render in correct order",
        "app dir - basic rewrites should support rewrites on client-side navigation",
        "app dir - basic rewrites should support rewrites on client-side navigation from pages to app with existing pages path",
        "app dir - basic rewrites should support rewrites on initial load",
        "app dir - basic searchParams prop client component should have the correct search params",
        "app dir - basic searchParams prop client component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop client component should have the correct search params on rewrite",
        "app dir - basic searchParams prop server component should have the correct search params",
        "app dir - basic searchParams prop server component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop server component should have the correct search params on rewrite",
        "app dir - basic server components Loading should render loading.js in browser for slow layout",
        "app dir - basic server components Loading should render loading.js in browser for slow layout and page",
        "app dir - basic server components Loading should render loading.js in browser for slow page",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout and page",
        "app dir - basic server components Loading should render loading.js in initial html for slow page",
        "app dir - basic server components catch-all routes should handle catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional segments",
        "app dir - basic server components catch-all routes should handle optional segments root",
        "app dir - basic server components catch-all routes should handle required segments",
        "app dir - basic server components catch-all routes should handle required segments root as not found",
        "app dir - basic server components client components should have consistent query and params handling",
        "app dir - basic server components dynamic routes should only pass params that apply to the layout",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for redirect",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for rewrite",
        "app dir - basic server components next/router should support router.back and router.forward",
        "app dir - basic server components should include client component layout with server component route should include it client-side",
        "app dir - basic server components should include client component layout with server component route should include it server-side",
        "app dir - basic server components should not serve .client.js as a path",
        "app dir - basic server components should not serve .server.js as a path",
        "app dir - basic server components should serve client component should serve client-side",
        "app dir - basic server components should serve client component should serve server-side",
        "app dir - basic server components should serve shared component",
        "app dir - basic should ensure the </body></html> suffix is at the end of the stream",
        "app dir - basic should handle hash in initial url",
        "app dir - basic should have correct preferredRegion values in manifest",
        "app dir - basic should have correct searchParams and params (client)",
        "app dir - basic should have correct searchParams and params (server)",
        "app dir - basic should have correct size in build output",
        "app dir - basic should include document html and body",
        "app dir - basic should include layouts when no direct parent layout",
        "app dir - basic should include parent document when no direct parent layout",
        "app dir - basic should match redirects in pages correctly $path",
        "app dir - basic should not create new root layout when nested (optional)",
        "app dir - basic should not have entire prerender-manifest for edge",
        "app dir - basic should not include parent when not in parent directory",
        "app dir - basic should not rerender layout when navigating between routes in the same layout",
        "app dir - basic should not serve when layout is provided but no folder index",
        "app dir - basic should not share edge workers",
        "app dir - basic should pass props from getServerSideProps in root layout",
        "app dir - basic should return normalized dynamic route params for catch-all edge page",
        "app dir - basic should return the `vary` header from edge runtime",
        "app dir - basic should return the `vary` header from pages for flight requests",
        "app dir - basic should serve /index as separate page",
        "app dir - basic should serve dynamic parameter",
        "app dir - basic should serve dynamic route from pages",
        "app dir - basic should serve from app",
        "app dir - basic should serve from pages",
        "app dir - basic should serve from public",
        "app dir - basic should serve nested parent",
        "app dir - basic should serve page as a segment name correctly",
        "app dir - basic should serve polyfills for browsers that do not support modules",
        "app dir - basic should use new root layout when provided",
        "app dir - basic should use text/x-component for flight",
        "app dir - basic should use text/x-component for flight with edge runtime",
        "app dir - basic should work for catch-all edge page",
        "app dir - basic template component should render the template that holds state in a client component and reset on navigation",
        "app dir - basic template component should render the template that is a server component and rerender on navigation"
      ],
      "failed": [
        "app dir - basic should encode chunk path correctly",
        "app dir - basic should generate build traces correctly",
        "app dir - basic should not apply client router filter on shallow",
        "app dir - basic should not have loader generated function for edge runtime",
        "app dir - basic should successfully detect app route during prefetch"
      ],
      "pending": [
        "app dir - basic known bugs should support React fetch instrumentation client component",
        "app dir - basic known bugs should support React fetch instrumentation client component client-navigation",
        "app dir - basic should handle css imports in next/dynamic correctly",
        "app dir - basic should match partial parameters",
        "app dir - basic should not include parent when not in parent directory with route in directory"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/provide-paths.test.ts": {
      "passed": [],
      "failed": [
        "Provided page/app paths should only build the provided paths"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/standalone-gsp.test.ts": {
      "passed": [],
      "failed": [
        "output: standalone with getStaticProps should work correctly with output standalone"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/standalone.test.ts": {
      "passed": [],
      "failed": [
        "output: standalone with app dir should handle trace files correctly for route groups (nodejs only)",
        "output: standalone with app dir should work correctly with output standalone"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/useReportWebVitals.test.ts": {
      "passed": [],
      "failed": ["useReportWebVitals hook should send web-vitals"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/asset-prefix-with-basepath/asset-prefix-with-basepath.test.ts": {
      "passed": [
        "app-dir assetPrefix with basePath handling bundles should return 200 on served assetPrefix",
        "app-dir assetPrefix with basePath handling should redirect route when clicking link",
        "app-dir assetPrefix with basePath handling should redirect route when requesting it directly",
        "app-dir assetPrefix with basePath handling should redirect route when requesting it directly by browser",
        "app-dir assetPrefix with basePath handling should render link"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/asset-prefix/asset-prefix.test.ts": {
      "passed": [
        "app-dir assetPrefix handling bundles should return 200 on served assetPrefix",
        "app-dir assetPrefix handling should redirect route when clicking link",
        "app-dir assetPrefix handling should redirect route when requesting it directly",
        "app-dir assetPrefix handling should redirect route when requesting it directly by browser",
        "app-dir assetPrefix handling should render link"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/async-component-preload/async-component-preload.test.ts": {
      "passed": [
        "async-component-preload should handle redirect in an async page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/autoscroll-with-css-modules/index.test.ts": {
      "passed": [
        "router autoscrolling on navigation with css modules vertical scroll when page imports css modules should scroll to top of document when navigating between to pages without layout when",
        "router autoscrolling on navigation with css modules vertical scroll when page imports css modules should scroll when clicking in JS"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/back-button-download-bug/back-button-download-bug.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app-dir back button download bug app-dir back button download bug should redirect route when clicking link"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/binary/rsc-binary.test.ts": {
      "passed": [
        "RSC binary serialization should correctly encode/decode binaries and hydrate"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/build-size/index.test.ts": {
      "passed": ["app-dir build size should have correct size in build output"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/conflicting-page-segments/conflicting-page-segments.test.ts": {
      "passed": [],
      "failed": [
        "conflicting-page-segments should throw an error when a route groups causes a conflict with a parallel segment"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/create-root-layout/create-root-layout.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app-dir create root layout build should break the build if a page is missing root layout"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/crypto-globally-available/crypto-globally-available.test.ts": {
      "passed": [
        "Web Crypto API is available globally should be available in Route Handlers",
        "Web Crypto API is available globally should be available in Server Components"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/css-client-side-nav-parallel-routes/css-client-side-nav-parallel-routes.test.ts": {
      "passed": [
        "css-client-side-nav-parallel-routes should apply styles after navigation"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/css-modules-scoping/css-modules-scoping.test.ts": {
      "passed": [
        "css-modules-scoping should not prefix grid areas",
        "css-modules-scoping should prefix animation"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/css-order/css-order.test.ts": {
      "passed": [
        "css-order turbo should load correct styles navigating back again interleaved-a -> interleaved-b -> interleaved-a -> interleaved-b",
        "css-order turbo should load correct styles navigating back again pages-first -> pages-second -> pages-first -> pages-second",
        "css-order turbo should load correct styles navigating back again pages-first -> pages-third -> pages-first -> pages-third",
        "css-order turbo should load correct styles navigating back again pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b",
        "css-order turbo should load correct styles navigating back again pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a",
        "css-order turbo should load correct styles navigating back again pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b",
        "css-order turbo should load correct styles navigating back again pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a",
        "css-order turbo should load correct styles navigating back again pages-reversed-a -> pages-reversed-b -> pages-reversed-a -> pages-reversed-b",
        "css-order turbo should load correct styles navigating back again pages-reversed-b -> pages-reversed-a -> pages-reversed-b -> pages-reversed-a",
        "css-order turbo should load correct styles navigating back again pages-second -> pages-first -> pages-second -> pages-first",
        "css-order turbo should load correct styles navigating back again pages-second -> pages-third -> pages-second -> pages-third",
        "css-order turbo should load correct styles navigating back again pages-third -> pages-first -> pages-third -> pages-first",
        "css-order turbo should load correct styles navigating back again pages-third -> pages-second -> pages-third -> pages-second",
        "css-order turbo should load correct styles navigating big-interleaved-a -> big-interleaved-b",
        "css-order turbo should load correct styles navigating big-interleaved-b -> big-interleaved-a",
        "css-order turbo should load correct styles navigating first -> first-client",
        "css-order turbo should load correct styles navigating first -> second",
        "css-order turbo should load correct styles navigating first -> second-client",
        "css-order turbo should load correct styles navigating first -> third",
        "css-order turbo should load correct styles navigating first-client -> first",
        "css-order turbo should load correct styles navigating first-client -> second",
        "css-order turbo should load correct styles navigating first-client -> second-client",
        "css-order turbo should load correct styles navigating first-client -> third",
        "css-order turbo should load correct styles navigating global-first -> global-second",
        "css-order turbo should load correct styles navigating global-second -> global-first",
        "css-order turbo should load correct styles navigating interleaved-a -> interleaved-b",
        "css-order turbo should load correct styles navigating interleaved-b -> interleaved-a",
        "css-order turbo should load correct styles navigating pages-first -> pages-second",
        "css-order turbo should load correct styles navigating pages-first -> pages-third",
        "css-order turbo should load correct styles navigating pages-partial-reversed-a -> pages-partial-reversed-b",
        "css-order turbo should load correct styles navigating pages-partial-reversed-b -> pages-partial-reversed-a",
        "css-order turbo should load correct styles navigating pages-reversed-a -> pages-reversed-b",
        "css-order turbo should load correct styles navigating pages-reversed-b -> pages-reversed-a",
        "css-order turbo should load correct styles navigating pages-second -> pages-first",
        "css-order turbo should load correct styles navigating pages-second -> pages-third",
        "css-order turbo should load correct styles navigating pages-third -> pages-first",
        "css-order turbo should load correct styles navigating pages-third -> pages-second",
        "css-order turbo should load correct styles navigating partial-reversed-a -> partial-reversed-b",
        "css-order turbo should load correct styles navigating partial-reversed-b -> partial-reversed-a",
        "css-order turbo should load correct styles navigating reversed-a -> reversed-b",
        "css-order turbo should load correct styles navigating reversed-b -> reversed-a",
        "css-order turbo should load correct styles navigating second -> first",
        "css-order turbo should load correct styles navigating second -> first-client",
        "css-order turbo should load correct styles navigating second -> second-client",
        "css-order turbo should load correct styles navigating second -> third",
        "css-order turbo should load correct styles navigating second-client -> first",
        "css-order turbo should load correct styles navigating second-client -> first-client",
        "css-order turbo should load correct styles navigating second-client -> second",
        "css-order turbo should load correct styles navigating second-client -> third",
        "css-order turbo should load correct styles navigating third -> first",
        "css-order turbo should load correct styles navigating third -> first-client",
        "css-order turbo should load correct styles navigating third -> second",
        "css-order turbo should load correct styles navigating third -> second-client",
        "css-order turbo should load correct styles on big-interleaved-a",
        "css-order turbo should load correct styles on big-interleaved-b",
        "css-order turbo should load correct styles on first",
        "css-order turbo should load correct styles on first-client",
        "css-order turbo should load correct styles on global-first",
        "css-order turbo should load correct styles on global-second",
        "css-order turbo should load correct styles on interleaved-a",
        "css-order turbo should load correct styles on interleaved-b",
        "css-order turbo should load correct styles on pages-first",
        "css-order turbo should load correct styles on pages-interleaved-a",
        "css-order turbo should load correct styles on pages-interleaved-b",
        "css-order turbo should load correct styles on pages-partial-reversed-a",
        "css-order turbo should load correct styles on pages-partial-reversed-b",
        "css-order turbo should load correct styles on pages-reversed-a",
        "css-order turbo should load correct styles on pages-reversed-b",
        "css-order turbo should load correct styles on pages-second",
        "css-order turbo should load correct styles on pages-third",
        "css-order turbo should load correct styles on partial-reversed-a",
        "css-order turbo should load correct styles on partial-reversed-b",
        "css-order turbo should load correct styles on reversed-a",
        "css-order turbo should load correct styles on reversed-b",
        "css-order turbo should load correct styles on second",
        "css-order turbo should load correct styles on second-client",
        "css-order turbo should load correct styles on third"
      ],
      "failed": [
        "css-order turbo should load correct styles navigating back again first -> first-client -> first -> first-client",
        "css-order turbo should load correct styles navigating back again first -> second -> first -> second",
        "css-order turbo should load correct styles navigating back again first -> second-client -> first -> second-client",
        "css-order turbo should load correct styles navigating back again first -> third -> first -> third",
        "css-order turbo should load correct styles navigating back again first-client -> first -> first-client -> first",
        "css-order turbo should load correct styles navigating back again first-client -> second -> first-client -> second",
        "css-order turbo should load correct styles navigating back again first-client -> second-client -> first-client -> second-client",
        "css-order turbo should load correct styles navigating back again first-client -> third -> first-client -> third",
        "css-order turbo should load correct styles navigating back again interleaved-b -> interleaved-a -> interleaved-b -> interleaved-a",
        "css-order turbo should load correct styles navigating back again second -> first -> second -> first",
        "css-order turbo should load correct styles navigating back again second -> first-client -> second -> first-client",
        "css-order turbo should load correct styles navigating back again second -> second-client -> second -> second-client",
        "css-order turbo should load correct styles navigating back again second -> third -> second -> third",
        "css-order turbo should load correct styles navigating back again second-client -> first -> second-client -> first",
        "css-order turbo should load correct styles navigating back again second-client -> first-client -> second-client -> first-client",
        "css-order turbo should load correct styles navigating back again second-client -> second -> second-client -> second",
        "css-order turbo should load correct styles navigating back again second-client -> third -> second-client -> third",
        "css-order turbo should load correct styles navigating back again third -> first -> third -> first",
        "css-order turbo should load correct styles navigating back again third -> first-client -> third -> first-client",
        "css-order turbo should load correct styles navigating back again third -> second -> third -> second",
        "css-order turbo should load correct styles navigating back again third -> second-client -> third -> second-client"
      ],
      "pending": [
        "css-order turbo should load correct styles navigating back again big-interleaved-a -> big-interleaved-b -> big-interleaved-a -> big-interleaved-b",
        "css-order turbo should load correct styles navigating back again big-interleaved-b -> big-interleaved-a -> big-interleaved-b -> big-interleaved-a",
        "css-order turbo should load correct styles navigating pages-interleaved-a -> pages-interleaved-b",
        "css-order turbo should load correct styles navigating pages-interleaved-b -> pages-interleaved-a"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dedupe-rsc-error-log/dedupe-rsc-error-log.test.ts": {
      "passed": [
        "dedupe-rsc-error-log should only log RSC error once for edge runtime",
        "dedupe-rsc-error-log should only log RSC error once for nodejs runtime",
        "dedupe-rsc-error-log should only log SSR error once for edge runtime",
        "dedupe-rsc-error-log should only log SSR error once for nodejs runtime"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/draft-mode/draft-mode.test.ts": {
      "passed": [
        "app dir - draft mode in edge runtime should be disabled from api route handler",
        "app dir - draft mode in edge runtime should be enabled from api route handler when draft mode enabled",
        "app dir - draft mode in edge runtime should genenerate rand when draft mode enabled",
        "app dir - draft mode in edge runtime should have set-cookie header on enable",
        "app dir - draft mode in edge runtime should have set-cookie header with redirect location",
        "app dir - draft mode in edge runtime should not perform full page navigation on router.refresh()",
        "app dir - draft mode in edge runtime should not read other cookies when draft mode disabled during next start",
        "app dir - draft mode in edge runtime should read other cookies when draft mode enabled",
        "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/index",
        "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/with-cookies",
        "app dir - draft mode in nodejs runtime should be disabled from api route handler",
        "app dir - draft mode in nodejs runtime should be enabled from api route handler when draft mode enabled",
        "app dir - draft mode in nodejs runtime should genenerate rand when draft mode enabled",
        "app dir - draft mode in nodejs runtime should have set-cookie header on enable",
        "app dir - draft mode in nodejs runtime should have set-cookie header with redirect location",
        "app dir - draft mode in nodejs runtime should not generate rand when draft mode disabled during next start",
        "app dir - draft mode in nodejs runtime should not perform full page navigation on router.refresh()",
        "app dir - draft mode in nodejs runtime should not read other cookies when draft mode disabled during next start",
        "app dir - draft mode in nodejs runtime should read other cookies when draft mode enabled",
        "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /index",
        "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /with-cookies"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-css/index.test.ts": {
      "passed": [
        "app dir - dynamic css should not throw with accessing to ALS in preload css",
        "app dir - dynamic css should only apply corresponding css for page loaded in edge runtime",
        "app dir - dynamic css should only apply corresponding css for page loaded that /another",
        "app dir - dynamic css should only apply corresponding css for page loaded that /ssr",
        "app dir - dynamic css should preload all chunks of dynamic component during SSR"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-data/dynamic-data.test.ts": {
      "passed": [
        "dynamic-data inside cache scope error when the build when accessing dynamic data inside a cache scope",
        "dynamic-data should render empty objects for dynamic APIs when rendering with force-static",
        "dynamic-data should render the dynamic apis dynamically when used in a top-level scope",
        "dynamic-data should render the dynamic apis dynamically when used in a top-level scope with force dynamic",
        "dynamic-data should track dynamic apis when rendering app routes",
        "dynamic-data should track searchParams access as dynamic when the Page is a client component",
        "dynamic-data with dynamic = \"error\" error when the build when `dynamic = \"error\"` and dynamic data is read"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-href/dynamic-href.test.ts": {
      "passed": [
        "dynamic-href should not error on /object in prod",
        "dynamic-href should not error on /string in prod"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-in-generate-params/index.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - dynamic in generate params should be able to call fetch while generating multiple dynamic pages",
        "app-dir - dynamic in generate params should be able to call while generating multiple dynamic sitemaps",
        "app-dir - dynamic in generate params should render sitemap with generateSitemaps in force-dynamic config dynamically"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-interception-route-revalidate/dynamic-interception-route-revalidate.test.ts": {
      "passed": [
        "dynamic-interception-route-revalidate should refresh the dynamic intercepted route when the interception route is revalidated"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-requests/dynamic-requests.test.ts": {
      "passed": [
        "dynamic-requests should not error for dynamic requests in pages",
        "dynamic-requests should not error for dynamic requests in routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic/dynamic.test.ts": {
      "passed": [
        "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components",
        "app dir - next/dynamic no SSR should support dynamic import with accessing named exports from client component",
        "app dir - next/dynamic should generate correct client manifest for dynamic chunks",
        "app dir - next/dynamic should handle next/dynamic in SSR correctly",
        "app dir - next/dynamic should handle next/dynamic in hydration correctly",
        "app dir - next/dynamic should handle ssr: false in pages when appDir is enabled",
        "app dir - next/dynamic should not render loading by default",
        "app dir - next/dynamic should render loading by default if loading is specified and loader is slow"
      ],
      "failed": [
        "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components in edge runtime"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ecmascript-features/turbopack/ecmascript-features-turbopack.test.ts": {
      "passed": [
        "ecmascript-features turbopack should work using browser",
        "ecmascript-features turbopack should work using cheerio"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ecmascript-features/webpack/ecmascript-features-webpack.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "ecmascript-features webpack should work using browser",
        "ecmascript-features webpack should work using cheerio"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-route-catchall/edge-route-catchall.test.ts": {
      "passed": [
        "edge-route-catchall should correctly normalize edge route catch-all with a single param",
        "edge-route-catchall should correctly normalize edge route catch-all with multiple params"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-route-rewrite/edge-route-rewrite.test.ts": {
      "passed": [
        "edge-route-rewrite it should support a rewrite to a dynamic edge route",
        "edge-route-rewrite it should support a rewrite to an edge route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-runtime-node-compatibility/edge-runtime-node-compatibility.test.ts": {
      "passed": [
        "edge runtime node compatibility [app] supports node:buffer",
        "edge runtime node compatibility [pages/api] supports node:buffer"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/emotion-js/index.test.ts": {
      "passed": [
        "app dir - emotion-js should render emotion-js css with compiler.emotion option correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/error-boundary-navigation/index.test.ts": {
      "passed": [
        "app dir - not found navigation should allow navigating to a non-existent page",
        "app dir - not found navigation should allow navigating to a page calling notfound",
        "app dir - not found navigation should allow navigation back to route that was initially not-found",
        "app dir - not found navigation should allow navigation on error",
        "app dir - not found navigation should allow navigation on not-found",
        "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation should be able to navigate to other page from root not-found page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/error-boundary-navigation/override-node-env.test.ts": {
      "passed": [
        "app dir - not found navigation - with overridden node env should allow navigating to a non-existent page",
        "app dir - not found navigation - with overridden node env should allow navigating to a page calling notfound",
        "app dir - not found navigation - with overridden node env should allow navigation back to route that was initially not-found",
        "app dir - not found navigation - with overridden node env should allow navigation on error",
        "app dir - not found navigation - with overridden node env should allow navigation on not-found",
        "app dir - not found navigation - with overridden node env should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation - with overridden node env should be able to navigate to other page from root not-found page",
        "app dir - not found navigation should allow navigating to a non-existent page",
        "app dir - not found navigation should allow navigating to a page calling notfound",
        "app dir - not found navigation should allow navigation back to route that was initially not-found",
        "app dir - not found navigation should allow navigation on error",
        "app dir - not found navigation should allow navigation on not-found",
        "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation should be able to navigate to other page from root not-found page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/errors/index.test.ts": {
      "passed": [
        "app-dir - errors error component should allow resetting error boundary",
        "app-dir - errors error component should display error digest for error in server component with default error boundary",
        "app-dir - errors error component should hydrate empty shell to handle server-side rendering errors",
        "app-dir - errors error component should log the original RSC error trace in production",
        "app-dir - errors error component should log the original Server Actions error trace in production",
        "app-dir - errors error component should trigger error component when an error happens during rendering",
        "app-dir - errors error component should trigger error component when an error happens during server components rendering",
        "app-dir - errors error component should use default error boundary for prod and overlay for dev when no error component specified"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/fallback-prefetch/fallback-prefetch.test.ts": {
      "passed": ["fallback-prefetch should prefetch the page without errors"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/front-redirect-issue/front-redirect-issue.test.ts": {
      "passed": ["app dir - front redirect issue should redirect"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/basic/index.test.ts": {
      "passed": [
        "app dir - global error should catch metadata error in error boundary if presented"
      ],
      "failed": [
        "app dir - global error should catch metadata error in global-error if no error boundary is presented",
        "app dir - global error should catch the client error thrown in the nested routes",
        "app dir - global error should render global error for error in client components",
        "app dir - global error should render global error for error in server components",
        "app dir - global error should trigger error component when an error happens during rendering"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/catch-all/index.test.ts": {
      "passed": [
        "app dir - global error - with catch-all route should render 404 page correctly",
        "app dir - global error - with catch-all route should render catch-all route correctly"
      ],
      "failed": [
        "app dir - global error - with catch-all route should render global error correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/layout-error/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - global error - layout error should render global error for error in server components"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/headers-static-bailout/headers-static-bailout.test.ts": {
      "passed": [
        "headers-static-bailout it provides a helpful link in case static generation bailout is uncaught",
        "headers-static-bailout should bailout when using an import from next/headers",
        "headers-static-bailout should not bailout when not using headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/hello-world/hello-world.test.ts": {
      "passed": [
        "hello-world should work using browser",
        "hello-world should work using cheerio",
        "hello-world should work with fetch",
        "hello-world should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/hooks/hooks.test.ts": {
      "passed": [
        "app dir - hooks useDraftMode should generate rand when draft mode enabled",
        "app dir - hooks useDraftMode should use initial rand when draft mode be disabled",
        "app dir - hooks usePathname should have the canonical url pathname on rewrite",
        "app dir - hooks usePathname should have the correct pathname",
        "app dir - hooks useRouter should allow access to the router",
        "app dir - hooks useSearchParams should have the canonical url search params on rewrite",
        "app dir - hooks useSearchParams should have the correct search params",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug1",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
        "app dir - hooks useSelectedLayoutSegment should return null in pages",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug1",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten-middleware",
        "app dir - hooks useSelectedLayoutSegments should return an empty array in pages"
      ],
      "failed": [
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1/account",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/2",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/static"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/i18n-hybrid/i18n-hybrid.test.js": {
      "passed": [
        "i18n-hybrid does not resolve /en-CA/blog/first-post",
        "i18n-hybrid does not resolve /en-US/blog/first-post",
        "i18n-hybrid does not resolve /fr-CA/blog/first-post",
        "i18n-hybrid does not resolve /fr-FR/blog/first-post",
        "i18n-hybrid does resolve /about",
        "i18n-hybrid does resolve /blog/first-post",
        "i18n-hybrid does resolve /en-CA/about",
        "i18n-hybrid does resolve /en-US/about",
        "i18n-hybrid does resolve /fr-CA/about",
        "i18n-hybrid does resolve /fr-FR/about"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/import/import.test.ts": {
      "passed": [
        "app dir - imports we can import all components from .js",
        "app dir - imports we can import all components from .jsx",
        "app dir - imports we can import all components from .ts",
        "app dir - imports we can import all components from .tsx"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-dynamic-segment-middleware/interception-dynamic-segment-middleware.test.ts": {
      "passed": [
        "interception-dynamic-segment-middleware should work when interception route is paired with a dynamic segment & middleware"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-dynamic-segment/interception-dynamic-segment.test.ts": {
      "passed": [
        "interception-dynamic-segment should work when interception route is paired with a dynamic segment"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-middleware-rewrite/interception-middleware-rewrite.test.ts": {
      "passed": [
        "interception-middleware-rewrite should continue to show the intercepted page when revisiting it",
        "interception-middleware-rewrite should continue to work after using browser back button and following another intercepting route",
        "interception-middleware-rewrite should support intercepting routes with a middleware rewrite"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-route-prefetch-cache/interception-route-prefetch-cache.test.ts": {
      "passed": [
        "interception-route-prefetch-cache runtime = nodejs should render the correct interception when two distinct layouts share the same path structure"
      ],
      "failed": [
        "interception-route-prefetch-cache runtime = edge should render the correct interception when two distinct layouts share the same path structure"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-routes-root-catchall/interception-routes-root-catchall.test.ts": {
      "passed": [
        "interception-routes-root-catchall should handle non-intercepted catch-all pages",
        "interception-routes-root-catchall should support having a root catch-all and a catch-all in a parallel route group"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interoperability-with-pages/navigation.test.ts": {
      "passed": [
        "navigation between pages and app dir It should be able to navigate app -> pages",
        "navigation between pages and app dir It should be able to navigate app -> pages and go back and forward",
        "navigation between pages and app dir It should be able to navigate pages -> app",
        "navigation between pages and app dir It should be able to navigate pages -> app and go back an forward"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/layout-params/layout-params.test.ts": {
      "passed": [
        "app dir - layout params basic params check layout renders just it's params",
        "app dir - layout params basic params check layout without params get no params",
        "app dir - layout params basic params check topmost layout renders all params",
        "app dir - layout params catchall params should give catchall params just to last layout",
        "app dir - layout params catchall params should give empty optional catchall params won't give params to any layout",
        "app dir - layout params catchall params should give optional catchall params just to last layout"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/loader-file-named-export-custom-loader-error/loader-file-named-export-custom-loader-error.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Error test if the loader file export a named function in Build and Start build and start only should show the build error",
        "Error test if the loader file export a named function in Development development only should show the error when using `Image` component",
        "Error test if the loader file export a named function in Development development only should show the error when using `getImageProps` method"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/logging/fetch-logging.test.ts": {
      "passed": [
        "app-dir - logging with default logging should not log fetch requests at all",
        "app-dir - logging with fetches default logging should only log requests in development mode",
        "app-dir - logging with fetches verbose logging should only log requests in development mode",
        "app-dir - logging with verbose logging for edge runtime should not log fetch requests at all"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/logging/fetch-warning.test.ts": {
      "passed": [
        "app-dir - fetch warnings should log when request input is a Request instance",
        "app-dir - fetch warnings should log when request input is a string",
        "app-dir - fetch warnings should not log when overriding cache within the Request object"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/mdx/mdx.test.ts": {
      "passed": [
        "mdx with-mdx-rs app directory should allow importing client components",
        "mdx with-mdx-rs app directory should allow overriding components",
        "mdx with-mdx-rs app directory should work in initial html",
        "mdx with-mdx-rs app directory should work in initial html with mdx import",
        "mdx with-mdx-rs app directory should work using browser",
        "mdx with-mdx-rs app directory should work using browser with mdx import",
        "mdx with-mdx-rs app directory should work with next/image",
        "mdx with-mdx-rs pages directory should allow overriding components",
        "mdx with-mdx-rs pages directory should work in initial html",
        "mdx with-mdx-rs pages directory should work in initial html with mdx import",
        "mdx with-mdx-rs pages directory should work using browser",
        "mdx with-mdx-rs pages directory should work using browser with mdx import"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-dynamic-routes/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - metadata dynamic routes icon image routes should render apple icon with dynamic routes",
        "app dir - metadata dynamic routes icon image routes should render icon with dynamic routes",
        "app dir - metadata dynamic routes robots.txt should handle robots.[ext] dynamic routes",
        "app dir - metadata dynamic routes route segment config should generate dynamic route if dynamic config is force-dynamic",
        "app dir - metadata dynamic routes should generate unique path for image routes under group routes",
        "app dir - metadata dynamic routes should include default og font files in file trace",
        "app dir - metadata dynamic routes should inject dynamic metadata properly to head",
        "app dir - metadata dynamic routes should pick configured metadataBase instead of deployment url for canonical url",
        "app dir - metadata dynamic routes should statically optimized single image route",
        "app dir - metadata dynamic routes should support edge runtime of image routes",
        "app dir - metadata dynamic routes should use localhost for local prod and fallback to deployment url when metadataBase is falsy",
        "app dir - metadata dynamic routes sitemap should generate static paths of dynamic sitemap in production",
        "app dir - metadata dynamic routes sitemap should handle sitemap.[ext] dynamic routes",
        "app dir - metadata dynamic routes sitemap should not throw if client components are imported but not used in sitemap",
        "app dir - metadata dynamic routes sitemap should optimize routes without multiple generation API as static routes",
        "app dir - metadata dynamic routes sitemap should support alternate.languages in sitemap",
        "app dir - metadata dynamic routes sitemap should support generate multi sitemaps with generateSitemaps",
        "app dir - metadata dynamic routes social image routes should fill params into dynamic routes url of metadata images",
        "app dir - metadata dynamic routes social image routes should fill params into routes groups url of static images",
        "app dir - metadata dynamic routes social image routes should handle custom fonts in both edge and nodejs runtime",
        "app dir - metadata dynamic routes social image routes should handle manifest.[ext] dynamic routes",
        "app dir - metadata dynamic routes social image routes should render og image with opengraph-image dynamic routes",
        "app dir - metadata dynamic routes social image routes should render og image with twitter-image dynamic routes",
        "app dir - metadata dynamic routes social image routes should support generate multi images with generateImageMetadata",
        "app dir - metadata dynamic routes social image routes should support params as argument in dynamic routes"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-edge/index.test.ts": {
      "passed": [
        "app dir - Metadata API on the Edge runtime should render OpenGraph image meta tag correctly"
      ],
      "failed": [
        "app dir - Metadata API on the Edge runtime OG image route should not bundle `ImageResponse` into the page worker"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-json-manifest/index.test.ts": {
      "passed": [
        "app-dir metadata-json-manifest should support metadata.json manifest"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-navigation/metadata-navigation.test.ts": {
      "passed": [
        "app dir - metadata navigation navigation should render root not-found with default metadata",
        "app dir - metadata navigation navigation should support notFound in generateMetadata",
        "app dir - metadata navigation navigation should support redirect in generateMetadata"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-suspense/index.test.ts": {
      "passed": [
        "app dir - metadata dynamic routes suspense should render metadata in head even root layout is wrapped with Suspense"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-thrown/metadata-thrown.test.ts": {
      "passed": [
        "app dir - metadata thrown should not crash from error thrown during preloading nested generateMetadata"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-warnings/index.test.ts": {
      "passed": [
        "app dir - metadata missing metadataBase should not warn for viewport properties during manually merging metadata",
        "app dir - metadata missing metadataBase should show warning in vercel deployment output in default build output mode",
        "app dir - metadata missing metadataBase should warn for unsupported metadata properties"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-warnings/standalone.test.ts": {
      "passed": [
        "app dir - metadata missing metadataBase should fallback to localhost if metadataBase is missing for absolute urls resolving",
        "app dir - metadata missing metadataBase should not warn for viewport properties during manually merging metadata",
        "app dir - metadata missing metadataBase should warn for unsupported metadata properties"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata/metadata.test.ts": {
      "passed": [
        "app dir - metadata basic should apply metadata when navigating client-side",
        "app dir - metadata basic should handle metadataBase for urls resolved as only URL type",
        "app dir - metadata basic should not contain query in canonical url after client navigation",
        "app dir - metadata basic should relative canonical url",
        "app dir - metadata basic should support alternate tags",
        "app dir - metadata basic should support appLinks tags",
        "app dir - metadata basic should support apple related tags `itunes` and `appWebApp`",
        "app dir - metadata basic should support generateMetadata dynamic props",
        "app dir - metadata basic should support other basic tags",
        "app dir - metadata basic should support other basic tags (edge)",
        "app dir - metadata basic should support robots tags",
        "app dir - metadata basic should support stashed title in one layer of page and layout",
        "app dir - metadata basic should support stashed title in two layers of page and layout",
        "app dir - metadata basic should support title and description",
        "app dir - metadata basic should support title template",
        "app dir - metadata basic should support verification tags",
        "app dir - metadata basic should use parent layout title when no title is defined in page",
        "app dir - metadata file based icons should not render if image file is not specified",
        "app dir - metadata file based icons should render icon and apple touch icon meta if their images are specified",
        "app dir - metadata icons should merge icons from layout if no static icons files are specified",
        "app dir - metadata icons should not hoist meta[itemProp] to head",
        "app dir - metadata icons should support basic complex descriptor icons field",
        "app dir - metadata icons should support basic object icons field",
        "app dir - metadata icons should support basic string icons field",
        "app dir - metadata icons should support root level of favicon.ico",
        "app dir - metadata opengraph should override file based images when opengraph-image and twitter-image specify images property",
        "app dir - metadata opengraph should pick up opengraph-image and twitter-image as static metadata files",
        "app dir - metadata opengraph should support opengraph tags",
        "app dir - metadata opengraph should support opengraph with article type",
        "app dir - metadata react cache should have same title and page value on initial load",
        "app dir - metadata react cache should have same title and page value when navigating",
        "app dir - metadata should not effect metadata images convention like files under pages directory",
        "app dir - metadata static optimization should build static files into static route",
        "app dir - metadata static routes should build favicon.ico as a custom route",
        "app dir - metadata static routes should have /favicon.ico as route",
        "app dir - metadata static routes should have icons as route",
        "app dir - metadata static routes should support root dir robots.txt",
        "app dir - metadata static routes should support sitemap.xml under every routes",
        "app dir - metadata static routes should support static manifest.webmanifest",
        "app dir - metadata twitter should render twitter card summary when image is not present",
        "app dir - metadata twitter should support default twitter app card",
        "app dir - metadata twitter should support default twitter player card",
        "app dir - metadata twitter should support twitter card summary_large_image when image present",
        "app dir - metadata viewport should support dynamic viewport export"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/missing-suspense-with-csr-bailout/missing-suspense-with-csr-bailout.test.ts": {
      "passed": [
        "missing-suspense-with-csr-bailout next/dynamic does not emit errors related to bailing out of client side rendering",
        "missing-suspense-with-csr-bailout useSearchParams should pass build if useSearchParams is wrapped in a suspense boundary"
      ],
      "failed": [
        "missing-suspense-with-csr-bailout useSearchParams should fail build if useSearchParams is not wrapped in a suspense boundary"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/mjs-as-extension/mjs-as-extension.test.ts": {
      "passed": ["mjs as extension should render the page correctly"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/dynamic-route-module/dynamic-route-module.test.ts": {
      "passed": [
        "Dynamic Route CSS Module Usage ({\"sass\": \"1.54.0\"}) should apply styles correctly",
        "Dynamic Route CSS Module Usage ({\"sass-embedded\": \"1.75.0\"}) should apply styles correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/external-url/external-url.test.ts": {
      "passed": [
        "SCSS Support loader handling External imports ({\"sass\": \"1.54.0\"}) should include font on the page",
        "SCSS Support loader handling External imports ({\"sass-embedded\": \"1.75.0\"}) should include font on the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/hmr-module/hmr-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Can hot reload CSS Module without losing state ({\"sass\": \"1.54.0\"}) development only should update CSS color without remounting <input>",
        "Can hot reload CSS Module without losing state ({\"sass-embedded\": \"1.75.0\"}) development only should update CSS color without remounting <input>"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global-module/invalid-global-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Invalid CSS Global Module Usage in node_modules production only should fail to build"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global-with-app/invalid-global-with-app.test.ts": {
      "passed": [],
      "failed": [
        "Invalid Global CSS with Custom App production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global/invalid-global.test.ts": {
      "passed": [],
      "failed": ["Invalid Global CSS production only should fail to build"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-module-document/invalid-module-document.test.ts": {
      "passed": [],
      "failed": [
        "Invalid SCSS in _document production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-module/invalid-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Invalid CSS Module Usage in node_modules production only should fail to build"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/loader-order/loader-order.test.ts": {
      "passed": [
        "SCSS Support loader handling Preprocessor loader order ({\"sass\": \"1.54.0\"}) should render the module",
        "SCSS Support loader handling Preprocessor loader order ({\"sass-embedded\": \"1.75.0\"}) should render the module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-global-reversed/multi-global-reversed.test.ts": {
      "passed": [
        "(SCSS) Multi Global Support (reversed) ({\"sass\": \"1.54.0\"}) should render the page",
        "(SCSS) Multi Global Support (reversed) ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-global/multi-global.test.ts": {
      "passed": [
        "Multi Global Support ({\"sass\": \"1.54.0\"}) should render the page",
        "Multi Global Support ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-page/multi-page.test.ts": {
      "passed": [
        "SCSS Support ({\"sass\": \"1.54.0\"}) Has CSS in computed styles in Development should have CSS for page",
        "SCSS Support ({\"sass\": \"1.54.0\"}) Has CSS in computed styles in Production should have CSS for page",
        "SCSS Support ({\"sass-embedded\": \"1.75.0\"}) Has CSS in computed styles in Development should have CSS for page",
        "SCSS Support ({\"sass-embedded\": \"1.75.0\"}) Has CSS in computed styles in Production should have CSS for page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nested-global/nested-global.test.ts": {
      "passed": [
        "Nested @import() Global Support ({\"sass\": \"1.54.0\"}) should render the page",
        "Nested @import() Global Support ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nm-module-nested/nm-module-nested.test.ts": {
      "passed": [
        "Valid Nested CSS Module Usage from within node_modules ({\"sass\": \"1.54.0\"}) should render the page",
        "Valid Nested CSS Module Usage from within node_modules ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nm-module/nm-module.test.ts": {
      "passed": [
        "Valid CSS Module Usage from within node_modules ({\"sass\": \"1.54.0\"}) should render the page",
        "Valid CSS Module Usage from within node_modules ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-bad/npm-import-bad.test.ts": {
      "passed": [
        "CSS Import from node_modules production only should fail the build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-nested/npm-import-nested.test.ts": {
      "passed": [
        "Good Nested CSS Import from node_modules ({\"sass\": \"1.54.0\"}) should render the page",
        "Good Nested CSS Import from node_modules ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-tilde/npm-import-tilde.test.ts": {
      "passed": [
        "Good CSS Import from node_modules with tilde ({\"sass\": \"1.54.0\"}) should render the page",
        "Good CSS Import from node_modules with tilde ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import/npm-import.test.ts": {
      "passed": [
        "Good CSS Import from node_modules ({\"sass\": \"1.54.0\"}) should render the page",
        "Good CSS Import from node_modules ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/prod-module/prod-module.test.ts": {
      "passed": [
        "Has CSS Module in computed styles in Production ({\"sass\": \"1.54.0\"}) should render the page",
        "Has CSS Module in computed styles in Production ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/scss-mixins/scss-mixins.test.ts": {
      "passed": ["Scss Mixins should work using browser"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/single-global-src/single-global-src.test.ts": {
      "passed": [
        "Basic Global Support with src/ dir ({\"sass\": \"1.54.0\"}) should render the page",
        "Basic Global Support with src/ dir ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/single-global/single-global.test.ts": {
      "passed": [
        "Basic Global Support scss ({\"sass\": \"1.54.0\"}) should render the page",
        "Basic Global Support scss ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/unused/unused.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "unused scss Body is not hidden when broken in Development development only should have body visible",
        "unused scss Body is not hidden when unused in Development ($dependencies) development only should have body visible"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-asset-prefix-1/url-global-asset-prefix-1.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (1) ({\"sass\": \"1.54.0\"}) should render the page",
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (1) ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-asset-prefix-2/url-global-asset-prefix-2.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (2) ({\"sass\": \"1.54.0\"}) should render the page",
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (2) ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-partial/url-global-partial.test.ts": {
      "passed": [
        "SCSS Support loader handling CSS URL via file-loader sass partial ({\"sass\": \"1.54.0\"}) should render the page",
        "SCSS Support loader handling CSS URL via file-loader sass partial ({\"sass-embedded\": \"1.75.0\"}) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global/url-global.test.ts": {
      "passed": [
        "SCSS Support loader handling ({\"sass\": \"1.54.0\"}) CSS URL via `file-loader` should render the page",
        "SCSS Support loader handling ({\"sass-embedded\": \"1.75.0\"}) CSS URL via `file-loader` should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/valid-and-invalid-global/valid-and-invalid-global.test.ts": {
      "passed": [],
      "failed": [
        "Valid and Invalid Global CSS with Custom App production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/webpack-error/webpack-error.test.ts": {
      "passed": [],
      "failed": [
        "SCSS Support production only Friendly Webpack Error should be a friendly error successfully"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/with-styled-jsx/with-styled-jsx.test.ts": {
      "passed": [
        "Ordering with styled-jsx ({\"sass\": \"1.54.0\"}) should have the correct color (css ordering)",
        "Ordering with styled-jsx ({\"sass-embedded\": \"1.75.0\"}) should have the correct color (css ordering)"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/search-params-react-key/layout-params.test.ts": {
      "passed": [
        "app dir - search params keys should keep the React router instance the same when changing the search params"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/searchparams-static-bailout/searchparams-static-bailout.test.ts": {
      "passed": [
        "searchparams-static-bailout client component should bailout when using searchParams",
        "searchparams-static-bailout client component should bailout when using searchParams is passed to client component",
        "searchparams-static-bailout client component should not bailout when not using searchParams",
        "searchparams-static-bailout server component should bailout when using searchParams",
        "searchparams-static-bailout server component should not bailout when not using searchParams"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/server-actions-redirect-middleware-rewrite/server-actions-redirect-middleware-rewrite.test.ts": {
      "passed": [
        "app-dir - server-actions-redirect-middleware-rewrite.test should redirect correctly in edge runtime with middleware rewrite",
        "app-dir - server-actions-redirect-middleware-rewrite.test should redirect correctly in nodejs runtime with middleware rewrite"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/server-actions-relative-redirect/server-actions-relative-redirect.test.ts": {
      "passed": [
        "server-actions-relative-redirect should work with absolute redirect",
        "server-actions-relative-redirect should work with relative redirect"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/server-components-externals/index.test.ts": {
      "passed": [
        "app-dir - server components externals should have externals for those in config.serverExternalPackages",
        "app-dir - server components externals uses externals for predefined list in server-external-packages.json"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/set-cookies/set-cookies.test.ts": {
      "passed": [
        "set-cookies for edge runtime for /app should set two set-cookie headers",
        "set-cookies for edge runtime for /pages should set two set-cookie headers",
        "set-cookies for experimental-edge runtime for /app should set two set-cookie headers",
        "set-cookies for experimental-edge runtime for /pages should set two set-cookie headers",
        "set-cookies for node runtime for /app should set two set-cookie headers",
        "set-cookies for node runtime for /pages should set two set-cookie headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/shallow-routing/shallow-routing.test.ts": {
      "passed": [
        "shallow-routing back and forward client-side navigation should support setting a different pathname reflected on usePathname and then still support navigating back and forward",
        "shallow-routing back and forward mpa navigation should support hash navigations while continuing to work for pushState/replaceState APIs",
        "shallow-routing back and forward mpa navigation should support setting data and then still support navigating back and forward",
        "shallow-routing pushState should support setting a different pathname reflected on usePathname",
        "shallow-routing pushState should support setting a different searchParam reflected on useSearchParams",
        "shallow-routing pushState should support setting a different url using a string",
        "shallow-routing pushState should support setting data",
        "shallow-routing pushState should work when given a null state value",
        "shallow-routing replaceState should support setting a different pathname reflected on usePathname",
        "shallow-routing replaceState should support setting a different searchParam reflected on useSearchParams",
        "shallow-routing replaceState should support setting a different url using a string",
        "shallow-routing replaceState should support setting data",
        "shallow-routing replaceState should work when given a null state value",
        "shallow-routing replaceState should work when given an undefined state value",
        "shallow-routing should work when given an undefined state value"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/similar-pages-paths/similar-pages-paths.test.ts": {
      "passed": [
        "app-dir similar pages paths should not have conflicts for similar pattern page paths between app and pages"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/static-generation-status/index.test.ts": {
      "passed": [
        "app-dir static-generation-status should render the non existed route redirect with status 404",
        "app-dir static-generation-status should render the page using notFound with status 404",
        "app-dir static-generation-status should render the page using redirect with status 307"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/static-shell-debugging/static-shell-debugging.test.ts": {
      "passed": [
        "static-shell-debugging ppr = false, debugging = false should render the full page",
        "static-shell-debugging ppr = false, debugging = true should render the full page",
        "static-shell-debugging ppr = true, debugging = false should render the full page",
        "static-shell-debugging ppr = true, debugging = true should only render the static shell"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/syntax-highlighter-crash/syntax-highlighter-crash.test.ts": {
      "passed": ["syntax-highlighter-crash should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/tailwind-css/tailwind-css.test.ts": {
      "passed": ["tailwind-css works when importing tailwind/tailwind.css"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/taint/process-taint.test.ts": {
      "passed": [
        "app dir - taint should error when passing process env to client component"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/test-template/{{ toFileName name }}/{{ toFileName name }}.test.ts": {
      "passed": [
        "{{name}} should work using browser",
        "{{name}} should work using cheerio",
        "{{name}} should work with fetch",
        "{{name}} should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/third-parties/basic.test.ts": {
      "passed": [
        "@next/third-parties basic usage renders GA",
        "@next/third-parties basic usage renders GTM",
        "@next/third-parties basic usage renders GoogleMapsEmbed",
        "@next/third-parties basic usage renders YoutubeEmbed"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/trailingslash/trailingslash.test.ts": {
      "passed": [
        "app-dir trailingSlash handling should contain trailing slash to canonical url",
        "app-dir trailingSlash handling should not add trailing slash to external url or relative url with query",
        "app-dir trailingSlash handling should redirect route when clicking link",
        "app-dir trailingSlash handling should redirect route when requesting it directly",
        "app-dir trailingSlash handling should redirect route when requesting it directly by browser",
        "app-dir trailingSlash handling should render link with trailing slash"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/turbopack-reports/turbopack-reports.test.ts": {
      "passed": ["turbopack-reports should render page importing sqlite3"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/typeof-window/typeof-window.test.ts": {
      "passed": ["typeof-window should work using cheerio"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/underscore-ignore-app-paths/underscore-ignore-app-paths.test.ts": {
      "passed": [],
      "failed": [
        "underscore-ignore-app-paths should not serve app path with underscore",
        "underscore-ignore-app-paths should serve app path with %5F",
        "underscore-ignore-app-paths should serve pages path with underscore"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/unstable-rethrow/unstable-rethrow.test.ts": {
      "passed": [
        "unstable-rethrow should correctly mark the dynamic page as dynamic",
        "unstable-rethrow should correctly trigger the not found page as not found",
        "unstable-rethrow should handle an internal error that gets propagated to the `cause` field",
        "unstable-rethrow should not log any errors at build time"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/use-params/use-params.test.ts": {
      "passed": [
        "use-params should work for catch all params",
        "use-params should work for nested dynamic params",
        "use-params should work for nested dynamic params client navigating",
        "use-params should work for single dynamic param",
        "use-params should work for single dynamic param client navigating",
        "use-params shouldn't rerender host component when prefetching"
      ],
      "failed": ["use-params should work on pages router"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/use-selected-layout-segment-s/use-selected-layout-segment-s.test.ts": {
      "passed": [
        "useSelectedLayoutSegment(s) should correctly update when changing catchall segment",
        "useSelectedLayoutSegment(s) should correctly update when changing param segment",
        "useSelectedLayoutSegment(s) should correctly update when changing static segment",
        "useSelectedLayoutSegment(s) should return correct values for root layout",
        "useSelectedLayoutSegment(s) should return correct values in layout after last segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before catchall segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before param segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before static segment"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/webpack-loader-conditions/webpack-loader-conditions.test.ts": {
      "passed": [
        "webpack-loader-conditions should render correctly on client side",
        "webpack-loader-conditions should render correctly on server site"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/with-babel/with-babel.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "with babel with babel should contain og package files in middleware",
        "with babel with babel should support babel in app dir"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/with-exported-function-config/with-exported-function-config.test.ts": {
      "passed": [
        "with-exported-function-config should have correct values in function config manifest"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/x-forwarded-headers/x-forwarded-headers.test.ts": {
      "passed": [
        "x-forwarded-headers already assigned should not override existing x-forwarded-* headers",
        "x-forwarded-headers already assigned should work with multiple x-forwarded-* headers",
        "x-forwarded-headers host header exists should include x-forwarded-* headers relative to host",
        "x-forwarded-headers should include x-forwarded-* headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/async-modules-app/index.test.ts": {
      "passed": ["Async modules app router server component async module"],
      "failed": [],
      "pending": ["Async modules app router client component async module"],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/async-modules/index.test.ts": {
      "passed": [
        "Async modules can render async 404 pages",
        "Async modules can render async error page",
        "Async modules csr async page modules",
        "Async modules ssr async page modules",
        "Async modules works on async api routes",
        "Async modules works with getServerSideProps",
        "Async modules works with getStaticProps"
      ],
      "failed": [],
      "pending": ["Async modules can render async AMP pages"],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/basepath-trailing-slash.test.ts": {
      "passed": [
        "basePath + trailingSlash should allow URL query strings on index without refresh"
      ],
      "failed": [
        "basePath + trailingSlash should allow URL query strings without refresh",
        "basePath + trailingSlash should correctly replace state when same asPath but different url"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/basepath.test.ts": {
      "passed": [
        "basePath should 404 for public file without basePath",
        "basePath should 404 when manually adding basePath with <Link>",
        "basePath should 404 when manually adding basePath with router.push",
        "basePath should 404 when manually adding basePath with router.replace",
        "basePath should add basePath to routes-manifest",
        "basePath should add header with basePath by default",
        "basePath should add header without basePath when set to false",
        "basePath should allow URL query strings on index without refresh",
        "basePath should handle 404 urls that start with basePath",
        "basePath should handle query/hash correctly during query updating ## $search",
        "basePath should handle query/hash correctly during query updating ##? $search",
        "basePath should handle query/hash correctly during query updating ##hello $search",
        "basePath should handle query/hash correctly during query updating ##hello? $search",
        "basePath should handle query/hash correctly during query updating #? $search",
        "basePath should handle query/hash correctly during query updating #hello? $search",
        "basePath should handle query/hash correctly during query updating #hello?world $search",
        "basePath should have basePath field on Router",
        "basePath should have correct href for a link",
        "basePath should have correct href for a link to /",
        "basePath should have correct router paths on first load of /",
        "basePath should navigate an absolute local url without basePath",
        "basePath should navigate an absolute url",
        "basePath should navigate to external site and back",
        "basePath should not add header with basePath when set to false",
        "basePath should not add header without basePath without disabling",
        "basePath should not redirect with basePath when set to false",
        "basePath should not redirect without basePath without disabling",
        "basePath should not rewrite with basePath when set to false",
        "basePath should not rewrite without basePath without disabling",
        "basePath should not update URL for a 404",
        "basePath should redirect trailing slash correctly",
        "basePath should redirect trailing slash on root correctly",
        "basePath should redirect with basePath by default",
        "basePath should redirect without basePath when set to false",
        "basePath should respect basePath in amphtml link rel",
        "basePath should rewrite with basePath by default",
        "basePath should rewrite without basePath when set to false",
        "basePath should serve public file with basePath correctly",
        "basePath should show 404 for page not under the /docs prefix",
        "basePath should show the hello page under the /docs prefix",
        "basePath should show the other-page page under the /docs prefix",
        "basePath should use urls with basepath in router events for hash changes",
        "basePath should work with hash links",
        "basePath should work with nested folder with same name as basePath"
      ],
      "failed": [
        "basePath should allow URL query strings without refresh",
        "basePath should correctly replace state when same asPath but different url",
        "basePath should fetch data for getServerSideProps without reloading",
        "basePath should fetch data for getStaticProps without reloading",
        "basePath should handle query/hash correctly during query updating #a ?hello",
        "basePath should handle query/hash correctly during query updating #a ?hello=",
        "basePath should handle query/hash correctly during query updating #a ?hello=world",
        "basePath should have correct router paths on first load of /hello",
        "basePath should navigate an absolute local url with basePath",
        "basePath should navigate back correctly to a dynamic route",
        "basePath should navigate to /404 correctly client-side",
        "basePath should navigate to /_error correctly client-side",
        "basePath should navigate to index page with getStaticProps",
        "basePath should navigate to the page without refresh",
        "basePath should prefetch pages correctly in viewport with <Link>",
        "basePath should prefetch pages correctly when manually called",
        "basePath should update dynamic params after mount correctly",
        "basePath should use urls with basepath in router events",
        "basePath should use urls with basepath in router events for cancelled routes",
        "basePath should use urls with basepath in router events for failed route change",
        "basePath should work with catch-all page",
        "basePath should work with normal dynamic page"
      ],
      "pending": [
        "basePath should navigate back to a non-basepath 404 that starts with basepath",
        "basePath should navigate to nested index page with getStaticProps"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist-extends/index.test.ts": {
      "passed": ["browserslist-extends should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist/browserslist.test.ts": {
      "passed": [],
      "failed": [],
      "pending": ["Browserslist should apply browserslist target"],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist/default-target.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "default browserslist target should apply default browserslist target"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/cancel-request/stream-cancel.test.ts": {
      "passed": [
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stalled stream",
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stream making progress",
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stalled stream",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stream making progress",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect middleware cancels stalled stream",
        "streaming responses cancel inner stream after disconnect middleware cancels stream making progress",
        "streaming responses cancel inner stream after disconnect middleware cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stalled stream",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stream making progress",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect node pages api cancels stalled stream",
        "streaming responses cancel inner stream after disconnect node pages api cancels stream making progress",
        "streaming responses cancel inner stream after disconnect node pages api cancels stream that never sent data"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/children-page/index.test.ts": {
      "passed": [
        "children-page with app dir should show the content if you have a page named children",
        "children-page with pages dir should show the content if you have a page named children"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-promise-export/async-function.test.ts": {
      "passed": ["async export should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-promise-export/promise.test.ts": {
      "passed": ["promise export should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-schema-check/index.test.ts": {
      "passed": [
        "next.config.js schema validating - defaultConfig should validate against defaultConfig",
        "next.config.js schema validating - invalid config should warn the invalid next config"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/conflicting-app-page-error/index.test.ts": {
      "passed": [
        "Conflict between app file and pages file should print error for conflicting app/page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/custom-app-render/custom-app-render.test.ts": {
      "passed": [
        "custom-app-render should render /",
        "custom-app-render should render /render"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/disable-js-preload/test/index.test.js": {
      "passed": [
        "disabled JS preloads should not have JS preload links",
        "disabled JS preloads should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/dynamic-route-interpolation/index.test.ts": {
      "passed": [
        "Dynamic Route Interpolation should work",
        "Dynamic Route Interpolation should work with brackets",
        "Dynamic Route Interpolation should work with brackets in API routes",
        "Dynamic Route Interpolation should work with parameter itself",
        "Dynamic Route Interpolation should work with parameter itself in API routes"
      ],
      "failed": [
        "Dynamic Route Interpolation should bust data cache",
        "Dynamic Route Interpolation should bust data cache with symbol",
        "Dynamic Route Interpolation should support both encoded and decoded nextjs reserved path convention characters in path"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-api-endpoints-can-receive-body/index.test.ts": {
      "passed": [
        "Edge API endpoints can receive body reads the body as text",
        "Edge API endpoints can receive body reads the body from index"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-async-local-storage/index.test.ts": {
      "passed": [
        "edge api can use async local storage cans use a single instance per request",
        "edge api can use async local storage cans use multiple instances per request"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-can-read-request-body/index.test.ts": {
      "passed": [
        "Edge can read request body middleware reads a JSON body",
        "Edge can read request body middleware reads a multipart form data",
        "Edge can read request body middleware reads a text body",
        "Edge can read request body middleware reads an URL encoded form data",
        "Edge can read request body renders the static page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-can-use-wasm-files/index.test.ts": {
      "passed": [
        "edge api endpoints can use wasm files uses the wasm file",
        "middleware can use wasm files can be called twice",
        "middleware can use wasm files lists the necessary wasm bindings in the manifest",
        "middleware can use wasm files uses the wasm file",
        "middleware can use wasm files with the experimental modes on uses the wasm file"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-compiler-can-import-blob-assets/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Edge Compiler can import asset assets allows to assets from node_modules",
        "Edge Compiler can import asset assets allows to fetch a remote URL",
        "Edge Compiler can import asset assets allows to fetch a remote URL with a path and basename",
        "Edge Compiler can import asset assets allows to fetch image assets",
        "Edge Compiler can import asset assets allows to fetch text assets",
        "Edge Compiler can import asset assets extracts all the assets from the bundle"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/404-page-app/test/index.test.js": {
      "passed": [
        "404 Page Support with _app production mode should build successfully",
        "404 Page Support with _app production mode should not output static 404 if _app has getInitialProps",
        "404 Page Support with _app production mode should still use 404 page",
        "404 Page Support with _app production mode specify to use the 404 page still in the routes-manifest"
      ],
      "failed": [],
      "pending": [
        "404 Page Support with _app development mode should not show pages/404 GIP error if _app has GIP"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/404-page-custom-error/test/index.test.js": {
      "passed": [
        "Default 404 Page with custom _error production mode should build successfully",
        "Default 404 Page with custom _error production mode should have output 404.html",
        "Default 404 Page with custom _error production mode should render error correctly",
        "Default 404 Page with custom _error production mode should render index page normal",
        "Default 404 Page with custom _error production mode should respond to 404 correctly",
        "Default 404 Page with custom _error production mode should set pages404 in routes-manifest correctly"
      ],
      "failed": [],
      "pending": [
        "Default 404 Page with custom _error development mode should render error correctly",
        "Default 404 Page with custom _error development mode should render index page normal",
        "Default 404 Page with custom _error development mode should respond to 404 correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/404-page-ssg/test/index.test.js": {
      "passed": [
        "404 Page Support SSG production mode should build successfully",
        "404 Page Support SSG production mode should have 404 page in prerender-manifest",
        "404 Page Support SSG production mode should not revalidate custom 404 page",
        "404 Page Support SSG production mode should not show an error in the logs for 404 SSG",
        "404 Page Support SSG production mode should render error correctly",
        "404 Page Support SSG production mode should render index page normal",
        "404 Page Support SSG production mode should respond to 404 correctly",
        "404 Page Support SSG production mode should set pages404 in routes-manifest correctly"
      ],
      "failed": [],
      "pending": [
        "404 Page Support SSG development mode should not show an error in the logs for 404 SSG",
        "404 Page Support SSG development mode should render error correctly",
        "404 Page Support SSG development mode should render index page normal",
        "404 Page Support SSG development mode should respond to 404 correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/404-page/test/index.test.js": {
      "passed": [
        "404 Page Support development mode 2 does not show error with getStaticProps in pages/404 dev",
        "404 Page Support development mode 2 falls back to _error correctly without pages/404",
        "404 Page Support development mode 2 shows error with getInitialProps in pages/404 dev",
        "404 Page Support development mode 2 shows error with getServerSideProps in pages/404 dev"
      ],
      "failed": [
        "404 Page Support production mode does not show error with getStaticProps in pages/404 build",
        "404 Page Support production mode should add /404 to pages-manifest correctly",
        "404 Page Support production mode should not cache for custom 404 page with gssp and revalidate disabled",
        "404 Page Support production mode should not cache for custom 404 page with gssp and revalidate enabled",
        "404 Page Support production mode should not cache for custom 404 page without gssp",
        "404 Page Support production mode should not error when visited directly",
        "404 Page Support production mode should output 404.html during build",
        "404 Page Support production mode should render _error for a 500 error still",
        "404 Page Support production mode should set correct status code with pages/404",
        "404 Page Support production mode should use pages/404",
        "404 Page Support production mode should use pages/404 for .d.ts file",
        "404 Page Support production mode shows error with getInitialProps in pages/404 build",
        "404 Page Support production mode shows error with getServerSideProps in pages/404 build"
      ],
      "pending": [
        "404 Page Support development mode should not error when visited directly",
        "404 Page Support development mode should render _error for a 500 error still",
        "404 Page Support development mode should set correct status code with pages/404",
        "404 Page Support development mode should use pages/404",
        "404 Page Support development mode should use pages/404 for .d.ts file"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/500-page/test/gsp-gssp.test.js": {
      "passed": [
        "gsp-gssp production mode does build 500 statically with getInitialProps in _app and getStaticProps in pages/500",
        "gsp-gssp production mode does not build 500 statically with no pages/500 and getServerSideProps in _error",
        "gsp-gssp production mode does not show error with getStaticProps in pages/500 build",
        "gsp-gssp production mode shows error with getServerSideProps in pages/500 build"
      ],
      "failed": [],
      "pending": [
        "gsp-gssp development mode does not show error with getStaticProps in pages/500 dev",
        "gsp-gssp development mode shows error with getServerSideProps in pages/500 dev"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/500-page/test/index.test.js": {
      "passed": [
        "500 Page Support development mode 2 shows error with getInitialProps in pages/500 dev",
        "500 Page Support production mode 2 builds 500 statically by default with no pages/500",
        "500 Page Support production mode 2 builds 500 statically by default with no pages/500 and custom _error without getInitialProps",
        "500 Page Support production mode 2 does not build 500 statically with getInitialProps in _app",
        "500 Page Support production mode 2 does not build 500 statically with no pages/500 and custom getInitialProps in _error",
        "500 Page Support production mode 2 does not build 500 statically with no pages/500 and custom getInitialProps in _error and _app",
        "500 Page Support production mode 2 shows error with getInitialProps in pages/500 build",
        "500 Page Support production mode should add /500 to pages-manifest correctly",
        "500 Page Support production mode should not error when visited directly",
        "500 Page Support production mode should output 500.html during build",
        "500 Page Support production mode should set correct status code with pages/500",
        "500 Page Support production mode should use pages/500"
      ],
      "failed": [],
      "pending": [
        "500 Page Support development mode should not error when visited directly",
        "500 Page Support development mode should set correct status code with pages/500",
        "500 Page Support development mode should use pages/500"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/absolute-assetprefix/test/index.test.js": {
      "passed": [
        "absolute assetPrefix with path prefix production mode should not fetch static data from a CDN",
        "absolute assetPrefix with path prefix production mode should work with getServerSideProps",
        "absolute assetPrefix with path prefix production mode should work with getStaticPaths prerendered"
      ],
      "failed": [
        "absolute assetPrefix with path prefix production mode should fetch from cache correctly",
        "absolute assetPrefix with path prefix production mode should work with getStaticPaths fallback"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amp-export-validation/test/index.test.js": {
      "passed": [
        "AMP Validation on Export production mode should have shown errors during build"
      ],
      "failed": [],
      "pending": [
        "AMP Validation on Export production mode shows AMP warning without throwing error",
        "AMP Validation on Export production mode shows warning and error when throwing error",
        "AMP Validation on Export production mode throws error on AMP error"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amphtml-custom-optimizer/test/index.test.js": {
      "passed": [
        "AMP Custom Optimizer production mode should build and start for dynamic page",
        "AMP Custom Optimizer production mode should build and start for static page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amphtml-custom-validator/test/index.test.js": {
      "passed": [],
      "failed": [],
      "pending": [
        "AMP Custom Validator development mode should run in development mode successfully",
        "AMP Custom Validator production mode should build and start successfully"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amphtml-fragment-style/test/index.test.js": {
      "passed": [
        "AMP Fragment Styles production mode adds styles from fragment in AMP mode correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amphtml-ssg/test/index.test.js": {
      "passed": [
        "AMP SSG Support export mode production mode should have copied SSG files correctly",
        "AMP SSG Support production mode should load a hybrid amp page with query correctly",
        "AMP SSG Support production mode should load a hybrid amp page without query correctly",
        "AMP SSG Support production mode should load an amp first page correctly",
        "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page",
        "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page with query",
        "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page with trailing slash",
        "AMP SSG Support production mode should output prerendered files correctly during build"
      ],
      "failed": [],
      "pending": [
        "AMP SSG Support development mode should load a hybrid amp page with query correctly",
        "AMP SSG Support development mode should load a hybrid amp page without query correctly",
        "AMP SSG Support development mode should load an amp first page correctly",
        "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page",
        "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page with query",
        "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page with trailing slash"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/amphtml/test/index.test.js": {
      "passed": [
        "AMP Usage AMP dev no-warn should not warn on valid amp",
        "AMP Usage AMP development mode should add data-ampdevmode to development script tags",
        "AMP Usage AMP development mode should detect amp validator warning on custom scripts",
        "AMP Usage AMP development mode should detect amp validator warning on invalid amp",
        "AMP Usage AMP development mode should navigate from non-AMP to AMP without error",
        "AMP Usage AMP development mode should not contain missing files warning",
        "AMP Usage production mode With AMP context should render nested AMP page with AMP hook",
        "AMP Usage production mode With AMP context should render nested normal page with AMP hook",
        "AMP Usage production mode With AMP context should render the AMP page that uses the AMP hook",
        "AMP Usage production mode With AMP context should render the normal page that uses the AMP hook",
        "AMP Usage production mode With basic AMP usage should auto import extensions",
        "AMP Usage production mode With basic AMP usage should drop custom scripts",
        "AMP Usage production mode With basic AMP usage should not drop custom amp scripts",
        "AMP Usage production mode With basic AMP usage should optimize clean",
        "AMP Usage production mode With basic AMP usage should render the page as valid AMP",
        "AMP Usage production mode With basic AMP usage should render the page without leaving render target",
        "AMP Usage production mode With basic usage should render the page",
        "AMP Usage production mode canonical amphtml should allow manually setting amphtml rel",
        "AMP Usage production mode canonical amphtml should allow manually setting canonical",
        "AMP Usage production mode canonical amphtml should not render amphtml link tag with no AMP page",
        "AMP Usage production mode canonical amphtml should remove conflicting amp tags",
        "AMP Usage production mode canonical amphtml should render a canonical regardless of amp-only status (explicit)",
        "AMP Usage production mode canonical amphtml should render amphtml from provided rel link",
        "AMP Usage production mode canonical amphtml should render link rel amphtml",
        "AMP Usage production mode canonical amphtml should render link rel amphtml with existing query",
        "AMP Usage production mode canonical amphtml should render the AMP page that uses the AMP hook",
        "AMP Usage production mode combined styles should combine style tags",
        "AMP Usage production mode combined styles should remove sourceMaps from styles",
        "AMP Usage production mode should have amp optimizer in trace"
      ],
      "failed": [
        "AMP Usage production mode With basic AMP usage should not output client pages for AMP only",
        "AMP Usage production mode With basic AMP usage should not output client pages for AMP only with config exported after declaration",
        "AMP Usage production mode should not contain missing files warning"
      ],
      "pending": [
        "AMP Usage AMP development mode should detect changes and refresh a hybrid AMP page",
        "AMP Usage AMP development mode should detect changes and refresh an AMP page",
        "AMP Usage AMP development mode should detect changes and refresh an AMP page at root pages/",
        "AMP Usage AMP development mode should detect changes to component and refresh an AMP page",
        "AMP Usage AMP development mode should detect the changes and display it",
        "AMP Usage AMP development mode should not reload unless the page is edited for an AMP page"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/api-body-parser/test/index.test.js": {
      "passed": [
        "should not throw if request body is already parsed in custom middleware",
        "should not throw if request's content-type is invalid",
        "should parse JSON body"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/api-catch-all/test/index.test.js": {
      "passed": [
        "API routes dev support should return data when catch-all",
        "API routes dev support should return data when catch-all with index and no trailing slash",
        "API routes dev support should return data when catch-all with index and trailing slash",
        "API routes dev support should return redirect when catch-all with index and trailing slash",
        "API routes production mode should return data when catch-all",
        "API routes production mode should return data when catch-all with index and no trailing slash",
        "API routes production mode should return data when catch-all with index and trailing slash",
        "API routes production mode should return redirect when catch-all with index and trailing slash"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/api-support/test/index.test.js": {
      "passed": [
        "API routes dev support should 404 on optional dynamic api page",
        "API routes dev support should compile only server code in development",
        "API routes dev support should handle 204 status correctly",
        "API routes dev support should handle proxying to self correctly",
        "API routes dev support should not conflict with /api routes",
        "API routes dev support should not show warning if using externalResolver flag",
        "API routes dev support should not show warning when the API resolves and the response is piped",
        "API routes dev support should not warn if response body is larger than 4MB with responseLimit config = false",
        "API routes dev support should parse JSON body",
        "API routes dev support should parse bigger body then 1mb",
        "API routes dev support should parse body in handler",
        "API routes dev support should parse body with config",
        "API routes dev support should parse query correctly",
        "API routes dev support should parse urlencoded body",
        "API routes dev support should prioritize a non-dynamic page",
        "API routes dev support should redirect to login",
        "API routes dev support should redirect with status code 301",
        "API routes dev support should redirect with status code 307",
        "API routes dev support should render page",
        "API routes dev support should respond from /api/auth/[...nextauth] correctly",
        "API routes dev support should return 200 on POST on pages",
        "API routes dev support should return 404 for undefined path",
        "API routes dev support should return JSON on post on API",
        "API routes dev support should return cookies object",
        "API routes dev support should return custom error",
        "API routes dev support should return data on dynamic nested route",
        "API routes dev support should return data on dynamic optional nested route",
        "API routes dev support should return data on dynamic route",
        "API routes dev support should return empty cookies object",
        "API routes dev support should return empty query object",
        "API routes dev support should return error with invalid JSON",
        "API routes dev support should set cors headers when adding cors middleware",
        "API routes dev support should show false positive warning if not using externalResolver flag",
        "API routes dev support should show friendly error for invalid redirect",
        "API routes dev support should show friendly error in case of passing null as first argument redirect",
        "API routes dev support should show warning when the API resolves without ending the request in development mode",
        "API routes dev support should special-case empty JSON body",
        "API routes dev support should support boolean for JSON in api page",
        "API routes dev support should support etag spec",
        "API routes dev support should support null in JSON response body",
        "API routes dev support should support string in JSON response body",
        "API routes dev support should support undefined response body",
        "API routes dev support should throw Internal Server Error",
        "API routes dev support should throw Internal Server Error (async)",
        "API routes dev support should warn if response body is larger than 4MB",
        "API routes dev support should warn with configured size if response body is larger than configured size",
        "API routes dev support should work with child_process correctly",
        "API routes dev support should work with dynamic params and search string",
        "API routes dev support should work with dynamic params and search string like lambda",
        "API routes dev support should work with index api",
        "API routes dev support should work with nullable payload",
        "API routes production mode should 404 on optional dynamic api page",
        "API routes production mode should build api routes",
        "API routes production mode should handle 204 status correctly",
        "API routes production mode should handle proxying to self correctly",
        "API routes production mode should not conflict with /api routes",
        "API routes production mode should not warn if response body is larger than 4MB with responseLimit config = false",
        "API routes production mode should parse JSON body",
        "API routes production mode should parse bigger body then 1mb",
        "API routes production mode should parse body in handler",
        "API routes production mode should parse body with config",
        "API routes production mode should parse query correctly",
        "API routes production mode should parse urlencoded body",
        "API routes production mode should prioritize a non-dynamic page",
        "API routes production mode should redirect to login",
        "API routes production mode should redirect with status code 301",
        "API routes production mode should redirect with status code 307",
        "API routes production mode should render page",
        "API routes production mode should respond from /api/auth/[...nextauth] correctly",
        "API routes production mode should return 200 on POST on pages",
        "API routes production mode should return 404 for undefined path",
        "API routes production mode should return JSON on post on API",
        "API routes production mode should return cookies object",
        "API routes production mode should return custom error",
        "API routes production mode should return data on dynamic nested route",
        "API routes production mode should return data on dynamic optional nested route",
        "API routes production mode should return data on dynamic route",
        "API routes production mode should return empty cookies object",
        "API routes production mode should return empty query object",
        "API routes production mode should return error with invalid JSON",
        "API routes production mode should set cors headers when adding cors middleware",
        "API routes production mode should show error with output export",
        "API routes production mode should show friendly error for invalid redirect",
        "API routes production mode should show friendly error in case of passing null as first argument redirect",
        "API routes production mode should special-case empty JSON body",
        "API routes production mode should support boolean for JSON in api page",
        "API routes production mode should support etag spec",
        "API routes production mode should support null in JSON response body",
        "API routes production mode should support string in JSON response body",
        "API routes production mode should support undefined response body",
        "API routes production mode should throw Internal Server Error",
        "API routes production mode should throw Internal Server Error (async)",
        "API routes production mode should warn if response body is larger than 4MB",
        "API routes production mode should warn with configured size if response body is larger than configured size",
        "API routes production mode should work with child_process correctly",
        "API routes production mode should work with dynamic params and search string",
        "API routes production mode should work with dynamic params and search string like lambda",
        "API routes production mode should work with index api",
        "API routes production mode should work with nullable payload"
      ],
      "failed": [],
      "pending": [
        "API routes dev support should return error exceeded body limit",
        "API routes production mode should return error exceeded body limit"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-aspath/test/index.test.js": {
      "passed": [
        "App asPath should not have any changes in asPath after a bundle rebuild"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-config-asset-prefix/test/index.test.js": {
      "passed": [
        "App assetPrefix config should render correctly with assetPrefix: \"/\""
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/config.test.ts": {
      "passed": [
        "app dir - with output export (next dev / next build) production mode should correctly emit exported assets to config.distDir",
        "app dir - with output export (next dev / next build) production mode should error when running next export",
        "app dir - with output export (next dev / next build) production mode should throw when exportPathMap configured"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dev-custom-dist-dir.test.ts": {
      "passed": [
        "app dir - with output export and custom distDir (next dev) should render properly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamic-missing-gsp-dev.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app dir - with output export - dynamic missing gsp dev development mode should error when client component has generateStaticParams",
        "app dir - with output export - dynamic missing gsp dev development mode should error when dynamic route is missing generateStaticParams"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamic-missing-gsp-prod.test.ts": {
      "passed": [
        "app dir - with output export - dynamic missing gsp prod production mode should error when dynamic route is missing generateStaticParams"
      ],
      "failed": [
        "app dir - with output export - dynamic missing gsp prod production mode should error when client component has generateStaticParams"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamicapiroute-dev.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'error'",
        "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'force-dynamic'",
        "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'force-static'",
        "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute undefined"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamicapiroute-prod.test.ts": {
      "passed": [
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'error'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'force-dynamic'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'force-static'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute undefined"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamicpage-dev.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'error'",
        "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'force-dynamic'",
        "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'force-static'",
        "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage undefined"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/dynamicpage-prod.test.ts": {
      "passed": [
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'error'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'force-dynamic'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'force-static'",
        "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage undefined"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/start.test.ts": {
      "passed": [
        "app dir - with output export (next start) production mode should error during next start with output export"
      ],
      "failed": [],
      "pending": [
        "app dir - with output export (next start) production mode should warn during next start with output standalone"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/trailing-slash-dev.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app dir - with output export - trailing slash dev development mode should work in dev with trailingSlash 'false'",
        "app dir - with output export - trailing slash dev development mode should work in dev with trailingSlash 'true'"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-dir-export/test/trailing-slash-start.test.ts": {
      "passed": [
        "app dir - with output export - trailing slash prod production mode should work in prod with trailingSlash 'false'",
        "app dir - with output export - trailing slash prod production mode should work in prod with trailingSlash 'true'"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-document-add-hmr/test/index.test.js": {
      "passed": [],
      "failed": [],
      "pending": [
        "_app/_document add HMR should HMR when _app is added",
        "_app/_document add HMR should HMR when _document is added"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/app-document-import-order/test/index.test.js": {
      "passed": [
        "Root components import order production mode root components should be imported in this order _document > _app > page in order to respect side effects"
      ],
      "failed": [
        "Root components import order production mode _app chunks should be attached to de dom before page chunks"
      ],
      "pending": [
        "development mode Skipped in Turbopack _app chunks should be attached to de dom before page chunks",
        "development mode root components should be imported in this order _document > _app > page in order to respect side effects"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-mjs/test/index.test.js": {
      "passed": [
        "Configuration correctly imports a package that defines `module` but no `main` in package.json",
        "Configuration renders public config on the server only",
        "Configuration renders server config on the server only",
        "Configuration should disable X-Powered-By header support",
        "Configuration should have config available on the client"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-output-export/test/index.test.ts": {
      "passed": [
        "config-output-export should error with \"i18n\" config",
        "config-output-export should error with api routes function",
        "config-output-export should error with getServerSideProps without fallback",
        "config-output-export should error with getStaticPaths and fallback blocking",
        "config-output-export should error with getStaticPaths and fallback true",
        "config-output-export should error with getStaticProps and revalidate 10 seconds (ISR)",
        "config-output-export should error with middleware function",
        "config-output-export should work with getStaticPaths and fallback false",
        "config-output-export should work with getStaticProps and revalidate false",
        "config-output-export should work with getStaticProps and without revalidate",
        "config-output-export should work with static homepage",
        "config-output-export when hasNextSupport = false should error with \"headers\" config",
        "config-output-export when hasNextSupport = false should error with \"redirects\" config",
        "config-output-export when hasNextSupport = false should error with \"rewrites\" config",
        "config-output-export when hasNextSupport = true should error with \"headers\" config",
        "config-output-export when hasNextSupport = true should error with \"redirects\" config",
        "config-output-export when hasNextSupport = true should error with \"rewrites\" config"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-promise-error/test/index.test.js": {
      "passed": [],
      "failed": [
        "Promise in next config production mode should warn when a promise is returned on webpack"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-resolve-alias/test/index.test.js": {
      "passed": [],
      "failed": [],
      "pending": [
        "Invalid resolve alias should show relevant error when webpack resolve alias is wrong"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-syntax-error/test/index.test.js": {
      "passed": [
        "Invalid config syntax production mode should error when next.config.js contains syntax error",
        "Invalid config syntax production mode should error when next.config.mjs contains syntax error"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config-validation/test/index.test.ts": {
      "passed": [
        "next.config.js validation production mode it should validate correctly for invalid config types",
        "next.config.js validation production mode it should validate correctly for unexpected config fields",
        "next.config.js validation production mode should allow undefined environment variables"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/config/test/index.test.js": {
      "passed": [
        "Configuration correctly imports a package that defines `module` but no `main` in package.json",
        "Configuration renders public config on the server only",
        "Configuration renders server config on the server only",
        "Configuration should disable X-Powered-By header support",
        "Configuration should have config available on the client"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/conflicting-public-file-page/test/index.test.js": {
      "passed": [
        "Errors on conflict between public file and page file production mode Throws error during build"
      ],
      "failed": [],
      "pending": [
        "Errors on conflict between public file and page file development mode Throws error during development"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/conflicting-ssg-paths/test/index.test.js": {
      "passed": [
        "Conflicting SSG paths production mode should show proper error when a dynamic SSG route conflicts with SSR route",
        "Conflicting SSG paths production mode should show proper error when a dynamic SSG route conflicts with normal route",
        "Conflicting SSG paths production mode should show proper error when two dynamic SSG routes have conflicting paths"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/examples.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app --example should create if --example value is default",
        "create-next-app --example should create on valid Next.js example name",
        "create-next-app --example should create with GitHub URL",
        "create-next-app --example should create with GitHub URL and --example-path",
        "create-next-app --example should create with GitHub URL trailing slash",
        "create-next-app --example should fall back to default template if failed to download",
        "create-next-app --example should not create if --example flag value is absent",
        "create-next-app --example should not create if --example flag value is invalid",
        "create-next-app --example should use --example-path over the GitHub URL"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app should not create if the target directory is not empty",
        "create-next-app should not create if the target directory is not writable",
        "create-next-app should not install dependencies if --skip-install"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/package-manager/bun.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app with package manager bun should use bun for --use-bun flag",
        "create-next-app with package manager bun should use bun for --use-bun flag with example",
        "create-next-app with package manager bun should use bun when user-agent is bun",
        "create-next-app with package manager bun should use bun when user-agent is bun with example"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/package-manager/npm.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app with package manager npm should use npm for --use-npm flag",
        "create-next-app with package manager npm should use npm for --use-npm flag with example",
        "create-next-app with package manager npm should use npm when user-agent is npm",
        "create-next-app with package manager npm should use npm when user-agent is npm with example"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/package-manager/pnpm.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app with package manager pnpm should use pnpm for --use-pnpm flag",
        "create-next-app with package manager pnpm should use pnpm for --use-pnpm flag with example",
        "create-next-app with package manager pnpm should use pnpm when user-agent is pnpm",
        "create-next-app with package manager pnpm should use pnpm when user-agent is pnpm with example"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/package-manager/yarn.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app with package manager yarn should use yarn for --use-yarn flag",
        "create-next-app with package manager yarn should use yarn for --use-yarn flag with example",
        "create-next-app with package manager yarn should use yarn when user-agent is yarn",
        "create-next-app with package manager yarn should use yarn when user-agent is yarn with example"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/prompts.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app prompts should prompt user for choice if --import-alias is absent",
        "create-next-app prompts should prompt user for choice if --js or --ts flag is absent",
        "create-next-app prompts should prompt user for choice if --tailwind is absent",
        "create-next-app prompts should prompt user for choice if directory name is absent"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/templates/app.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app --app (App Router) should create JavaScript project with --js flag",
        "create-next-app --app (App Router) should create TailwindCSS project with --tailwind flag",
        "create-next-app --app (App Router) should create TypeScript project with --ts flag",
        "create-next-app --app (App Router) should create an empty TailwindCSS project with --empty flag",
        "create-next-app --app (App Router) should create an empty project with --empty flag",
        "create-next-app --app (App Router) should create project inside \"src\" directory with --src-dir flag",
        "create-next-app --app (App Router) should enable turbopack dev with --turbo flag"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/create-next-app/templates/pages.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "create-next-app --no-app (Pages Router) should create JavaScript project with --js flag",
        "create-next-app --no-app (Pages Router) should create TailwindCSS project with --tailwind flag",
        "create-next-app --no-app (Pages Router) should create TypeScript project with --ts flag",
        "create-next-app --no-app (Pages Router) should create an empty TailwindCSS project with --empty flag",
        "create-next-app --no-app (Pages Router) should create an empty project with --empty flag",
        "create-next-app --no-app (Pages Router) should create project inside \"src\" directory with --src-dir flag",
        "create-next-app --no-app (Pages Router) should enable turbopack dev with --turbo flag"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/critical-css/test/index.test.js": {
      "passed": [
        "CSS optimization for SSR apps production mode should have all CSS files in manifest",
        "CSS optimization for SSR apps production mode should not inline non-critical css"
      ],
      "failed": [
        "CSS optimization for SSR apps production mode should inline critical CSS",
        "CSS optimization for SSR apps production mode should inline critical CSS (dynamic)"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-client-nav/test/index.test.js": {
      "passed": [
        "CSS Module client-side navigation dev should be able to client-side navigate from blue to red",
        "CSS Module client-side navigation dev should be able to client-side navigate from none to blue",
        "CSS Module client-side navigation dev should be able to client-side navigate from none to red",
        "CSS Module client-side navigation dev should be able to client-side navigate from red to blue",
        "CSS Module client-side navigation production mode should time out and hard navigate for stalled CSS request"
      ],
      "failed": [
        "CSS Module client-side navigation production mode should be able to client-side navigate from blue to red",
        "CSS Module client-side navigation production mode should be able to client-side navigate from none to blue",
        "CSS Module client-side navigation production mode should be able to client-side navigate from none to red",
        "CSS Module client-side navigation production mode should be able to client-side navigate from red to blue"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-customization/test/index.test.js": {
      "passed": [],
      "failed": [],
      "pending": [
        "CSS Customization production mode Bad CSS Customization Array (1) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (2) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (3) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (4) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (5) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (6) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (7) should fail the build",
        "CSS Customization production mode Bad CSS Customization Array (8) should fail the build",
        "CSS Customization production mode Bad CSS Customization Function should fail the build",
        "CSS Customization production mode Bad CSS Customization should compile successfully",
        "CSS Customization production mode Bad CSS Customization should've compiled and prefixed",
        "CSS Customization production mode Bad CSS Customization should've emitted a source map",
        "CSS Customization production mode Basic CSS should compile successfully",
        "CSS Customization production mode Basic CSS should've compiled and prefixed",
        "CSS Customization production mode Basic CSS should've emitted a source map",
        "CSS Customization production mode Correct CSS Customization Array should compile successfully",
        "CSS Customization production mode Correct CSS Customization Array should've compiled and prefixed",
        "CSS Customization production mode Correct CSS Customization Array should've emitted a source map",
        "CSS Customization production mode Correct CSS Customization custom loader should compile successfully",
        "CSS Customization production mode Correct CSS Customization custom loader should've applied style"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-features/test/browserslist.test.js": {
      "passed": [],
      "failed": [
        "Browserslist: New production mode should have compiled successfully",
        "Browserslist: New production mode should've emitted a single CSS file",
        "Browserslist: Old production mode should have compiled successfully",
        "Browserslist: Old production mode should've emitted a single CSS file"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-features/test/css-modules.test.js": {
      "passed": [],
      "failed": [
        "CSS Modules: Import Exports production mode should have compiled successfully",
        "CSS Modules: Import Exports production mode should've emitted a single CSS file",
        "CSS Modules: Import Global CSS production mode should have compiled successfully",
        "CSS Modules: Import Global CSS production mode should've emitted a single CSS file",
        "CSS Modules: Importing Invalid Global CSS production mode should fail to build",
        "Custom Properties: Fail for :root {} in CSS Modules production mode should fail to build",
        "Custom Properties: Fail for global element in CSS Modules production mode should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-features/test/index.test.js": {
      "passed": [],
      "failed": [
        "Custom Properties: Pass-Through IE11 production mode should have compiled successfully",
        "Custom Properties: Pass-Through IE11 production mode should've emitted a single CSS file",
        "Custom Properties: Pass-Through Modern production mode should have compiled successfully",
        "Custom Properties: Pass-Through Modern production mode should've emitted a single CSS file",
        "Inline Comments: Minify production mode should have compiled successfully",
        "Inline Comments: Minify production mode should've emitted a single CSS file"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-minify/test/index.test.js": {
      "passed": [],
      "failed": [
        "css-minify production mode should minify correctly by removing whitespace"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css-modules/test/index.test.js": {
      "passed": [
        "Can hot reload CSS Module without losing state should update CSS color without remounting <input>",
        "Catch-all Route CSS Module Usage production mode should apply styles correctly",
        "Dynamic Route CSS Module Usage production mode should apply styles correctly",
        "Has CSS Module in computed styles in Development should have CSS for page",
        "Has CSS Module in computed styles in Production production mode should have CSS for page"
      ],
      "failed": [
        "3rd Party CSS Module Support production mode should have compiled successfully",
        "3rd Party CSS Module Support production mode should've emitted a single CSS file",
        "3rd Party CSS Module Support production mode should've injected the CSS on server render",
        "Basic CSS Module Support production mode should have compiled successfully",
        "Basic CSS Module Support production mode should've emitted a single CSS file",
        "Basic CSS Module Support production mode should've injected the CSS on server render",
        "CSS Module Composes Usage (Basic) production mode should have compiled successfully",
        "CSS Module Composes Usage (Basic) production mode should've emitted a single CSS file",
        "CSS Module Composes Usage (External) production mode should have compiled successfully",
        "CSS Module Composes Usage (External) production mode should've emitted a single CSS file",
        "Catch-all Route CSS Module Usage production mode should have compiled successfully",
        "Catch-all Route CSS Module Usage production mode should've emitted a single CSS file",
        "Dynamic Route CSS Module Usage production mode should have compiled successfully",
        "Dynamic Route CSS Module Usage production mode should've emitted a single CSS file",
        "Has CSS Module in computed styles in Production production mode should have compiled successfully",
        "Valid CSS Module Usage from within node_modules production mode should have compiled successfully",
        "Valid CSS Module Usage from within node_modules production mode should've emitted a single CSS file",
        "Valid CSS Module Usage from within node_modules production mode should've prerendered with relevant data",
        "Valid Nested CSS Module Usage from within node_modules production mode should have compiled successfully",
        "Valid Nested CSS Module Usage from within node_modules production mode should've emitted a single CSS file",
        "Valid Nested CSS Module Usage from within node_modules production mode should've prerendered with relevant data"
      ],
      "pending": [
        "Invalid CSS Module Usage in node_modules production mode should fail to build",
        "Invalid Global CSS Module Usage in node_modules production mode should fail to build"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css/test/basic-global-support.test.js": {
      "passed": [],
      "failed": [
        "Basic Global Support production mode useLightnincsss(false) should compile successfully",
        "Basic Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
        "Basic Global Support production mode useLightnincsss(true) should compile successfully",
        "Basic Global Support production mode useLightnincsss(true) should've emitted a single CSS file",
        "Basic Global Support with special characters in path production mode useLightnincsss(false) should compile successfully",
        "Basic Global Support with special characters in path production mode useLightnincsss(false) should've emitted a single CSS file",
        "Basic Global Support with special characters in path production mode useLightnincsss(true) should compile successfully",
        "Basic Global Support with special characters in path production mode useLightnincsss(true) should've emitted a single CSS file",
        "Basic Global Support with src/ dir production mode useLightnincsss(false) should compile successfully",
        "Basic Global Support with src/ dir production mode useLightnincsss(false) should've emitted a single CSS file",
        "Basic Global Support with src/ dir production mode useLightnincsss(true) should compile successfully",
        "Basic Global Support with src/ dir production mode useLightnincsss(true) should've emitted a single CSS file",
        "CSS URL via `file-loader` and asset prefix (1) production mode should compile successfully",
        "CSS URL via `file-loader` and asset prefix (1) production mode should've emitted expected files",
        "CSS URL via `file-loader` and asset prefix (2) production mode should compile successfully",
        "CSS URL via `file-loader` and asset prefix (2) production mode should've emitted expected files",
        "CSS URL via `file-loader` production mode useLightnincsss(false) should compile successfully",
        "CSS URL via `file-loader` production mode useLightnincsss(false) should've emitted expected files",
        "CSS URL via `file-loader` production mode useLightnincsss(true) should compile successfully",
        "CSS URL via `file-loader` production mode useLightnincsss(true) should've emitted expected files",
        "Multi Global Support (reversed) production mode useLightnincsss(false) should compile successfully",
        "Multi Global Support (reversed) production mode useLightnincsss(false) should've emitted a single CSS file",
        "Multi Global Support (reversed) production mode useLightnincsss(true) should compile successfully",
        "Multi Global Support (reversed) production mode useLightnincsss(true) should've emitted a single CSS file",
        "Multi Global Support production mode useLightnincsss(false) should compile successfully",
        "Multi Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
        "Multi Global Support production mode useLightnincsss(true) should compile successfully",
        "Multi Global Support production mode useLightnincsss(true) should've emitted a single CSS file",
        "Nested @import() Global Support production mode useLightnincsss(false) should compile successfully",
        "Nested @import() Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
        "Nested @import() Global Support production mode useLightnincsss(true) should compile successfully",
        "Nested @import() Global Support production mode useLightnincsss(true) should've emitted a single CSS file"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css/test/css-and-styled-jsx.test.js": {
      "passed": [
        "Ordering with styled-jsx (dev) should have the correct color (css ordering)",
        "Ordering with styled-jsx (prod) production mode should have the correct color (css ordering)"
      ],
      "failed": [
        "Ordering with styled-jsx (prod) production mode should have compiled successfully"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css/test/css-compilation.test.js": {
      "passed": [],
      "failed": [
        "CSS Property Ordering production mode useLightnincsss(false) should have compiled successfully",
        "CSS Property Ordering production mode useLightnincsss(false) should have the border width (property ordering)",
        "CSS Property Ordering production mode useLightnincsss(true) should have compiled successfully",
        "CSS Property Ordering production mode useLightnincsss(true) should have the border width (property ordering)",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should compile successfully",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should've compiled and prefixed",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should've emitted a source map",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should compile successfully",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should've compiled and prefixed",
        "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should've emitted a source map",
        "CSS Support production mode Good CSS Import from node_modules useLightnincsss(false) should compile successfully",
        "CSS Support production mode Good CSS Import from node_modules useLightnincsss(false) should've emitted a single CSS file",
        "CSS Support production mode Good CSS Import from node_modules useLightnincsss(true) should compile successfully",
        "CSS Support production mode Good CSS Import from node_modules useLightnincsss(true) should've emitted a single CSS file",
        "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(false) should compile successfully",
        "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(false) should've emitted a single CSS file",
        "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(true) should compile successfully",
        "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(true) should've emitted a single CSS file",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should have CSS for page",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should have compiled successfully",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should've preloaded the CSS file and injected it in <head>",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should have CSS for page",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should have compiled successfully",
        "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should've preloaded the CSS file and injected it in <head>",
        "CSS Support production mode React Lifecyce Order (production) useLightnincsss(false) should have compiled successfully",
        "CSS Support production mode React Lifecyce Order (production) useLightnincsss(false) should have the correct color on mount after navigation",
        "CSS Support production mode React Lifecyce Order (production) useLightnincsss(true) should have compiled successfully",
        "CSS Support production mode React Lifecyce Order (production) useLightnincsss(true) should have the correct color on mount after navigation"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css/test/css-modules.test.js": {
      "passed": [
        "Data URLs production mode should compile successfully",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should have the correct color (css ordering)",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should have the correct color (css ordering) during hot reloads",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should not execute scripts in any order",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should have the correct color (css ordering)",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should have the correct color (css ordering) during hot reloads",
        "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should not execute scripts in any order",
        "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(false) should have the correct color (css ordering)",
        "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(true) should have the correct color (css ordering)",
        "should handle unresolved files gracefully production mode should build correctly"
      ],
      "failed": [
        "Data URLs production mode should have emitted expected files",
        "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(false) should have compiled successfully",
        "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(true) should have compiled successfully",
        "should handle unresolved files gracefully production mode should have correct file references in CSS output"
      ],
      "pending": [
        "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on hover)",
        "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on load)",
        "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on nav)",
        "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on hover)",
        "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on load)",
        "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on nav)",
        "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on hover)",
        "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on load)",
        "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on nav)",
        "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on hover)",
        "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on load)",
        "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on nav)",
        "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on hover)",
        "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on load)",
        "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on nav from index)",
        "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on nav from other)",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct CSS injection order",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on hover)",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on load)",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on nav from index)",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on nav from other)",
        "CSS Modules Composes Ordering useLightnincsss(false) production mode should not change color on hover",
        "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on hover)",
        "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on load)",
        "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on nav from index)",
        "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on nav from other)",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct CSS injection order",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on hover)",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on load)",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on nav from index)",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on nav from other)",
        "CSS Modules Composes Ordering useLightnincsss(true) production mode should not change color on hover"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/css/test/css-rendering.test.js": {
      "passed": [
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on hover)",
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on load)",
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on nav from index)",
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on nav from other)",
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should not change color on hover",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should hydrate black without dependencies manifest",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should hydrate red without dependencies manifest",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should route from black to red without dependencies",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should hydrate black without dependencies manifest",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should hydrate red without dependencies manifest",
        "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should route from black to red without dependencies",
        "CSS Support Page reload on CSS missing useLightnincsss(false) production mode should fall back to server-side transition on missing CSS",
        "CSS Support Page reload on CSS missing useLightnincsss(true) production mode should fall back to server-side transition on missing CSS",
        "CSS Support production mode CSS Import from node_modules useLightnincsss(false) should fail the build",
        "CSS Support production mode CSS Import from node_modules useLightnincsss(true) should fail the build"
      ],
      "failed": [
        "CSS Support CSS Cleanup on Render Failure useLightnincsss(false) production mode not have intermediary page styles on error rendering",
        "CSS Support CSS Cleanup on Render Failure useLightnincsss(true) production mode not have intermediary page styles on error rendering",
        "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct CSS injection order"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/default/test/static.test.ts": {
      "passed": [
        "Static Image Component Tests production mode Should allow an image with a static src to omit height and width",
        "Static Image Component Tests production mode Should automatically provide an image height and width",
        "Static Image Component Tests production mode Should use immutable cache-control header even when unoptimized",
        "Static Image Component Tests production mode Should use immutable cache-control header for static import",
        "Static Image Component Tests production mode should add a blur placeholder a statically imported jpg",
        "Static Image Component Tests production mode should add a blur placeholder a statically imported png",
        "Static Image Component Tests production mode should add a blur placeholder a statically imported png with fill",
        "Static Image Component Tests production mode should add a data URL placeholder to an image",
        "Static Image Component Tests production mode should add placeholder even when blurDataURL aspect ratio does not match width/height ratio",
        "Static Image Component Tests production mode should add placeholder with blurDataURL and fill",
        "Static Image Component Tests production mode should have <head> containing <meta name=\"viewport\"> followed by <link rel=\"preload\"> for priority image",
        "Static Image Component Tests production mode should load direct imported image",
        "Static Image Component Tests production mode should load staticprops imported image",
        "Static Image Component Tests production mode should use height prop to adjust both width and height",
        "Static Image Component Tests production mode should use width and height prop to override import",
        "Static Image Component Tests production mode should use width prop to adjust both width and height"
      ],
      "failed": [
        "Build Error Tests production mode should throw build error when import statement is used with missing file"
      ],
      "pending": [
        "Static Image Component Tests development mode Should allow an image with a static src to omit height and width",
        "Static Image Component Tests development mode Should automatically provide an image height and width",
        "Static Image Component Tests development mode should add a blur placeholder a statically imported jpg",
        "Static Image Component Tests development mode should add a blur placeholder a statically imported png",
        "Static Image Component Tests development mode should add a blur placeholder a statically imported png with fill",
        "Static Image Component Tests development mode should add a data URL placeholder to an image",
        "Static Image Component Tests development mode should add placeholder even when blurDataURL aspect ratio does not match width/height ratio",
        "Static Image Component Tests development mode should add placeholder with blurDataURL and fill",
        "Static Image Component Tests development mode should have <head> containing <meta name=\"viewport\"> followed by <link rel=\"preload\"> for priority image",
        "Static Image Component Tests development mode should load direct imported image",
        "Static Image Component Tests development mode should load staticprops imported image",
        "Static Image Component Tests development mode should use height prop to adjust both width and height",
        "Static Image Component Tests development mode should use width and height prop to override import",
        "Static Image Component Tests development mode should use width prop to adjust both width and height"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/export-config/test/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "next/image with output export config development mode should error"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/image-from-node-modules/test/index.test.ts": {
      "passed": [
        "Image Component from node_modules development mode should apply image config for node_modules",
        "Image Component from node_modules prod mode production mode should apply image config for node_modules"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/invalid-image-import/test/index.test.ts": {
      "passed": [],
      "failed": [
        "Missing Import Image Tests production mode should show error"
      ],
      "pending": [
        "Missing Import Image Tests development mode should show error"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/loader-config-default-loader-with-file/test/index.test.ts": {
      "passed": [
        "Image Loader Config development mode - component should work with loader prop",
        "Image Loader Config development mode - component should work with loaderFile config, leaving default image optimization enabled",
        "Image Loader Config development mode - getImageProps should work with loader prop",
        "Image Loader Config development mode - getImageProps should work with loaderFile config, leaving default image optimization enabled",
        "Image Loader Config production mode - component should work with loader prop",
        "Image Loader Config production mode - component should work with loaderFile config, leaving default image optimization enabled",
        "Image Loader Config production mode - getImageProps should work with loader prop",
        "Image Loader Config production mode - getImageProps should work with loaderFile config, leaving default image optimization enabled"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/loader-config-edge-runtime/test/index.test.ts": {
      "passed": [
        "Image Loader Config with Edge Runtime production mode should add \"src\" to img1 based on the loader config",
        "Image Loader Config with Edge Runtime production mode should add \"src\" to img2 based on the loader prop",
        "Image Loader Config with Edge Runtime production mode should add \"srcset\" to img1 based on the loader config",
        "Image Loader Config with Edge Runtime production mode should add \"srcset\" to img2 based on the loader prop"
      ],
      "failed": [],
      "pending": [
        "Image Loader Config with Edge Runtime development mode should add \"src\" to img1 based on the loader config",
        "Image Loader Config with Edge Runtime development mode should add \"src\" to img2 based on the loader prop",
        "Image Loader Config with Edge Runtime development mode should add \"srcset\" to img1 based on the loader config",
        "Image Loader Config with Edge Runtime development mode should add \"srcset\" to img2 based on the loader prop"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/loader-config/test/index.test.ts": {
      "passed": [
        "Image Loader Config new development mode - component should work with loader prop",
        "Image Loader Config new development mode - component should work with loaderFile config",
        "Image Loader Config new development mode - getImageProps should work with loader prop",
        "Image Loader Config new development mode - getImageProps should work with loaderFile config",
        "Image Loader Config new production mode - component should work with loader prop",
        "Image Loader Config new production mode - component should work with loaderFile config",
        "Image Loader Config new production mode - getImageProps should work with loader prop",
        "Image Loader Config new production mode - getImageProps should work with loaderFile config"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/middleware/test/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Image with middleware in edge func development mode should not error"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/react-virtualized/test/index.test.ts": {
      "passed": [
        "react-virtualized wrapping next/image production mode should not cancel requests for images"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/svgo-webpack/test/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "svgo-webpack with Image Component development mode should print error when invalid Image usage",
        "svgo-webpack with Image Component production mode should not fail to build invalid usage of the Image component"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/trailing-slash/test/index.test.ts": {
      "passed": [
        "Image Component Trailing Slash Tests production mode should include trailing slash when trailingSlash is set on config file during next start"
      ],
      "failed": [],
      "pending": [
        "Image Component Trailing Slash Tests development mode should include trailing slash when trailingSlash is set on config file during next dev"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/typescript/test/index.test.ts": {
      "passed": [
        "TypeScript Image Component production mode should fail to build invalid usage of the Image component",
        "TypeScript Image Component production mode should remove global image types when disabled",
        "TypeScript Image Component should remove global image types when disabled (dev)"
      ],
      "failed": [],
      "pending": [
        "TypeScript Image Component development mode should have image types when enabled",
        "TypeScript Image Component development mode should print error when invalid Image usage",
        "TypeScript Image Component development mode should render the valid Image usage and not print error"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/unicode/test/index.test.ts": {
      "passed": [
        "Image Component Unicode Image URL production mode should load external image with space",
        "Image Component Unicode Image URL production mode should load external unicode image",
        "Image Component Unicode Image URL production mode should load internal image with space",
        "Image Component Unicode Image URL production mode should load internal unicode image",
        "Image Component Unicode Image URL production mode should load static unicode image"
      ],
      "failed": [],
      "pending": [
        "Image Component Unicode Image URL development mode should load external image with space",
        "Image Component Unicode Image URL development mode should load external unicode image",
        "Image Component Unicode Image URL development mode should load internal image with space",
        "Image Component Unicode Image URL development mode should load internal unicode image",
        "Image Component Unicode Image URL development mode should load static unicode image"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/next-image-new/unoptimized/test/index.test.ts": {
      "passed": [
        "Unoptimized Image Tests development mode - component should not optimize any image",
        "Unoptimized Image Tests development mode - getImageProps should not optimize any image",
        "Unoptimized Image Tests production mode - component should not optimize any image",
        "Unoptimized Image Tests production mode - getImageProps should not optimize any image"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/no-op-export/test/index.test.js": {
      "passed": [
        "no-op export production mode should not error for all server-side pages build",
        "no-op export production mode should not error for empty exportPathMap"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/no-override-next-props/test/index.test.js": {
      "passed": [
        "Dynamic require should show error when a Next prop is returned in _app.getInitialProps"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/no-page-props/test/index.test.js": {
      "passed": [
        "Error no pageProps production mode should load 404 page correctly",
        "Error no pageProps production mode should load auto-export page correctly",
        "Error no pageProps production mode should load getServerSideProps page correctly",
        "Error no pageProps production mode should load getStaticProps page correctly"
      ],
      "failed": [
        "Error no pageProps production mode should navigate between pages correctly"
      ],
      "pending": [
        "Error no pageProps development mode should load 404 page correctly",
        "Error no pageProps development mode should load auto-export page correctly",
        "Error no pageProps development mode should load getServerSideProps page correctly",
        "Error no pageProps development mode should load getStaticProps page correctly",
        "Error no pageProps development mode should navigate between pages correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/node-fetch-keep-alive/test/index.test.js": {
      "passed": [
        "node-fetch-keep-alive dev should send keep-alive for getServerSideProps",
        "node-fetch-keep-alive dev should send keep-alive for getStaticPaths",
        "node-fetch-keep-alive dev should send keep-alive for getStaticProps",
        "node-fetch-keep-alive dev should send keep-alive for json API",
        "node-fetch-keep-alive production mode should send keep-alive for getServerSideProps",
        "node-fetch-keep-alive production mode should send keep-alive for getStaticPaths",
        "node-fetch-keep-alive production mode should send keep-alive for getStaticProps",
        "node-fetch-keep-alive production mode should send keep-alive for json API"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/non-next-dist-exclude/test/index.test.js": {
      "passed": [
        "Non-Next externalization production mode Externalized non-Next dist-using package"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/non-standard-node-env-warning/test/index.test.js": {
      "passed": [
        "Non-Standard NODE_ENV production mode should show the warning with NODE_ENV set to development with next build",
        "Non-Standard NODE_ENV production mode should show the warning with NODE_ENV set to development with next start",
        "Non-Standard NODE_ENV should not show the warning with NODE_ENV set to valid value",
        "Non-Standard NODE_ENV should not show the warning with NODE_ENV set to valid value (custom server)",
        "Non-Standard NODE_ENV should not show the warning with no NODE_ENV set",
        "Non-Standard NODE_ENV should show the warning with NODE_ENV set to invalid value",
        "Non-Standard NODE_ENV should show the warning with NODE_ENV set to invalid value (custom server)",
        "Non-Standard NODE_ENV should show the warning with NODE_ENV set to production with next dev"
      ],
      "failed": [
        "Non-Standard NODE_ENV production mode should still DCE NODE_ENV specific code"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/not-found-revalidate/test/index.test.js": {
      "passed": [
        "SSG notFound revalidate production mode should revalidate after notFound is returned for fallback: blocking",
        "SSG notFound revalidate production mode should revalidate page when notFund returned during build"
      ],
      "failed": [
        "SSG notFound revalidate production mode should revalidate after notFound is returned for fallback: true"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/nullish-config/test/index.test.js": {
      "passed": [],
      "failed": [
        "Nullish configs in next.config.js production mode should ignore configs set to `null` in next.config.js",
        "Nullish configs in next.config.js production mode should ignore configs set to `undefined` in next.config.js"
      ],
      "pending": [
        "Nullish configs in next.config.js development mode should ignore configs set to `null` in next.config.js",
        "Nullish configs in next.config.js development mode should ignore configs set to `undefined` in next.config.js"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/numeric-sep/test/index.test.js": {
      "passed": [],
      "failed": [
        "Numeric Separator Support production mode should successfully build for a JavaScript file"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/ondemand/test/index.test.js": {
      "passed": [],
      "failed": [],
      "pending": [
        "On Demand Entries should compile pages for JSON page requests",
        "On Demand Entries should compile pages for SSR",
        "On Demand Entries should dispose inactive pages",
        "On Demand Entries should navigate to pages with dynamic imports",
        "On Demand Entries should pass"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/optional-chaining-nullish-coalescing/test/index.test.js": {
      "passed": [
        "Optional chaining and nullish coalescing support production mode should support nullish coalescing",
        "Optional chaining and nullish coalescing support production mode should support optional chaining"
      ],
      "failed": [],
      "pending": [
        "Optional chaining and nullish coalescing support development mode should support nullish coalescing",
        "Optional chaining and nullish coalescing support development mode should support optional chaining"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/page-config/test/index.test.js": {
      "passed": [
        "Page Config production mode builds without error when export const config is used outside page",
        "Page Config production mode shows error when page config has invalid properties",
        "Page Config production mode shows error when page config has invalid property value",
        "Page Config production mode shows error when page config has spread properties",
        "Page Config production mode shows error when page config is export from",
        "Page Config production mode shows error when page config is imported and exported",
        "Page Config production mode shows valid error when page config has no init",
        "Page Config production mode shows valid error when page config is a string"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/page-extensions/test/index.test.js": {
      "passed": [
        "Page Extensions production mode should throw if pageExtensions has invalid extensions",
        "Page Extensions production mode should throw if pageExtensions is an empty array"
      ],
      "failed": [
        "Page Extensions production mode should not throw if .d.ts file inside the pages folder",
        "Page Extensions production mode should use the default pageExtensions if set to undefined"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/plugin-mdx-rs/test/index.test.js": {
      "passed": [
        "MDX-rs Configuration MDX-rs Plugin support should render an MDX page correctly",
        "MDX-rs Configuration MDX-rs Plugin support should render an MDX page with component correctly",
        "MDX-rs Configuration MDX-rs Plugin support should render an MDX page with globally provided components (from `mdx-components.js`) correctly",
        "MDX-rs Configuration MDX-rs Plugin support with mdx transform options should render an MDX page correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/polyfilling-minimal/test/index.test.js": {
      "passed": [],
      "failed": [
        "Polyfilling (minimal) production mode should compile successfully"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/polyfills/test/index.test.js": {
      "passed": [
        "Polyfills production mode should alias fetch",
        "Polyfills production mode should allow using process.env when there is an element with `id` of `process`",
        "Polyfills production mode should contain generated page count in output"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/port-env-var/test/index.test.js": {
      "passed": [
        "PORT environment variable production mode should serve on the configured port"
      ],
      "failed": [],
      "pending": [
        "PORT environment variable development mode should serve on the configured port"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/preload-viewport/test/index.test.js": {
      "passed": [
        "Prefetching Links in viewport production mode should correctly omit pre-generated dynamic pages from SSG manifest",
        "Prefetching Links in viewport production mode should handle timed out prefetch correctly",
        "Prefetching Links in viewport production mode should not have unhandledRejection when failing to prefetch on link",
        "Prefetching Links in viewport production mode should not prefetch when prefetch is explicitly set to false",
        "Prefetching Links in viewport production mode should not prefetch with bot UA"
      ],
      "failed": [
        "Prefetching Links in viewport production mode should de-dupe inflight SSG requests",
        "Prefetching Links in viewport production mode should inject a <script> tag when onMouseEnter (even with invalid ref)",
        "Prefetching Links in viewport production mode should inject script on hover with prefetching disabled",
        "Prefetching Links in viewport production mode should inject script on hover with prefetching disabled and fetch data",
        "Prefetching Links in viewport production mode should not duplicate prefetches",
        "Prefetching Links in viewport production mode should not prefetch already loaded scripts",
        "Prefetching Links in viewport production mode should not re-prefetch for an already prefetched page",
        "Prefetching Links in viewport production mode should prefetch data files",
        "Prefetching Links in viewport production mode should prefetch data files when mismatched",
        "Prefetching Links in viewport production mode should prefetch rewritten href with link in viewport onload",
        "Prefetching Links in viewport production mode should prefetch with a different asPath for a prefetched page",
        "Prefetching Links in viewport production mode should prefetch with link in viewport and inject script on hover",
        "Prefetching Links in viewport production mode should prefetch with link in viewport on scroll",
        "Prefetching Links in viewport production mode should prefetch with link in viewport onload",
        "Prefetching Links in viewport production mode should prefetch with link in viewport when href changes",
        "Prefetching Links in viewport production mode should prefetch with non-bot UA"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-export/test/index.test.js": {
      "passed": [
        "SSG Prerender export production mode export mode should copy prerender files and honor exportTrailingSlash"
      ],
      "failed": [
        "SSG Prerender export production mode export mode should navigate between pages successfully"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-fallback-encoding/test/index.test.js": {
      "passed": [
        "Fallback path encoding production mode should handle non-prerendered paths correctly",
        "Fallback path encoding production mode should output paths correctly",
        "Fallback path encoding production mode should render correctly in the browser for prerender paths",
        "Fallback path encoding production mode should respond with the prerendered data correctly",
        "Fallback path encoding production mode should respond with the prerendered pages correctly"
      ],
      "failed": [
        "Fallback path encoding production mode should navigate client-side correctly with interpolating",
        "Fallback path encoding production mode should navigate client-side correctly with string href"
      ],
      "pending": [
        "Fallback path encoding development mode should navigate client-side correctly with interpolating",
        "Fallback path encoding development mode should navigate client-side correctly with string href",
        "Fallback path encoding development mode should render correctly in the browser for prerender paths",
        "Fallback path encoding development mode should respond with the prerendered data correctly",
        "Fallback path encoding development mode should respond with the prerendered pages correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-invalid-catchall-params/test/index.test.js": {
      "passed": [
        "Invalid Prerender Catchall Params production mode should fail the build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-invalid-paths/test/index.test.js": {
      "passed": [
        "Legacy Prerender production mode handles old getStaticParams should fail the build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-no-revalidate/test/index.test.js": {
      "passed": [
        "SSG Prerender No Revalidate production mode [/] should not revalidate /_next/data when set to false",
        "SSG Prerender No Revalidate production mode [/] should not revalidate when set to false",
        "SSG Prerender No Revalidate production mode [/named] should not revalidate /_next/data when set to false",
        "SSG Prerender No Revalidate production mode [/named] should not revalidate when set to false",
        "SSG Prerender No Revalidate production mode [/nested/named] should not revalidate /_next/data when set to false",
        "SSG Prerender No Revalidate production mode [/nested/named] should not revalidate when set to false",
        "SSG Prerender No Revalidate production mode [/nested] should not revalidate /_next/data when set to false",
        "SSG Prerender No Revalidate production mode [/nested] should not revalidate when set to false"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-preview/test/index.test.js": {
      "passed": [],
      "failed": [
        "Prerender Preview Mode production mode should compile successfully",
        "Prerender Preview Mode production mode should enable preview mode",
        "Prerender Preview Mode production mode should expire cookies with a maxAge",
        "Prerender Preview Mode production mode should not return fallback page on preview request",
        "Prerender Preview Mode production mode should pass the preview data to API routes",
        "Prerender Preview Mode production mode should pass undefined to API routes when not in preview",
        "Prerender Preview Mode production mode should return cookies to be expired on reset request",
        "Prerender Preview Mode production mode should return cookies to be expired on reset request with path specified",
        "Prerender Preview Mode production mode should return correct caching headers for data preview request",
        "Prerender Preview Mode production mode should return prerendered page on first request",
        "Prerender Preview Mode production mode should return prerendered page on second request",
        "Prerender Preview Mode production mode should set custom path cookies",
        "Prerender Preview Mode production mode should start production application",
        "Prerender Preview Mode production mode should throw error when setting too large of preview data"
      ],
      "pending": [
        "Prerender Preview Mode development mode should enable preview mode",
        "Prerender Preview Mode development mode should fetch live static props with preview active",
        "Prerender Preview Mode development mode should fetch prerendered data",
        "Prerender Preview Mode development mode should fetch preview data on CST",
        "Prerender Preview Mode development mode should fetch preview data on SSR",
        "Prerender Preview Mode development mode should return cookies to be expired after dev server reboot",
        "Prerender Preview Mode development mode should start development application",
        "Prerender Preview Mode development mode should start the client-side browser"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender-revalidate/test/index.test.js": {
      "passed": [
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/named] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/named] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/nested/named] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/nested/named] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/nested] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate [regression] production mode and incremental cache size exceeded production mode [/nested] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/named] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/named] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/nested/named] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/nested/named] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/nested] should regenerate /_next/data when revalidate time exceeded",
        "SSG Prerender Revalidate production mode [/nested] should regenerate page when revalidate time exceeded",
        "SSG Prerender Revalidate production mode should return cache-control header on 304 status"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/prerender/test/index.test.js": {
      "passed": [
        "SSG Prerender development mode getStaticPaths should not cache getStaticPaths errors",
        "SSG Prerender development mode getStaticPaths should work with firebase import and getStaticPaths"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/preview-fallback/test/index.test.js": {
      "passed": [
        "Preview mode with fallback pages production mode should get preview cookie correctly",
        "Preview mode with fallback pages production mode should not write preview dynamic SSG page to cache no fallback",
        "Preview mode with fallback pages production mode should not write preview dynamic prerendered SSG page to cache no fallback",
        "Preview mode with fallback pages production mode should not write preview dynamic prerendered SSG page to cache with fallback",
        "Preview mode with fallback pages production mode should not write preview index SSG page to cache"
      ],
      "failed": [
        "Preview mode with fallback pages production mode should not write preview dynamic non-prerendered SSG page to cache with fallback"
      ],
      "pending": [
        "Preview mode with fallback pages development mode should get preview cookie correctly",
        "Preview mode with fallback pages development mode should not write preview dynamic SSG page to cache no fallback",
        "Preview mode with fallback pages development mode should not write preview dynamic non-prerendered SSG page to cache with fallback",
        "Preview mode with fallback pages development mode should not write preview dynamic prerendered SSG page to cache no fallback",
        "Preview mode with fallback pages development mode should not write preview dynamic prerendered SSG page to cache with fallback",
        "Preview mode with fallback pages development mode should not write preview index SSG page to cache"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/production-browser-sourcemaps/test/index.test.js": {
      "passed": [],
      "failed": [
        "Production browser sourcemaps production mode Server support correctly generated the source map",
        "Production browser sourcemaps production mode Server support includes sourcemaps for all browser files"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/production-build-dir/test/index.test.js": {
      "passed": [
        "Production Custom Build Directory production mode With basic usage should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/production-config/test/index.test.js": {
      "passed": [
        "Production Config Usage production mode env should allow __ within env key",
        "Production Config Usage production mode env should fail with NEXT_RUNTIME in env key",
        "Production Config Usage production mode env should fail with NODE_ in env key",
        "Production Config Usage production mode env should fail with leading __ in env key",
        "Production Config Usage production mode with generateBuildId should add the custom buildid"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/production-nav/test/index.test.js": {
      "passed": [],
      "failed": [
        "Production Usage production mode should navigate forward and back correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/production-start-no-build/test/index.test.js": {
      "passed": [
        "Production Usage without production build should show error when there is no production build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/query-with-encoding/test/index.test.js": {
      "passed": [
        "Query String with Encoding production mode new line should have correct query on Router#push",
        "Query String with Encoding production mode new line should have correct query on SSR",
        "Query String with Encoding production mode new line should have correct query on complex client-side <Link>",
        "Query String with Encoding production mode new line should have correct query on simple client-side <Link>",
        "Query String with Encoding production mode percent should have correct query on Router#push",
        "Query String with Encoding production mode percent should have correct query on SSR",
        "Query String with Encoding production mode percent should have correct query on complex client-side <Link>",
        "Query String with Encoding production mode percent should have correct query on simple client-side <Link>",
        "Query String with Encoding production mode plus should have correct query on Router#push",
        "Query String with Encoding production mode plus should have correct query on SSR",
        "Query String with Encoding production mode plus should have correct query on complex client-side <Link>",
        "Query String with Encoding production mode plus should have correct query on simple client-side <Link>",
        "Query String with Encoding production mode trailing space should have correct query on Router#push",
        "Query String with Encoding production mode trailing space should have correct query on SSR",
        "Query String with Encoding production mode trailing space should have correct query on complex client-side <Link>",
        "Query String with Encoding production mode trailing space should have correct query on simple client-side <Link>"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/re-export-all-exports-from-page-disallowed/test/index.test.js": {
      "passed": [],
      "failed": [
        "Re-export all exports from page is disallowed production mode builds without error when no `export * from \"...\"` is used in pages",
        "Re-export all exports from page is disallowed production mode shows error when a page re-export all exports"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/react-current-version/test/index.test.js": {
      "passed": [
        "Basics default setting dev hydrates correctly for normal page",
        "Basics default setting dev no warnings for image related link props",
        "Basics default setting dev should contain dynamicIds in next data for dynamic imports",
        "Basics default setting dev should only render once in SSR",
        "Basics default setting dev useId() values should match on hydration",
        "Basics production mode default setting prod hydrates correctly for normal page",
        "Basics production mode default setting prod no warnings for image related link props",
        "Basics production mode default setting prod should contain dynamicIds in next data for dynamic imports",
        "Basics production mode default setting prod should only render once in SSR",
        "Basics production mode default setting prod useId() values should match on hydration",
        "Concurrent mode in the experimental-edge runtime dev <RouteAnnouncer /> should not have the initial route announced",
        "Concurrent mode in the experimental-edge runtime dev flushes styled-jsx styles as the page renders",
        "Concurrent mode in the experimental-edge runtime dev should not have invalid config warning",
        "Concurrent mode in the nodejs runtime dev <RouteAnnouncer /> should not have the initial route announced",
        "Concurrent mode in the nodejs runtime dev flushes styled-jsx styles as the page renders",
        "Concurrent mode in the nodejs runtime dev should not have invalid config warning",
        "production mode Concurrent mode in the experimental-edge runtime prod <RouteAnnouncer /> should not have the initial route announced",
        "production mode Concurrent mode in the experimental-edge runtime prod flushes styled-jsx styles as the page renders",
        "production mode Concurrent mode in the experimental-edge runtime prod should not have invalid config warning",
        "production mode Concurrent mode in the nodejs runtime prod <RouteAnnouncer /> should not have the initial route announced",
        "production mode Concurrent mode in the nodejs runtime prod flushes styled-jsx styles as the page renders",
        "production mode Concurrent mode in the nodejs runtime prod should not have invalid config warning"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/react-profiling-mode/test/index.test.js": {
      "passed": [
        "React Profiling Mode production mode without config enabled should not have used the react-dom profiling bundle"
      ],
      "failed": [
        "React Profiling Mode production mode with config enabled should have used the react-dom profiling bundle for client component",
        "React Profiling Mode production mode with config enabled should have used the react-dom profiling bundle for pages",
        "React Profiling Mode production mode with config enabled should have used the react-dom profiling bundle for server component"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/react-streaming/test/index.test.js": {
      "passed": [
        "production mode streaming prod prod should not stream to crawlers or google pagerender bot",
        "production mode streaming prod prod should render fallback if error raised from suspense during streaming",
        "production mode streaming prod prod should support streaming for fizz response",
        "streaming dev dev should not stream to crawlers or google pagerender bot",
        "streaming dev dev should render 500 error correctly",
        "streaming dev dev should render fallback if error raised from suspense during streaming",
        "streaming dev dev should support streaming for fizz response"
      ],
      "failed": [
        "production mode streaming prod prod should render 500 error correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/read-only-source-hmr/test/index.test.js": {
      "passed": [
        "Read-only source HMR should detect a new page",
        "Read-only source HMR should detect changes to a page",
        "Read-only source HMR should handle page deletion and subsequent recreation"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/relay-graphql-swc-multi-project/test/index.test.js": {
      "passed": [
        "Relay Compiler Transform - Multi Project Config production mode project-a should resolve index page correctly",
        "Relay Compiler Transform - Multi Project Config production mode project-b should resolve index page correctly"
      ],
      "failed": [],
      "pending": [
        "Relay Compiler Transform - Multi Project Config development mode project-a should resolve index page correctly",
        "Relay Compiler Transform - Multi Project Config development mode project-b should resolve index page correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/relay-graphql-swc-single-project/test/index.test.js": {
      "passed": [
        "Relay Compiler Transform - Single Project Config production mode should resolve index page correctly"
      ],
      "failed": [],
      "pending": [
        "Relay Compiler Transform - Single Project Config development mode should resolve index page correctly"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/render-error-on-module-error/test/index.test.js": {
      "passed": [],
      "failed": ["Module Init Error production mode should render error page"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/render-error-on-top-level-error/with-get-initial-props/test/index.test.js": {
      "passed": [],
      "failed": [
        "Top Level Error production mode should render error page with getInitialProps"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/render-error-on-top-level-error/without-get-initial-props/test/index.test.js": {
      "passed": [],
      "failed": ["Top Level Error production mode should render error page"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/repeated-slashes/test/index.test.js": {
      "passed": [
        "404 handling custom _error next dev should handle backslashes correctly",
        "404 handling custom _error next dev should handle double slashes correctly",
        "404 handling custom _error next dev should handle double slashes correctly with encoded",
        "404 handling custom _error next dev should handle double slashes correctly with encoded and hash",
        "404 handling custom _error next dev should handle double slashes correctly with encoded and query",
        "404 handling custom _error next dev should handle double slashes correctly with hash",
        "404 handling custom _error next dev should handle double slashes correctly with query",
        "404 handling custom _error next dev should handle mixed backslashes/forward slashes correctly",
        "404 handling custom _error next dev should handle slashes in next/link correctly",
        "404 handling custom _error next dev should handle slashes in router push correctly",
        "404 handling custom _error next dev should have no error from encoded slashes in router push",
        "404 handling custom _error next dev should normalize repeated slashes in redirects correctly",
        "404 handling custom _error production mode next export should handle backslashes correctly",
        "404 handling custom _error production mode next export should handle double slashes correctly",
        "404 handling custom _error production mode next export should handle double slashes correctly with encoded",
        "404 handling custom _error production mode next export should handle double slashes correctly with encoded and hash",
        "404 handling custom _error production mode next export should handle double slashes correctly with encoded and query",
        "404 handling custom _error production mode next export should handle double slashes correctly with hash",
        "404 handling custom _error production mode next export should handle double slashes correctly with query",
        "404 handling custom _error production mode next export should handle mixed backslashes/forward slashes correctly",
        "404 handling custom _error production mode next export should handle slashes in next/link correctly",
        "404 handling custom _error production mode next start should handle backslashes correctly",
        "404 handling custom _error production mode next start should handle double slashes correctly",
        "404 handling custom _error production mode next start should handle double slashes correctly with encoded",
        "404 handling custom _error production mode next start should handle double slashes correctly with encoded and hash",
        "404 handling custom _error production mode next start should handle double slashes correctly with encoded and query",
        "404 handling custom _error production mode next start should handle double slashes correctly with hash",
        "404 handling custom _error production mode next start should handle double slashes correctly with query",
        "404 handling custom _error production mode next start should handle mixed backslashes/forward slashes correctly",
        "404 handling custom _error production mode next start should handle slashes in next/link correctly",
        "404 handling custom _error production mode next start should normalize repeated slashes in redirects correctly",
        "404 handling pages/404 production mode next dev should handle backslashes correctly",
        "404 handling pages/404 production mode next dev should handle double slashes correctly",
        "404 handling pages/404 production mode next dev should handle double slashes correctly with encoded",
        "404 handling pages/404 production mode next dev should handle double slashes correctly with encoded and hash",
        "404 handling pages/404 production mode next dev should handle double slashes correctly with encoded and query",
        "404 handling pages/404 production mode next dev should handle double slashes correctly with hash",
        "404 handling pages/404 production mode next dev should handle double slashes correctly with query",
        "404 handling pages/404 production mode next dev should handle mixed backslashes/forward slashes correctly",
        "404 handling pages/404 production mode next dev should handle slashes in next/link correctly",
        "404 handling pages/404 production mode next dev should handle slashes in router push correctly",
        "404 handling pages/404 production mode next dev should have no error from encoded slashes in router push",
        "404 handling pages/404 production mode next dev should normalize repeated slashes in redirects correctly",
        "404 handling pages/404 production mode production mode next export should handle backslashes correctly",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly with encoded",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly with encoded and hash",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly with encoded and query",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly with hash",
        "404 handling pages/404 production mode production mode next export should handle double slashes correctly with query",
        "404 handling pages/404 production mode production mode next export should handle mixed backslashes/forward slashes correctly",
        "404 handling pages/404 production mode production mode next export should handle slashes in next/link correctly",
        "404 handling pages/404 production mode production mode next start should handle backslashes correctly",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly with encoded",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly with encoded and hash",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly with encoded and query",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly with hash",
        "404 handling pages/404 production mode production mode next start should handle double slashes correctly with query",
        "404 handling pages/404 production mode production mode next start should handle mixed backslashes/forward slashes correctly",
        "404 handling pages/404 production mode production mode next start should handle slashes in next/link correctly",
        "404 handling pages/404 production mode production mode next start should normalize repeated slashes in redirects correctly"
      ],
      "failed": [
        "404 handling custom _error production mode next export should handle slashes in router push correctly",
        "404 handling custom _error production mode next export should have no error from encoded slashes in router push",
        "404 handling custom _error production mode next start should handle slashes in router push correctly",
        "404 handling custom _error production mode next start should have no error from encoded slashes in router push",
        "404 handling pages/404 production mode production mode next export should handle slashes in router push correctly",
        "404 handling pages/404 production mode production mode next export should have no error from encoded slashes in router push",
        "404 handling pages/404 production mode production mode next start should handle slashes in router push correctly",
        "404 handling pages/404 production mode production mode next start should have no error from encoded slashes in router push"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/required-server-files-ssr-404/test/index.test.js": {
      "passed": [
        "Required Server Files production mode should bubble error correctly for gip page",
        "Required Server Files production mode should bubble error correctly for gsp page",
        "Required Server Files production mode should bubble error correctly for gssp page",
        "Required Server Files production mode should handle 404s properly",
        "Required Server Files production mode should match the index page correctly",
        "Required Server Files production mode should match the root dynamic page correctly",
        "Required Server Files production mode should normalize catch-all rewrite query values correctly",
        "Required Server Files production mode should normalize optional values correctly for API page",
        "Required Server Files production mode should normalize optional values correctly for SSG page",
        "Required Server Files production mode should normalize optional values correctly for SSP page",
        "Required Server Files production mode should not apply trailingSlash redirect",
        "Required Server Files production mode should output required-server-files manifest correctly",
        "Required Server Files production mode should render SSR page correctly",
        "Required Server Files production mode should render SSR page correctly with x-matched-path",
        "Required Server Files production mode should render dynamic SSR page correctly",
        "Required Server Files production mode should render dynamic SSR page correctly with x-matched-path",
        "Required Server Files production mode should render fallback optional catch-all route correctly with x-matched-path and routes-matches",
        "Required Server Files production mode should render fallback page correctly",
        "Required Server Files production mode should render fallback page correctly with x-matched-path and routes-matches",
        "Required Server Files production mode should return data correctly with x-matched-path",
        "Required Server Files production mode should return data correctly with x-matched-path for optional catch-all route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/revalidate-as-path/test/index.test.js": {
      "passed": [
        "Revalidate asPath Normalizing production mode should render with correct asPath with / requested",
        "Revalidate asPath Normalizing production mode should render with correct asPath with /_next/data /another/index requested",
        "Revalidate asPath Normalizing production mode should render with correct asPath with /_next/data /index requested",
        "Revalidate asPath Normalizing production mode should render with correct asPath with /another/index requested"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/rewrite-with-browser-history/test/index.test.js": {
      "passed": [],
      "failed": [
        "rewrites persist with browser history actions production mode back-button should go back to rewritten path successfully"
      ],
      "pending": [
        "rewrites persist with browser history actions development mode back-button should go back to rewritten path successfully"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/integration/rewrites-client-resolving/test/index.test.js": {
      "passed": [
        "Client-side rewrites resolving production mode should break rewrites chain after matching /category",
        "Client-side rewrites resolving production mode should break rewrites chain when normal page matches"
      ],
      "failed": [
        "Client-side rewrites resolving production mode should break rewrites chain when dynamic catch-all route matches",
        "Client-side rewrites resolving production mode should break rewrites chain when dynamic catch-all route multi-level matches",
        "Client-side rewrites resolving production mode should break rewrites chain when dynamic route matches"
      ],
      "pending": [
        "Client-side rewrites resolving development mode should break rewrites chain after matching /category",
        "Client-side rewrites resolving development mode should break rewrites chain when dynamic catch-all route matches",
        "Client-side rewrites resolving development mode should break rewrites chain when dynamic catch-all route multi-level matches",
        "Client-side rewrites resolving development mode should break rewrites chain when dynamic route matches",
        "Client-side rewrites resolving development mode should break rewrites chain when normal page matches"
      ],
      "flakey": [],
      "runtimeError": false
    }
  },
  "rules": {
    "include": [
      "test/integration/**/*.test.{t,j}s{,x}",
      "test/e2e/**/*.test.{t,j}s{,x}",
      "test/production/**/*.test.{t,j}s{,x}"
    ],
    "exclude": []
  }
}
