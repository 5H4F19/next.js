{
  "packages/font/src/google/find-font-files-in-css.test.ts": {
    "passed": [
      "findFontFilesInCss should find all font files and preload requested subsets",
      "findFontFilesInCss should not return duplicate font files when several variants use the same font file"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/google/get-font-axes.test.ts": {
    "passed": [
      "getFontAxes errors Invalid axes value",
      "getFontAxes errors Invalid value in axes array",
      "getFontAxes errors Setting axes on font without definable axes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/google/loader.test.ts": {
    "passed": [
      "next/font/google loader URL from options Albert_Sans",
      "next/font/google loader URL from options Ballet",
      "next/font/google loader URL from options Fraunces",
      "next/font/google loader URL from options Inter",
      "next/font/google loader URL from options Molle",
      "next/font/google loader URL from options Nabla",
      "next/font/google loader URL from options Oooh_Baby",
      "next/font/google loader URL from options Poppins",
      "next/font/google loader URL from options Roboto",
      "next/font/google loader URL from options Roboto Mono",
      "next/font/google loader URL from options Roboto_Flex",
      "next/font/google loader URL from options Source_Sans_3"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/google/sort-fonts-variant-values.test.ts": {
    "passed": [
      "sortFontsVariantValues should correctly compare and return result for comma-separated values",
      "sortFontsVariantValues should correctly compare and return result for plain integer values",
      "sortFontsVariantValues should sort an array of plain integer values correctly",
      "sortFontsVariantValues should sort an array of values with comma-separated values correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/google/validate-google-font-function-call.test.ts": {
    "passed": [
      "validateFontFunctionCall errors Invalid display value",
      "validateFontFunctionCall errors Invalid subset in call",
      "validateFontFunctionCall errors Missing function name",
      "validateFontFunctionCall errors Missing subsets in config and call",
      "validateFontFunctionCall errors Missing weight for non variable font",
      "validateFontFunctionCall errors Setting axes on non variable font",
      "validateFontFunctionCall errors Unknown font",
      "validateFontFunctionCall errors Unknown style",
      "validateFontFunctionCall errors Unknown weight",
      "validateFontFunctionCall errors Variable in weight array"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/local/loader.test.ts": {
    "passed": [
      "next/font/local loader generated CSS Default CSS",
      "next/font/local loader generated CSS Multiple styles default weight",
      "next/font/local loader generated CSS Multiple weights default style",
      "next/font/local loader generated CSS Other properties",
      "next/font/local loader generated CSS Weight and style"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/local/pick-font-file-for-fallback-generation.test.ts": {
    "passed": [
      "pickFontFileForFallbackGeneration Invalid variable weight in array",
      "pickFontFileForFallbackGeneration should error on invalid weight in array",
      "pickFontFileForFallbackGeneration should pick the thinner weight if both have the same distance to 400",
      "pickFontFileForFallbackGeneration should pick the weight closest to 400",
      "pickFontFileForFallbackGeneration should pick variable range closest to 400",
      "pickFontFileForFallbackGeneration should prefer normal style over italic"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/font/src/local/validate-local-font-function-call.test.ts": {
    "passed": [
      "validateLocalFontFunctionCall Empty src array",
      "validateLocalFontFunctionCall Invalid declaration",
      "validateLocalFontFunctionCall Invalid display value",
      "validateLocalFontFunctionCall Invalid file extension",
      "validateLocalFontFunctionCall Missing src",
      "validateLocalFontFunctionCall Not using default export"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/build/normalize-catchall-routes.test.ts": {
    "passed": [
      "normalizeCatchallRoutes should add the catch-all route to all matched paths at the root",
      "normalizeCatchallRoutes should add the catch-all route to all matched paths when nested",
      "normalizeCatchallRoutes should not add the catch-all route to a path that has a @children slot",
      "normalizeCatchallRoutes should not add the catch-all route to non-catchall segments that are more specific",
      "normalizeCatchallRoutes should not add the catch-all route to segments that have a more specific [dynamicRoute]",
      "normalizeCatchallRoutes should not add the catch-all route to segments that have a more specific default",
      "normalizeCatchallRoutes should not add the catch-all to the interception route"
    ],
    "failed": [],
    "pending": [
      "normalizeCatchallRoutes should only match optional catch-all paths to the \"index\" of a segment"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/build/webpack/loaders/metadata/resolve-route-data.test.ts": {
    "passed": [
      "resolveRouteData resolveRobots should error with ts when specify both wildcard userAgent and specific userAgent",
      "resolveRouteData resolveRobots should resolve robots.txt",
      "resolveRouteData resolveSitemap should resolve sitemap.xml",
      "resolveRouteData resolveSitemap should resolve sitemap.xml with alternates"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/build/webpack/plugins/next-types-plugin/index.test.ts": {
    "passed": [
      "next-types-plugin should generate correct base import path",
      "next-types-plugin should generate correct base import path for custom projects",
      "next-types-plugin should generate correct base import path for nx monorepos"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/navigation.test.ts": {
    "passed": [
      "next/navigation should be able to construct URLSearchParams from ReadonlyURLSearchParams"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/promise-queue.test.ts": {
    "passed": [
      "PromiseQueue should allow bumping a promise to be next in the queue",
      "PromiseQueue should limit the number of concurrent promises"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/redirect.test.ts": {
    "passed": ["test should throw a redirect error"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/apply-router-state-patch-to-tree.test.tsx": {
    "passed": ["applyRouterStatePatchToTree should apply a patch to the tree"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/clear-cache-node-data-for-segment-path.test.tsx": {
    "passed": [
      "clearCacheNodeDataForSegmentPath should clear the data property"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/compute-changed-path.test.ts": {
    "passed": ["computeChangedPath should return the correct path"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/create-href-from-url.test.ts": {
    "passed": [
      "createHrefFromUrl adds hash",
      "createHrefFromUrl adds pathname",
      "createHrefFromUrl adds pathname, searchParams, and hash",
      "createHrefFromUrl adds searchParams",
      "createHrefFromUrl returns a string"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/create-initial-router-state.test.tsx": {
    "passed": [
      "createInitialRouterState should return the correct initial router state"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/create-router-cache-key.test.ts": {
    "passed": [
      "createRouterCacheKey should support catch all segment",
      "createRouterCacheKey should support dynamic segment",
      "createRouterCacheKey should support string segment"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/fill-cache-with-new-subtree-data.test.tsx": {
    "passed": [
      "fillCacheWithNewSubtreeData should apply rsc and head property"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/fill-lazy-items-till-leaf-with-head.test.tsx": {
    "passed": [
      "fillLazyItemsTillLeafWithHead should fill lazy items till leaf with head"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/get-segment-value.test.ts": {
    "passed": [
      "getSegmentValue should support catch all segment",
      "getSegmentValue should support dynamic segment",
      "getSegmentValue should support string segment"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/invalidate-cache-below-flight-segmentpath.test.tsx": {
    "passed": [
      "invalidateCacheBelowFlightSegmentPath should invalidate cache below flight segment path"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/invalidate-cache-by-router-state.test.tsx": {
    "passed": [
      "invalidateCacheByRouterState should invalidate the cache by router state"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/is-navigating-to-new-root-layout.test.ts": {
    "passed": [
      "isNavigatingToNewRootLayout should return false if there is no new root layout",
      "isNavigatingToNewRootLayout should return true if there is a mismatch between the root layouts"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/reducers/find-head-in-cache.test.tsx": {
    "passed": ["findHeadInCache should find the head"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/client/components/router-reducer/should-hard-navigate.test.tsx": {
    "passed": [
      "shouldHardNavigate should return false if segments are dynamic and match",
      "shouldHardNavigate should return false if the segments match",
      "shouldHardNavigate should return true if segments are dynamic and mismatch"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/diagnostics/build-diagnostics.test.ts": {
    "passed": [
      "build-diagnostics records build diagnostics to a file correctly",
      "build-diagnostics records framework version to framework.json correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/batcher.test.ts": {
    "passed": [
      "Batcher batch should batch multiple calls to the same key",
      "Batcher batch should execute the work function immediately",
      "Batcher batch should not batch calls to different keys",
      "Batcher batch should use the cacheKeyFn to generate cache keys",
      "Batcher batch should use the schedulerFn to schedule work"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/find-config.test.ts": {
    "passed": [
      "findConfig() should load config properly from *.config.* file (type: \"commonjs\", config: awsome.config.cjs)",
      "findConfig() should load config properly from *.config.* file (type: \"commonjs\", config: awsome.config.js)",
      "findConfig() should load config properly from *.config.* file (type: \"commonjs\", config: awsome.config.mjs)",
      "findConfig() should load config properly from *.config.* file (type: \"module\", config: awsome.config.cjs)",
      "findConfig() should load config properly from *.config.* file (type: \"module\", config: awsome.config.js)",
      "findConfig() should load config properly from *.config.* file (type: \"module\", config: awsome.config.mjs)",
      "findConfig() should load config properly from the config in package.json)"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/format-server-error.test.ts": {
    "passed": ["formatServerError should not append message several times"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/metadata/is-metadata-route.test.ts": {
    "passed": [
      "getExtensionRegexString with dynamic extensions should match dynamic multi-routes with dynamic extensions",
      "getExtensionRegexString with dynamic extensions should return the correct regex",
      "getExtensionRegexString without dynamic extensions should return the correct regex"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/metadata/resolve-metadata.test.ts": {
    "passed": [
      "accumulateMetadata alternate should support URL alternate canonical with search params",
      "accumulateMetadata alternate should support alternate descriptors",
      "accumulateMetadata alternate should support string alternate",
      "accumulateMetadata alternate should support string alternate canonical with search params",
      "accumulateMetadata icon should resolve icons.apple",
      "accumulateMetadata icon should resolve icons.icon correctly",
      "accumulateMetadata itunes should resolve relative url starting with ./ with pathname for itunes.appArgument",
      "accumulateMetadata openGraph and twitter should convert string or URL images field to array, not only for basic og type",
      "accumulateMetadata openGraph and twitter should fill only the existing props from openGraph to twitter",
      "accumulateMetadata openGraph and twitter should fill twitter with partial existing openGraph metadata",
      "accumulateMetadata openGraph and twitter should inherit metadata title description into openGraph or twitter if they are configured",
      "accumulateMetadata openGraph and twitter should override openGraph or twitter images when current layer specifies social images properties",
      "accumulateMetadata openGraph and twitter should prefer title and description from openGraph rather than metadata for twitter",
      "accumulateMetadata openGraph and twitter should resolve relative url starting with ./ with pathname for openGraph.url",
      "accumulateMetadata title should merge title with page title",
      "accumulateMetadata title should merge title with parent layout ",
      "accumulateMetadata typing should support both sync and async metadata",
      "accumulateViewport themeColor should support string theme color",
      "accumulateViewport themeColor should support theme color descriptors",
      "accumulateViewport viewport should support viewport descriptors"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/metadata/resolvers/resolve-opengraph.test.ts": {
    "passed": [
      "resolveImages should filter out invalid images",
      "resolveImages should not mutate passed images",
      "resolveImages should resolve images"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/metadata/resolvers/resolve-title.test.ts": {
    "passed": [
      "resolveTitle should resolve nullable template as empty string title",
      "resolveTitle should resolve title with template"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/metadata/resolvers/resolve-url.test.ts": {
    "passed": [
      "getSocialImageFallbackMetadataBase fallbackMetadataBase when metadataBase is not present should prefer branch url in preview deployment if presents",
      "getSocialImageFallbackMetadataBase fallbackMetadataBase when metadataBase is not present should return local url in local build mode",
      "getSocialImageFallbackMetadataBase fallbackMetadataBase when metadataBase is not present should return localhost url in local dev mode",
      "getSocialImageFallbackMetadataBase fallbackMetadataBase when metadataBase is not present should return project production url in production deployment",
      "getSocialImageFallbackMetadataBase fallbackMetadataBase when metadataBase is not present should return vercel url in preview deployment if only it presents",
      "metadata: resolveUrl should compose with metadataBase when url is relative or absolute",
      "metadata: resolveUrl should ignore metadataBase when url is valid URL",
      "metadata: resolveUrl should return null when url is falsy",
      "metadata: resolveUrl should return url itself when metadataBase is null or url is valid URL",
      "resolveAbsoluteUrlWithPathname trailingSlash is false should resolve absolute internal url",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should add trailing slash to absolute internal url",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should add trailing slash to relative url",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should not add trailing slash to absolute internal url with query",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should not add trailing slash to external url",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should not add trailing slash to relative url that matches file pattern",
      "resolveAbsoluteUrlWithPathname trailingSlash is true should not add trailing slash to relative url with query"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/lib/typescript/writeConfigurationDefaults.test.ts": {
    "passed": [
      "writeConfigurationDefaults() appDir applies suggested and mandatory defaults to existing tsconfig.json and logs them",
      "writeConfigurationDefaults() appDir does not warn about disabled strict mode if strict mode was already enabled",
      "writeConfigurationDefaults() appDir with tsconfig extends should not add strictNullChecks if base provides it",
      "writeConfigurationDefaults() appDir with tsconfig extends should replace includes when base is missing appTypes",
      "writeConfigurationDefaults() appDir with tsconfig extends should support empty includes when base provides it"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/after/after-context.test.ts": {
    "passed": [
      "AfterContext does not hang forever if onClose failed",
      "AfterContext runs after() callbacks added within an after()",
      "AfterContext runs after() callbacks from a run() callback that resolves",
      "AfterContext runs after() callbacks from a run() callback that streams",
      "AfterContext runs after() callbacks from a run() callback that throws",
      "AfterContext runs all after() callbacks even if some of them threw",
      "AfterContext throws from after() if onClose is not provided",
      "AfterContext throws from after() if waitUntil is not provided"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/app-render/csrf-protection.test.ts": {
    "passed": [
      "isCsrfOriginAllowed should return false when allowedOrigins contains originDomain with non-matching pattern",
      "isCsrfOriginAllowed should return false when allowedOrigins does not contain originDomain",
      "isCsrfOriginAllowed should return false when allowedOrigins is empty",
      "isCsrfOriginAllowed should return false when allowedOrigins is empty string",
      "isCsrfOriginAllowed should return false when allowedOrigins is undefined",
      "isCsrfOriginAllowed should return true when allowedOrigins contains originDomain",
      "isCsrfOriginAllowed should return true when allowedOrigins contains originDomain with matching pattern"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/app-render/types.test.ts": {
    "passed": [
      "flightRouterStateSchema should not validate an incorrect flight router state",
      "flightRouterStateSchema should validate a correct flight router state"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/base-http/web.test.ts": {
    "passed": [
      "WebNextResponse onClose doesn't track onClose unless enabled",
      "WebNextResponse onClose stream body",
      "WebNextResponse onClose string body"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/config.test.ts": {
    "passed": [
      "loadConfig nextConfig.images defaults should assign a `images.remotePatterns` when using assetPrefix",
      "loadConfig nextConfig.images defaults should not assign a duplicate `images.remotePatterns` value when using assetPrefix"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/dev/parse-version-info.test.ts": {
    "passed": [
      "parse version info installed: 12.0.0, latest: 13.1.1, canary: 13.0.1-canary.0 yields stale-major",
      "parse version info installed: 13.0.0, latest: 12.0.0, canary: 12.0.1-canary.0 yields newer-than-npm",
      "parse version info installed: 13.0.0, latest: 13.1.0, canary: 13.1.1-canary.0 yields stale-minor",
      "parse version info installed: 13.0.0, latest: 13.1.0, canary: invalid yields unknown",
      "parse version info installed: 13.0.0, latest: invalid, canary: 13.0.1-canary.0 yields unknown",
      "parse version info installed: 13.0.1-canary.0, latest: 13.0.0, canary: 13.0.1-canary.1 yields stale-prerelease",
      "parse version info installed: 13.0.1-canary.0, latest: 13.0.0, canary: 13.1.0-canary.0 yields stale-prerelease",
      "parse version info installed: 13.0.1-canary.8, latest: 13.0.0, canary: 13.0.1-canary.7 yields newer-than-npm",
      "parse version info installed: 13.1.0, latest: 13.1.0, canary: 13.1.1-canary.0 yields fresh",
      "parse version info installed: 13.1.1, latest: 13.1.2, canary: 13.1.3-canary.0 yields stale-patch",
      "parse version info installed: 13.1.1-canary.7, latest: 13.1.0, canary: 13.1.1-canary.7 yields fresh",
      "parse version info installed: invalid, latest: 13.0.1, canary: 13.0.1-canary.0 yields unknown"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/i18n-provider.test.ts": {
    "passed": [
      "I18NProvider analyze for pathname / and defaultLocale en",
      "I18NProvider analyze for pathname /another/page and defaultLocale en",
      "I18NProvider analyze for pathname /en and defaultLocale en",
      "I18NProvider analyze for pathname /en-CA and defaultLocale en",
      "I18NProvider analyze for pathname /en-CA/another/page and defaultLocale en",
      "I18NProvider analyze for pathname /en/another/page and defaultLocale en",
      "I18NProvider analyze for pathname /fr and defaultLocale en",
      "I18NProvider analyze for pathname /fr/another/page and defaultLocale en",
      "I18NProvider detectDomainLocale for domain example.ca",
      "I18NProvider detectDomainLocale for domain example.com",
      "I18NProvider detectDomainLocale for domain example.de",
      "I18NProvider detectDomainLocale for domain example.fr",
      "I18NProvider should detect the correct domain locale"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/incremental-cache/shared-revalidate-timings.test.ts": {
    "passed": [
      "SharedRevalidateTimings should clear the in-memory cache",
      "SharedRevalidateTimings should get revalidate timing from in-memory cache",
      "SharedRevalidateTimings should get revalidate timing from prerender manifest if not in cache",
      "SharedRevalidateTimings should return undefined if revalidate timing not found",
      "SharedRevalidateTimings should set revalidate timing in cache"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/interception-routes.test.ts": {
    "passed": [
      "Interception Route helper extractInterceptionRouteInformation should check the segment length",
      "Interception Route helper extractInterceptionRouteInformation should extract correct information",
      "Interception Route helper extractInterceptionRouteInformation should not extract incorrect information",
      "Interception Route helper isInterceptionRouteAppPath should not validate incorrect paths",
      "Interception Route helper isInterceptionRouteAppPath should validate correct paths"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/mock-request.test.ts": {
    "passed": [
      "MockedRequest should have the correct properties",
      "MockedResponse should handle set-cookie headers correctly",
      "MockedResponse should merge headers correctly when calling writeHead",
      "MockedResponse should update the statusMessage after calling writeHead"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/to-route.test.ts": {
    "passed": [
      "toRoute Function should remove trailing `/index`",
      "toRoute Function should remove trailing slash",
      "toRoute Function should return `/` when input is `/index/`",
      "toRoute Function should return `/` when input is `/index`",
      "toRoute Function should return `/` when input is empty",
      "toRoute Function should return `/` when input is only a slash"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/lib/utils.test.ts": {
    "passed": [
      "formatNodeOptions wraps values with spaces in quotes",
      "getFormattedNodeOptionsWithoutInspect handles options with quotes",
      "getFormattedNodeOptionsWithoutInspect handles options with spaces",
      "getFormattedNodeOptionsWithoutInspect ignores unrelated options starting with --inspect-",
      "getFormattedNodeOptionsWithoutInspect removes --inspect option",
      "getFormattedNodeOptionsWithoutInspect removes --inspect option at end of line",
      "getFormattedNodeOptionsWithoutInspect removes --inspect option with parameters",
      "getFormattedNodeOptionsWithoutInspect removes --inspect-brk option",
      "getFormattedNodeOptionsWithoutInspect removes --inspect-brk option with parameters",
      "getParsedDebugAddress supports the flag with an equal sign",
      "getParsedDebugAddress supports the flag without an equal sign",
      "tokenizeArgs splits arguments by spaces",
      "tokenizeArgs supports quoted values"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/load-manifest.test.ts": {
    "passed": [
      "loadManifest should cache the manifest when not already cached",
      "loadManifest should freeze the manifest when caching",
      "loadManifest should load the manifest from the file system when not cached",
      "loadManifest should return the cached manifest when available",
      "loadManifest should throw an error when the manifest file cannot be read"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/node-polyfill-crypto.test.ts": {
    "passed": ["node-polyfill-crypto overwrite crypto"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/absolute-filename-normalizer.test.ts": {
    "passed": [
      "AbsoluteFilenameNormalizer normalizes '<root>/app/basic/(grouped)/endpoint/nested/route.ts' to '/basic/(grouped)/endpoint/nested/route'",
      "AbsoluteFilenameNormalizer normalizes '<root>/pages/basic/endpoint/index.ts' to '/basic/endpoint'",
      "AbsoluteFilenameNormalizer normalizes '<root>/pages/basic/endpoint/nested.ts' to '/basic/endpoint/nested'"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/base-path.test.ts": {
    "passed": [
      "BasePathPathnameNormalizer should throw when provided with a basePath of \"/\"",
      "BasePathPathnameNormalizer should throw when provided with a blank basePath"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/next-data.test.ts": {
    "passed": [
      "NextDataPathnameNormalizer constructor should error when no buildID is provided",
      "NextDataPathnameNormalizer match should return false if the pathname does not start with the prefix",
      "NextDataPathnameNormalizer match should return false if the pathname only ends with `.json`",
      "NextDataPathnameNormalizer match should return true if it matches",
      "NextDataPathnameNormalizer normalize should normalize `/index` to `/`",
      "NextDataPathnameNormalizer normalize should return the same pathname if we are not matched and the pathname does not start with the prefix",
      "NextDataPathnameNormalizer normalize should strip the prefix and the `.json` extension from the pathname when it matches"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/postponed.test.ts": {
    "passed": [
      "PostponedPathnameNormalizer match should match",
      "PostponedPathnameNormalizer match should not match for other pathnames",
      "PostponedPathnameNormalizer normalize should normalize `/index` to `/`",
      "PostponedPathnameNormalizer normalize should normalize when matched",
      "PostponedPathnameNormalizer normalize should not normalize but not matched"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/prefetch-rsc.test.ts": {
    "passed": [
      "PrefetchRSCPathnameNormalizer should match the prefetch rsc pathname",
      "PrefetchRSCPathnameNormalizer should normalize the prefetch rsc index pathname",
      "PrefetchRSCPathnameNormalizer should normalize the prefetch rsc pathname",
      "PrefetchRSCPathnameNormalizer should not match the prefetch rsc pathname with a different suffix"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/prefix.test.ts": {
    "passed": [
      "PrefixPathnameNormalizer match should return false if the pathname does not start with the prefix",
      "PrefixPathnameNormalizer match should return true if the pathname starts with the prefix",
      "PrefixPathnameNormalizer normalize should return the same pathname if we are not matched and the pathname does not start with the prefix",
      "PrefixPathnameNormalizer normalize should strip the prefix from the pathname when it matches",
      "PrefixPathnameNormalizer should throw if the prefix ends with a slash"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/normalizers/request/suffix.test.ts": {
    "passed": [
      "SuffixPathnameNormalizer match should return false if the pathname does not end with `.rsc`",
      "SuffixPathnameNormalizer match should return true if it matches",
      "SuffixPathnameNormalizer normalize should return the same pathname if we are not matched and the pathname does not end with `.rsc`",
      "SuffixPathnameNormalizer normalize should strip the `.rsc` extension from the pathname when it matches"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-managers/default-route-matcher-manager.test.ts": {
    "passed": [
      "DefaultRouteMatcherManager calls the locale route matcher when one is provided",
      "DefaultRouteMatcherManager can handle locale aware matchers for /en-US/some/path and locale en-US",
      "DefaultRouteMatcherManager can handle locale aware matchers for /nl-NL/some/path and locale nl-NL",
      "DefaultRouteMatcherManager can handle locale aware matchers for /some/path and locale {\"inferredFromDefault\": false, \"pathname\": \"/some/path\"}",
      "DefaultRouteMatcherManager will match a route that is not locale aware when it was inferred from the default locale",
      "DefaultRouteMatcherManager will not error and not match when no matchers are provided",
      "DefaultRouteMatcherManager will throw an error when used before it has been reloaded"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/app-page-route-matcher-provider.test.ts": {
    "passed": [
      "AppPageRouteMatcherProvider manifest matching returns the correct routes for /",
      "AppPageRouteMatcherProvider manifest matching returns the correct routes for /about",
      "AppPageRouteMatcherProvider manifest matching returns the correct routes for /dashboard/users",
      "AppPageRouteMatcherProvider manifest matching returns the correct routes for /dashboard/users/[id]",
      "AppPageRouteMatcherProvider returns no routes with an empty manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/app-route-route-matcher-provider.test.ts": {
    "passed": [
      "AppRouteRouteMatcherProvider manifest matching returns the correct routes for /",
      "AppRouteRouteMatcherProvider manifest matching returns the correct routes for /users",
      "AppRouteRouteMatcherProvider manifest matching returns the correct routes for /users/[id]",
      "AppRouteRouteMatcherProvider returns no routes with an empty manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/dev/dev-app-page-route-matcher-provider.test.ts": {
    "passed": [
      "DevAppPageRouteMatcher filename matching matches the '/(marketing)/about/page' route specified with the provided files",
      "DevAppPageRouteMatcher filename matching matches the '/page' route specified with the provided files",
      "DevAppPageRouteMatcher filename matching matches the '/some/other/page' route specified with the provided files",
      "DevAppPageRouteMatcher returns no routes with an empty filesystem"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/dev/dev-app-route-route-matcher-provider.test.ts": {
    "passed": [
      "DevAppRouteRouteMatcher filename matching matches the '/route' route specified with the provided files",
      "DevAppRouteRouteMatcher filename matching matches the '/some/other/route' route specified with the provided files",
      "DevAppRouteRouteMatcher returns no routes with an empty filesystem"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/dev/dev-pages-api-route-matcher-provider.test.ts": {
    "passed": [
      "DevPagesAPIRouteMatcherProvider filename matching matches the '/api' route specified with the provided files",
      "DevPagesAPIRouteMatcherProvider filename matching matches the '/api/other' route specified with the provided files",
      "DevPagesAPIRouteMatcherProvider filename matching matches the '/api/other/route' route specified with the provided files",
      "DevPagesAPIRouteMatcherProvider returns no routes with an empty filesystem"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/dev/dev-pages-route-matcher-provider.test.ts": {
    "passed": [
      "DevPagesRouteMatcherProvider filename matching matches the '/' route specified with the provided files",
      "DevPagesRouteMatcherProvider filename matching matches the '/some/api/route' route specified with the provided files",
      "DevPagesRouteMatcherProvider filename matching matches the '/some/other/route' route specified with the provided files",
      "DevPagesRouteMatcherProvider filename matching matches the '/some/other/route/index/route' route specified with the provided files",
      "DevPagesRouteMatcherProvider returns no routes with an empty filesystem"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/dev/helpers/file-reader/batched-file-reader.test.ts": {
    "passed": [
      "CachedFileReader will only scan the filesystem a minimal amount of times",
      "CachedFileReader will send an error back only to the correct reader"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/pages-api-route-matcher-provider.test.ts": {
    "passed": [
      "PagesAPIRouteMatcherProvider manifest matching returns the correct routes for /api",
      "PagesAPIRouteMatcherProvider manifest matching returns the correct routes for /api/users",
      "PagesAPIRouteMatcherProvider manifest matching returns the correct routes for /api/users/[id]",
      "PagesAPIRouteMatcherProvider returns no routes with an empty manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/route-matcher-providers/pages-route-matcher-provider.test.ts": {
    "passed": [
      "PagesRouteMatcherProvider locale matching locale has the match for /",
      "PagesRouteMatcherProvider locale matching locale has the match for /404",
      "PagesRouteMatcherProvider locale matching locale has the match for /blog/[slug]",
      "PagesRouteMatcherProvider manifest matching returns the correct routes for /",
      "PagesRouteMatcherProvider manifest matching returns the correct routes for /users",
      "PagesRouteMatcherProvider manifest matching returns the correct routes for /users/[id]",
      "PagesRouteMatcherProvider returns no routes with an empty manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/web/spec-extension/adapters/headers.test.ts": {
    "passed": [
      "HeadersAdapter case-insensitive should handle different case for header names",
      "HeadersAdapter case-insensitive should handle different case for header names when mutated out of band",
      "HeadersAdapter entries should return an iterator of entries",
      "HeadersAdapter forEach should iterate over all entries",
      "HeadersAdapter iterator should iterate over all entries",
      "HeadersAdapter keys should return an iterator of keys",
      "HeadersAdapter sealed should be able to seal a Headers instance",
      "HeadersAdapter sealed should be able to seal a HeadersAdapter and still mutate the original",
      "HeadersAdapter sealed should be able to seal a HeadersAdapter instance",
      "HeadersAdapter should be able to create a new instance from a Headers",
      "HeadersAdapter should be able to create a new instance from a HeadersAdapter",
      "HeadersAdapter should be able to create a new instance from an IncomingHttpHeaders",
      "HeadersAdapter should be able to create a new instance from an object",
      "HeadersAdapter should handle multiple values for a header",
      "HeadersAdapter values should return an iterator of values"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/web/spec-extension/adapters/request-cookies.test.ts": {
    "passed": [
      "RequestCookiesAdapter should be able to create a new instance from a RequestCookies",
      "RequestCookiesAdapter should be able to create a new instance from an empty RequestCookies"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/server/web/utils.test.ts": {
    "passed": [
      "toNodeHeaders should handle a single set-cookie header correctly",
      "toNodeHeaders should handle a single set-cookie header with multiple cookies correctly",
      "toNodeHeaders should handle mixed case set-cookie headers correctly",
      "toNodeHeaders should handle multiple set-cookie headers correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/deep-freeze.test.ts": {
    "passed": [
      "freeze should freeze an array",
      "freeze should freeze an object",
      "freeze should freeze nested arrays",
      "freeze should freeze nested objects",
      "freeze should freeze nested objects and arrays"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/get-hostname.test.ts": {
    "passed": [
      "getHostname from URL should return 127.0.0.1 for http://127.0.0.1",
      "getHostname from URL should return 127.0.0.1 for http://127.0.0.1/",
      "getHostname from URL should return 127.0.0.1 for http://127.0.0.1:3000",
      "getHostname from URL should return 8.8.8.8 for http://8.8.8.8",
      "getHostname from URL should return 8.8.8.8 for http://8.8.8.8/",
      "getHostname from URL should return 8.8.8.8 for http://8.8.8.8:3000",
      "getHostname from URL should return example.com for http://example.com",
      "getHostname from URL should return example.com for http://example.com/",
      "getHostname from URL should return example.com for http://example.com:3000",
      "getHostname from URL should return example.com for https://example.com",
      "getHostname from URL should return example.com for https://example.com/",
      "getHostname from URL should return example.com for https://example.com:3000",
      "getHostname from URL should return localhost for http://localhost",
      "getHostname from URL should return localhost for http://localhost/",
      "getHostname from URL should return localhost for http://localhost:3000",
      "getHostname should return undefined for empty input"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/router/adapters.test.tsx": {
    "passed": [
      "adaptForAppRouterInstance should forward a call to `back()`",
      "adaptForAppRouterInstance should forward a call to `forward()`",
      "adaptForAppRouterInstance should forward a call to `prefetch()`",
      "adaptForAppRouterInstance should forward a call to `push()`",
      "adaptForAppRouterInstance should forward a call to `push()` with options",
      "adaptForAppRouterInstance should forward a call to `reload()`",
      "adaptForAppRouterInstance should forward a call to `replace()`",
      "adaptForAppRouterInstance should forward a call to `replace()` with options"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/router/utils/app-paths.test.ts": {
    "passed": [
      "normalizeRscPath should normalize url with .rsc",
      "normalizeRscPath should normalize url with .rsc and searchparams"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/router/utils/parse-relative-url.test.ts": {
    "passed": [
      "query parsing should parse query string",
      "relative urls should return valid pathname",
      "relative urls should throw for invalid pathname"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/shared/lib/router/utils/route-regex.test.ts": {
    "passed": [
      "getNamedRouteRegex should handle interception markers adjacent to dynamic path segments",
      "getNamedRouteRegex should handle interception markers not adjacent to dynamic path segments",
      "getNamedRouteRegex should handle multi-level interception markers",
      "getNamedRouteRegex should handle optional catch-all dynamic path segments",
      "getNamedRouteRegex should handle optional dynamic path segments",
      "getNamedRouteRegex should match named routes correctly when interception markers are adjacent to dynamic segments",
      "parseParameter should parse a catchall parameter",
      "parseParameter should parse a dynamic parameter",
      "parseParameter should parse a optional catchall parameter",
      "parseParameter should parse a optional parameter",
      "parseParameter should parse non-dynamic parameter"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/trace/report/index.test.ts": {
    "passed": [
      "Trace Reporter JSON reporter should write the trace events to JSON file",
      "Trace Reporter Telemetry reporter should record telemetry event"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "packages/next/src/trace/trace.test.ts": {
    "passed": [
      "Trace Tracer traces a block of code",
      "Trace Worker correctly reports trace data from multiple workers",
      "Trace Worker exports and initializes trace state",
      "Trace Worker trace data is serializable to a worker"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefresh.test.ts": {
    "passed": [
      "ReactRefresh app can edit a component without losing state",
      "ReactRefresh app cyclic dependencies"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefreshLogBox-builtins.test.ts": {
    "passed": [
      "ReactRefreshLogBox app turbo Module not found",
      "ReactRefreshLogBox app turbo Module not found empty import trace",
      "ReactRefreshLogBox app turbo Module not found missing global CSS",
      "ReactRefreshLogBox app turbo Node.js builtins"
    ],
    "failed": [],
    "pending": [
      "ReactRefreshLogBox app default Module not found",
      "ReactRefreshLogBox app default Module not found empty import trace",
      "ReactRefreshLogBox app default Module not found missing global CSS",
      "ReactRefreshLogBox app default Node.js builtins"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefreshLogBox-scss.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "ReactRefreshLogBox scss app scss module pure selector error",
      "ReactRefreshLogBox scss app scss syntax errors"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefreshLogBox.test.ts": {
    "passed": [
      "ReactRefreshLogBox app turbo Call stack count is correct for client error",
      "ReactRefreshLogBox app turbo Call stack count is correct for server error",
      "ReactRefreshLogBox app turbo Can't resolve @import in CSS file",
      "ReactRefreshLogBox app turbo Import trace when module not found in layout",
      "ReactRefreshLogBox app turbo Server component errors should open up in fullscreen",
      "ReactRefreshLogBox app turbo Should not show __webpack_exports__ when exporting anonymous arrow function",
      "ReactRefreshLogBox app turbo Unhandled errors and rejections opens up in the minimized state",
      "ReactRefreshLogBox app turbo boundaries",
      "ReactRefreshLogBox app turbo conversion to class component (1)",
      "ReactRefreshLogBox app turbo css syntax errors",
      "ReactRefreshLogBox app turbo logbox: anchors links in error messages",
      "ReactRefreshLogBox app turbo module init error not shown",
      "ReactRefreshLogBox app turbo server component can recover from error thrown in the module",
      "ReactRefreshLogBox app turbo should hide unrelated frames in stack trace with node:internal calls",
      "ReactRefreshLogBox app turbo should hide unrelated frames in stack trace with unknown anonymous calls",
      "ReactRefreshLogBox app turbo should strip whitespace correctly with newline",
      "ReactRefreshLogBox app turbo unterminated JSX"
    ],
    "failed": [],
    "pending": [
      "ReactRefreshLogBox app default Call stack count is correct for client error",
      "ReactRefreshLogBox app default Call stack count is correct for server error",
      "ReactRefreshLogBox app default Can't resolve @import in CSS file",
      "ReactRefreshLogBox app default Import trace when module not found in layout",
      "ReactRefreshLogBox app default Server component errors should open up in fullscreen",
      "ReactRefreshLogBox app default Should not show __webpack_exports__ when exporting anonymous arrow function",
      "ReactRefreshLogBox app default Unhandled errors and rejections opens up in the minimized state",
      "ReactRefreshLogBox app default boundaries",
      "ReactRefreshLogBox app default conversion to class component (1)",
      "ReactRefreshLogBox app default css syntax errors",
      "ReactRefreshLogBox app default internal package errors",
      "ReactRefreshLogBox app default logbox: anchors links in error messages",
      "ReactRefreshLogBox app default module init error not shown",
      "ReactRefreshLogBox app default non-Error errors are handled properly",
      "ReactRefreshLogBox app default server component can recover from error thrown in the module",
      "ReactRefreshLogBox app default should hide unrelated frames in stack trace with node:internal calls",
      "ReactRefreshLogBox app default should hide unrelated frames in stack trace with unknown anonymous calls",
      "ReactRefreshLogBox app default should strip whitespace correctly with newline",
      "ReactRefreshLogBox app default unterminated JSX",
      "ReactRefreshLogBox app turbo internal package errors",
      "ReactRefreshLogBox app turbo non-Error errors are handled properly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefreshLogBoxMisc.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "ReactRefreshLogBox app <Link> component props errors",
      "ReactRefreshLogBox app <Link> with multiple children",
      "ReactRefreshLogBox app server-side only compilation errors"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/ReactRefreshModule.test.ts": {
    "passed": ["ReactRefreshModule app should allow any variable names"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/app-hmr-changes.test.ts": {
    "passed": [
      "Error overlay - RSC build errors Skipped in webpack should handle successive HMR changes with errors correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/dynamic-error.test.ts": {
    "passed": [
      "dynamic = \"error\" in devmode should show error overlay when dynamic is forced"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/dynamic-metadata-error.test.ts": {
    "passed": [
      "dynamic metadata error should error if the default export of dynamic image is missing",
      "dynamic metadata error should error when id is missing in generateImageMetadata",
      "dynamic metadata error should error when id is missing in generateSitemaps"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/editor-links.test.ts": {
    "passed": [
      "Error overlay - editor links should be possible to open source file on build error"
    ],
    "failed": [],
    "pending": [
      "Error overlay - editor links opening links in import traces should be possible to open import trace files on RSC parse error",
      "Error overlay - editor links opening links in import traces should be possible to open import trace files on module not found error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/error-message-url.test.ts": {
    "passed": [
      "Error overlay - error message urls should be possible to click url in build error",
      "Error overlay - error message urls should be possible to click url in runtime error"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/error-recovery.test.ts": {
    "passed": [
      "Error recovery app turbo can recover from a event handler error",
      "Error recovery app turbo can recover from a syntax error without losing state",
      "Error recovery app turbo client component can recover from a component error",
      "Error recovery app turbo client component can recover from syntax error",
      "Error recovery app turbo displays build error on initial page load",
      "Error recovery app turbo render error not shown right after syntax error",
      "Error recovery app turbo server component can recover from a component error",
      "Error recovery app turbo server component can recover from syntax error",
      "Error recovery app turbo stuck error",
      "Error recovery app turbo syntax > runtime error"
    ],
    "failed": [],
    "pending": [
      "Error recovery app default can recover from a event handler error",
      "Error recovery app default can recover from a syntax error without losing state",
      "Error recovery app default client component can recover from a component error",
      "Error recovery app default client component can recover from syntax error",
      "Error recovery app default displays build error on initial page load",
      "Error recovery app default render error not shown right after syntax error",
      "Error recovery app default server component can recover from a component error",
      "Error recovery app default server component can recover from syntax error",
      "Error recovery app default stuck error",
      "Error recovery app default syntax > runtime error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/hydration-error.test.ts": {
    "passed": [
      "Error overlay for hydration errors should collapse and uncollapse properly when there are many frames",
      "Error overlay for hydration errors should not show a hydration error when using `useId` in a client component",
      "Error overlay for hydration errors should only show one hydration error when bad nesting happened - div > tr",
      "Error overlay for hydration errors should only show one hydration error when bad nesting happened - div under p",
      "Error overlay for hydration errors should only show one hydration error when bad nesting happened - p under p",
      "Error overlay for hydration errors should show correct hydration error when client and server render different text",
      "Error overlay for hydration errors should show correct hydration error when client renders an extra element",
      "Error overlay for hydration errors should show correct hydration error when client renders an extra node inside Suspense content",
      "Error overlay for hydration errors should show correct hydration error when client renders an extra text node",
      "Error overlay for hydration errors should show correct hydration error when server renders an extra element",
      "Error overlay for hydration errors should show correct hydration error when server renders an extra text node",
      "Error overlay for hydration errors should show correct hydration error when server renders an extra text node in an invalid place",
      "Error overlay for hydration errors should show correct hydration error when server renders an extra whitespace in an invalid place",
      "Error overlay for hydration errors should show error if script is directly placed under html instead of body",
      "Error overlay for hydration errors should show the highlighted bad nesting html snippet when bad nesting happened"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/acceptance-app/invalid-imports.test.ts": {
    "passed": [
      "Error Overlay invalid imports should show error when external package imports client-only in server component",
      "Error Overlay invalid imports should show error when external package imports server-only in client component",
      "Error Overlay invalid imports should show error when using styled-jsx in server component"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/next-dynamic/next-dynamic.test.ts": {
    "passed": [
      "next/dynamic Dynamic import custom loading should render custom loading on the server side when `ssr:false` and `loading` is provided",
      "next/dynamic Dynamic import custom loading should render the component on client side",
      "next/dynamic Dynamic import default behavior should SSR nested dynamic components and skip nonSSR ones",
      "next/dynamic Dynamic import default behavior should hydrate nested chunks",
      "next/dynamic Dynamic import default behavior should render dynamic import components",
      "next/dynamic Dynamic import default behavior should render dynamic import components using a function as first parameter",
      "next/dynamic Dynamic import default behavior should render even there are no physical chunk exists",
      "next/dynamic Dynamic import default behavior should render the component Head content",
      "next/dynamic Dynamic import ssr:false option should import and render the ESM module correctly on client side",
      "next/dynamic Dynamic import ssr:false option should not render loading on the server side",
      "next/dynamic Dynamic import ssr:false option should render the component on client side",
      "next/dynamic Dynamic import ssr:true option Should render the component on the server side",
      "next/dynamic Dynamic import ssr:true option should render the component on client side"
    ],
    "failed": [],
    "pending": [
      "next/dynamic Dynamic import Multiple modules should only include the rendered module script tag",
      "next/dynamic Dynamic import Multiple modules should only load the rendered module in the browser",
      "next/dynamic Dynamic import Multiple modules should only render one bundle if component is used multiple times",
      "next/dynamic Dynamic import custom chunkfilename should render the component on client side",
      "next/dynamic Dynamic import custom chunkfilename should render the correct filename"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/next-rs-api.test.ts": {
    "passed": [
      "next.rs api should allow to write app Node.js page to disk",
      "next.rs api should allow to write app Node.js route to disk",
      "next.rs api should allow to write app edge page to disk",
      "next.rs api should allow to write app edge route to disk",
      "next.rs api should allow to write pages Node.js api to disk",
      "next.rs api should allow to write pages Node.js page to disk",
      "next.rs api should allow to write pages edge api to disk",
      "next.rs api should allow to write pages edge page to disk",
      "next.rs api should allow to write root page to disk",
      "next.rs api should detect the correct routes",
      "next.rs api should have working HMR on client and server-side change on a page 0",
      "next.rs api should have working HMR on client and server-side change on a page 1",
      "next.rs api should have working HMR on client and server-side change on a page 2",
      "next.rs api should have working HMR on client-side change on a app page 0",
      "next.rs api should have working HMR on client-side change on a app page 1",
      "next.rs api should have working HMR on client-side change on a app page 2",
      "next.rs api should have working HMR on client-side change on a page 0",
      "next.rs api should have working HMR on client-side change on a page 1",
      "next.rs api should have working HMR on client-side change on a page 2",
      "next.rs api should have working HMR on server-side change on a app page 0",
      "next.rs api should have working HMR on server-side change on a app page 1",
      "next.rs api should have working HMR on server-side change on a app page 2",
      "next.rs api should have working HMR on server-side change on a page 0",
      "next.rs api should have working HMR on server-side change on a page 1",
      "next.rs api should have working HMR on server-side change on a page 2"
    ],
    "failed": [],
    "pending": ["next.rs api should allow to make many HMR updates"],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/node-builtins.test.ts": {
    "passed": [
      "node builtins should have polyfilled node.js builtins for the browser correctly",
      "node builtins should have polyfilled node.js builtins for the browser correctly in client component",
      "node builtins should support node.js builtins",
      "node builtins should support node.js builtins in server component",
      "node builtins should support node.js builtins prefixed by node:",
      "node builtins should support node.js builtins prefixed by node: in server component",
      "node builtins should throw when unsupported builtins are used in middleware"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/project-directory-rename.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Project Directory Renaming should detect project dir rename and restart"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/styled-components-disabled.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "styled-components SWC transform should have hydration mismatch with styled-components transform disabled"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/styled-components/styled-components.test.ts": {
    "passed": [
      "styled-components SWC transform should contain styles in initial HTML",
      "styled-components SWC transform should enable the display name transform by default",
      "styled-components SWC transform should not have hydration mismatch with styled-components transform enabled",
      "styled-components SWC transform should only render once on the server per request",
      "styled-components SWC transform should render the page with correct styles"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/tailwind-jit.test.ts": {
    "passed": ["TailwindCSS JIT works with JIT enabled"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/basic/theme-ui/theme-ui.test.ts": {
    "passed": ["theme-ui SWC option should have theme provided styling"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/client-dev-overlay/index.test.ts": {
    "passed": [
      "client-dev-overlay should be able to fullscreen the minimized overlay",
      "client-dev-overlay should be able to hide the minimized overlay",
      "client-dev-overlay should be able to minimize the fullscreen overlay",
      "client-dev-overlay should have a role of \"dialog\" if the page is focused"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/correct-tsconfig-defaults/index.test.ts": {
    "passed": [
      "correct tsconfig.json defaults should add `moduleResolution` when generating tsconfig.json in dev",
      "correct tsconfig.json defaults should not warn for `moduleResolution` when already present and valid"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/dotenv-default-expansion/index.test.ts": {
    "passed": ["Dotenv default expansion should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/duplicate-pages/duplicate-pages.test.ts": {
    "passed": ["Handles Duplicate Pages Shows warning in development"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/experimental-https-server/https-server.generated-key.test.ts": {
    "passed": [
      "experimental-https-server (generated certificate) only runs on CI as it requires administrator privileges"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/experimental-https-server/https-server.provided-key.test.ts": {
    "passed": [
      "experimental-https-server (provided certificate) should successfully load the app in app dir",
      "experimental-https-server (provided certificate) should successfully load the app in pages dir"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/gssp-notfound/index.test.ts": {
    "passed": [
      "getServerSideProps returns notFound: true should not poll indefinitely"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/internal-traces/internal-traces.test.ts": {
    "passed": [
      "internal traces should not write long internal traces to stdio"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/jsconfig-path-reloading/index.test.ts": {
    "passed": [
      "jsconfig-path-reloading jsconfig added after starting dev should automatically fast refresh content when path is added without error",
      "jsconfig-path-reloading jsconfig added after starting dev should load with initial paths config correctly",
      "jsconfig-path-reloading jsconfig added after starting dev should recover from module not found when paths is updated",
      "jsconfig-path-reloading jsconfig should automatically fast refresh content when path is added without error",
      "jsconfig-path-reloading jsconfig should load with initial paths config correctly",
      "jsconfig-path-reloading jsconfig should recover from module not found when paths is updated"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/middleware-errors/index.test.ts": {
    "passed": [
      "middleware - development errors when middleware contains an unhandled rejection does not render the error",
      "middleware - development errors when middleware contains an unhandled rejection logs the error correctly",
      "middleware - development errors when middleware throws synchronously logs the error correctly",
      "middleware - development errors when middleware throws synchronously renders the error correctly and recovers",
      "middleware - development errors when running invalid dynamic code with eval logs the error correctly",
      "middleware - development errors when running invalid dynamic code with eval renders the error correctly and recovers",
      "middleware - development errors when there is a compilation error after boot logs the error correctly",
      "middleware - development errors when there is a compilation error after boot renders the error correctly and recovers",
      "middleware - development errors when there is a compilation error from boot logs the error correctly",
      "middleware - development errors when there is a compilation error from boot renders the error correctly and recovers",
      "middleware - development errors when there is an unhandled rejection while loading a dependency does not render the error",
      "middleware - development errors when there is an unhandled rejection while loading a dependency logs the error correctly",
      "middleware - development errors when there is an unhandled rejection while loading the module does not render the error",
      "middleware - development errors when there is an unhandled rejection while loading the module logs the error correctly",
      "middleware - development errors when throwing while loading the module logs the error correctly",
      "middleware - development errors when throwing while loading the module renders the error correctly and recovers"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/middleware-warnings/index.test.ts": {
    "passed": [
      "middlewares does not warn when populating response with a function call",
      "middlewares does not warn when populating response with a value",
      "middlewares does not warn when populating response with an async function call",
      "middlewares does not warn when returning null reponse body",
      "middlewares does not warn when returning response with JSON.stringify",
      "middlewares does not warn when returning response with literal number",
      "middlewares does not warn when returning response with literal string",
      "middlewares does not warn when returning undefined response body"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/next-font/build-errors.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "next/font build-errors should show a module not found error if local font file can' be resolved",
      "next/font build-errors should show a next/font error when input is wrong"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/next-font/deprecated-package.test.ts": {
    "passed": [
      "Deprecated @next/font warning should not warn if @next/font is not in deps",
      "Deprecated @next/font warning should warn if @next/font is in deps"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/next-font/font-loader-in-document-error.test.ts": {
    "passed": ["font-loader-in-document-error next/font inside _document"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/pages-dir/client-navigation/index.test.ts": {
    "passed": [
      "Client Navigation foreign history manipulation should ignore foreign history state with missing properties",
      "Client Navigation foreign history manipulation should ignore history state with an invalid url",
      "Client Navigation foreign history manipulation should ignore history state without options",
      "Client Navigation resets scroll at the correct time should intentionally not reset scroll before the new page runs its lifecycles (Router#push)",
      "Client Navigation resets scroll at the correct time should reset scroll before the new page runs its lifecycles (<Link />)",
      "Client Navigation resets scroll at the correct time should reset scroll before the new page runs its lifecycles (Router#push)",
      "Client Navigation runtime errors should show redbox when a client side error is thrown inside a component",
      "Client Navigation runtime errors should show redbox when a client side error is thrown outside a component",
      "Client Navigation should emit routeChangeError on hash change cancel",
      "Client Navigation should handle boolean async prop in next/script client-side: false",
      "Client Navigation should handle boolean async prop in next/script client-side: true",
      "Client Navigation should handle undefined prop in head client-side",
      "Client Navigation should navigate to paths relative to the current page",
      "Client Navigation should not error on module.exports + polyfills",
      "Client Navigation should not reload when visiting /_error directly",
      "Client Navigation should only execute async and defer scripts with next/script once",
      "Client Navigation should scroll to top when the scroll option is set to true",
      "Client Navigation should work on nested /index/index.js",
      "Client Navigation with 404 pages should 404 on not existent page",
      "Client Navigation with 404 pages should 404 on wrong casing",
      "Client Navigation with 404 pages should 404 on wrong casing of url dynamic param",
      "Client Navigation with 404 pages should get url dynamic param",
      "Client Navigation with 404 pages should not 404 for <page>/",
      "Client Navigation with 404 pages should should not contain a page script in a 404 page",
      "Client Navigation with <Link/> should call mouse handlers with an absolute url",
      "Client Navigation with <Link/> should error when calling onClick without event",
      "Client Navigation with <Link/> should have proper error when no children are provided",
      "Client Navigation with <Link/> should navigate an absolute local url",
      "Client Navigation with <Link/> should navigate an absolute local url with as",
      "Client Navigation with <Link/> should navigate an absolute url",
      "Client Navigation with <Link/> should navigate back after reload",
      "Client Navigation with <Link/> should navigate forwards after reload",
      "Client Navigation with <Link/> should navigate the page",
      "Client Navigation with <Link/> should navigate via the client side",
      "Client Navigation with <Link/> should not throw error when one number type child is provided",
      "Client Navigation with <a/> tag inside the <Link /> should navigate the page",
      "Client Navigation with <a/> tag inside the <Link /> should not navigate if the <a/> tag has a target",
      "Client Navigation with <a/> tag inside the <Link /> should not navigate if the click-event is modified",
      "Client Navigation with <a/> tag inside the <Link /> should not reload when link in svg is clicked",
      "Client Navigation with URL objects should handle undefined in router.push",
      "Client Navigation with URL objects should work with \"Router.push\"",
      "Client Navigation with URL objects should work with <Link/>",
      "Client Navigation with URL objects should work with the \"replace\" prop",
      "Client Navigation with asPath inside getInitialProps should show the correct asPath with a Link with as prop",
      "Client Navigation with asPath inside getInitialProps should show the correct asPath with a Link without the as prop",
      "Client Navigation with asPath with next/link should detect asPath query changes correctly",
      "Client Navigation with asPath with next/link should use pushState with same href and different asPath",
      "Client Navigation with asPath with next/router should navigate an absolute local url on push",
      "Client Navigation with asPath with next/router should navigate an absolute local url on replace",
      "Client Navigation with asPath with next/router should navigate an absolute url on push",
      "Client Navigation with asPath with next/router should navigate an absolute url on replace",
      "Client Navigation with asPath with next/router should show the correct asPath",
      "Client Navigation with different types of urls should not work with /index page",
      "Client Navigation with different types of urls should work with / page",
      "Client Navigation with different types of urls should work with dir/ page",
      "Client Navigation with different types of urls should work with normal page",
      "Client Navigation with empty getInitialProps() should render an error",
      "Client Navigation with getInitialProp redirect should redirect the page via client side",
      "Client Navigation with getInitialProp redirect should redirect the page when loading",
      "Client Navigation with hash changes check hydration mis-match should not have hydration mis-match for hash link",
      "Client Navigation with hash changes when hash change via A tag should not run getInitialProps",
      "Client Navigation with hash changes when hash change via Link Should update asPath",
      "Client Navigation with hash changes when hash change via Link should not run getInitialProps",
      "Client Navigation with hash changes when hash change via Link should not scroll to hash when scroll={false} is set",
      "Client Navigation with hash changes when hash change via Link should scroll to the specified CJK position to a new page",
      "Client Navigation with hash changes when hash change via Link should scroll to the specified position on the same page",
      "Client Navigation with hash changes when hash change via Link should scroll to the specified position on the same page with a name property",
      "Client Navigation with hash changes when hash change via Link should scroll to the specified position to a new page",
      "Client Navigation with hash changes when hash get removed should not run getInitialProps",
      "Client Navigation with hash changes when hash get removed should not run getInitialProps when removing via back",
      "Client Navigation with hash changes when hash set to empty should not run getInitialProps",
      "Client Navigation with hash changes with state when passing state via hash change should increment the history state counter",
      "Client Navigation with hash changes with state when passing state via hash change should increment the shallow history state counter",
      "Client Navigation with onClick action should always replace the state and perform additional action",
      "Client Navigation with onClick action should not reload if default was prevented",
      "Client Navigation with onClick action should reload the page and perform additional action",
      "Client Navigation with querystring relative urls router.replace with shallow=true shall not throw route cancelled errors",
      "Client Navigation with querystring relative urls should work with Link",
      "Client Navigation with querystring relative urls should work with router.push",
      "Client Navigation with querystring relative urls should work with router.replace",
      "Client Navigation with shallow routing should handle the back button and should not run getInitialProps",
      "Client Navigation with shallow routing should keep the scroll position on shallow routing",
      "Client Navigation with shallow routing should run getInitialProps always when rending the page to the screen",
      "Client Navigation with shallow routing should update the url without running getInitialProps",
      "Client Navigation with the HOC based router should navigate as expected",
      "Client Navigation with the current url should always replace the state",
      "Client Navigation with the current url should reload the page",
      "Client Navigation with the same page but different querystring should navigate the page",
      "Client Navigation with the same page but different querystring should remove querystring",
      "Client Navigation with unexpected <a/> nested tag should not redirect if passHref prop is not defined in Link",
      "Client Navigation with unexpected <a/> nested tag should redirect if passHref prop is defined in Link",
      "updating <Head /> with strictNextHead=false while client routing should handle boolean async prop in next/head client-side: false",
      "updating <Head /> with strictNextHead=false while client routing should handle boolean async prop in next/head client-side: true",
      "updating <Head /> with strictNextHead=false while client routing should not warn when application/ld+json scripts are in head",
      "updating <Head /> with strictNextHead=false while client routing should only execute async and defer scripts once",
      "updating <Head /> with strictNextHead=false while client routing should update head during client routing",
      "updating <Head /> with strictNextHead=false while client routing should update head when unmounting component",
      "updating <Head /> with strictNextHead=false while client routing should update title during client routing",
      "updating <Head /> with strictNextHead=false while client routing should warn when scripts are in head",
      "updating <Head /> with strictNextHead=false while client routing should warn when stylesheets or scripts are in head",
      "updating <Head /> with strictNextHead=true while client routing should handle boolean async prop in next/head client-side: false",
      "updating <Head /> with strictNextHead=true while client routing should handle boolean async prop in next/head client-side: true",
      "updating <Head /> with strictNextHead=true while client routing should not warn when application/ld+json scripts are in head",
      "updating <Head /> with strictNextHead=true while client routing should only execute async and defer scripts once",
      "updating <Head /> with strictNextHead=true while client routing should update head during client routing",
      "updating <Head /> with strictNextHead=true while client routing should update head when unmounting component",
      "updating <Head /> with strictNextHead=true while client routing should update title during client routing",
      "updating <Head /> with strictNextHead=true while client routing should warn when scripts are in head",
      "updating <Head /> with strictNextHead=true while client routing should warn when stylesheets or scripts are in head"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/pages-dir/client-navigation/rendering.test.ts": {
    "passed": [
      "Client Navigation rendering <Head /> with strictNextHead=false header helper avoids dedupe of meta tags with the same name if they use unique keys",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper avoids dedupe of specific tags",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper dedupes tags",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper dedupes tags with the same key as the default",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper renders Fragment children",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper renders boolean attributes correctly children",
      "Client Navigation rendering <Head /> with strictNextHead=false header helper renders header information",
      "Client Navigation rendering <Head /> with strictNextHead=false header renders default charset",
      "Client Navigation rendering <Head /> with strictNextHead=false header renders default viewport",
      "Client Navigation rendering <Head /> with strictNextHead=false should handle undefined prop in head server-side",
      "Client Navigation rendering <Head /> with strictNextHead=false should place charset element at the top of <head>",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper avoids dedupe of meta tags with the same name if they use unique keys",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper avoids dedupe of specific tags",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper dedupes tags",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper dedupes tags with the same key as the default",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper renders Fragment children",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper renders boolean attributes correctly children",
      "Client Navigation rendering <Head /> with strictNextHead=true header helper renders header information",
      "Client Navigation rendering <Head /> with strictNextHead=true header renders default charset",
      "Client Navigation rendering <Head /> with strictNextHead=true header renders default viewport",
      "Client Navigation rendering <Head /> with strictNextHead=true should handle undefined prop in head server-side",
      "Client Navigation rendering <Head /> with strictNextHead=true should place charset element at the top of <head>",
      "Client Navigation rendering Rendering via HTTP 404 should 404 on not existent page",
      "Client Navigation rendering Rendering via HTTP 404 should 404 on wrong casing",
      "Client Navigation rendering Rendering via HTTP 404 should not 404 for <page>/",
      "Client Navigation rendering Rendering via HTTP 404 should should not contain a page script in a 404 page",
      "Client Navigation rendering Rendering via HTTP allows to import .json files",
      "Client Navigation rendering Rendering via HTTP asPath",
      "Client Navigation rendering Rendering via HTTP default Content-Type",
      "Client Navigation rendering Rendering via HTTP default export is not a React Component",
      "Client Navigation rendering Rendering via HTTP error-in-the-global-scope",
      "Client Navigation rendering Rendering via HTTP error-inside-page",
      "Client Navigation rendering Rendering via HTTP getInitialProps circular structure",
      "Client Navigation rendering Rendering via HTTP getInitialProps resolves to null",
      "Client Navigation rendering Rendering via HTTP getInitialProps should be class method",
      "Client Navigation rendering Rendering via HTTP renders a link component",
      "Client Navigation rendering Rendering via HTTP renders a stateless component",
      "Client Navigation rendering Rendering via HTTP renders properties populated asynchronously",
      "Client Navigation rendering Rendering via HTTP renders styled jsx",
      "Client Navigation rendering Rendering via HTTP renders styled jsx external",
      "Client Navigation rendering Rendering via HTTP renders when component is a forwardRef instance",
      "Client Navigation rendering Rendering via HTTP renders when component is a memo instance",
      "Client Navigation rendering Rendering via HTTP renders with fragment syntax",
      "Client Navigation rendering Rendering via HTTP setting Content-Type in getInitialProps",
      "Client Navigation rendering Rendering via HTTP should render 404 for _next routes that do not exist",
      "Client Navigation rendering Rendering via HTTP should render page that has module.exports anywhere",
      "Client Navigation rendering Rendering via HTTP should render the page with `nextExport` property",
      "Client Navigation rendering Rendering via HTTP should render the page with custom extension",
      "Client Navigation rendering Rendering via HTTP should render the page without `err` property",
      "Client Navigation rendering Rendering via HTTP should render the page without `nextExport` property",
      "Client Navigation rendering Rendering via HTTP should set Cache-Control header",
      "Client Navigation rendering Rendering via HTTP should should not contain scripts that are not js",
      "Client Navigation rendering Rendering via HTTP should show a valid error when undefined is thrown",
      "Client Navigation rendering Rendering via HTTP with the HOC based router should include asPath",
      "Client Navigation rendering Rendering via HTTP with the HOC based router should navigate as expected"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/pages-dir/custom-app-hmr/index.test.ts": {
    "passed": [
      "custom-app-hmr should not do full reload when simply editing _app.js"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/project-directory-with-styled-jsx-suffix/index.test.ts": {
    "passed": ["project directory with styled-jsx suffix should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/repeated-dev-edits/repeated-dev-edits.test.ts": {
    "passed": ["repeated-dev-edits should not break the hydration "],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/start-no-build/start-no-build.test.ts": {
    "passed": [
      "next start without next build should show error when there is no production build"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/tsconfig-path-reloading/index.test.ts": {
    "passed": [
      "tsconfig-path-reloading tsconfig added after starting dev should automatically fast refresh content when path is added without error",
      "tsconfig-path-reloading tsconfig added after starting dev should load with initial paths config correctly",
      "tsconfig-path-reloading tsconfig added after starting dev should recover from module not found when paths is updated",
      "tsconfig-path-reloading tsconfig should automatically fast refresh content when path is added without error",
      "tsconfig-path-reloading tsconfig should load with initial paths config correctly",
      "tsconfig-path-reloading tsconfig should recover from module not found when paths is updated"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/typescript-auto-install/index.test.ts": {
    "passed": [
      "typescript-auto-install should detect TypeScript being added and auto setup",
      "typescript-auto-install should work"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/watch-config-file/index.test.ts": {
    "passed": ["watch-config-file should output config file change"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/development/webpack-issuer-deprecation-warning/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "webpack-issuer-deprecation-warning should not appear deprecation warning about webpack module issuer"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/404-page-router/index.test.ts": {
    "passed": [
      "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of false and i18n of false and middleware false should not throw any errors when re-fetching the route info",
      "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of false and i18n of true and middleware false should not throw any errors when re-fetching the route info",
      "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of true and i18n of false and middleware false should not throw any errors when re-fetching the route info",
      "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
      "404-page-router 404-page-router with basePath of true and i18n of true and middleware false should not throw any errors when re-fetching the route info"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir-legacy-edge-runtime-config/index.test.ts": {
    "passed": [
      "app-dir edge runtime config should warn the legacy object config export"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/_allow-underscored-root-directory/_allow-underscored-root-directory.test.ts": {
    "passed": [
      "_allow-underscored-root-directory should not serve app path with underscore",
      "_allow-underscored-root-directory should pages path with a underscore at the root",
      "_allow-underscored-root-directory should serve app path with %5F"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions-allowed-origins/app-action-allowed-origins.test.ts": {
    "passed": [
      "app-dir action allowed origins should pass if localhost is set as a safe origin"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions-allowed-origins/app-action-disallowed-origins.test.ts": {
    "passed": [
      "app-dir action disallowed origins should error if x-forwarded-host does not match the origin"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions-navigation/index.test.ts": {
    "passed": [
      "app-dir action handling should handle actions correctly after following a relative link",
      "app-dir action handling should handle actions correctly after navigation / redirection events"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions-revalidate-remount/actions-revalidate-remount.test.ts": {
    "passed": [
      "actions-revalidate-remount should not remount the page + loading component when revalidating"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions/app-action-export.test.ts": {
    "passed": [
      "app-dir action handling - next export skip test for development mode"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions/app-action-form-state.test.ts": {
    "passed": [
      "app-dir action useActionState should send the action to the provided permalink with form state when JS disabled",
      "app-dir action useActionState should support hydrating the app from progressively enhanced form request",
      "app-dir action useActionState should support submitting form state with JS",
      "app-dir action useActionState should support submitting form state without JS"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions/app-action-progressive-enhancement.test.ts": {
    "passed": [
      "app-dir action progressive enhancement should support actions from client without JS",
      "app-dir action progressive enhancement should support formData and redirect without JS"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions/app-action-size-limit-invalid.test.ts": {
    "passed": [
      "app-dir action size limit invalid config skip test for development mode"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/actions/app-action.test.ts": {
    "passed": [
      "app-dir action handling \"use server\" export values should error when exporting non async functions at build time",
      "app-dir action handling Edge SSR should allow cookie and header async storages",
      "app-dir action handling Edge SSR should handle basic actions correctly",
      "app-dir action handling Edge SSR should handle calls to redirect() with a absolute URL in a single pass",
      "app-dir action handling Edge SSR should handle calls to redirect() with a relative URL in a single pass",
      "app-dir action handling Edge SSR should handle calls to redirect() with external URLs",
      "app-dir action handling Edge SSR should handle unicode search params",
      "app-dir action handling Edge SSR should return error response for hoc auth wrappers in edge runtime",
      "app-dir action handling HMR should support updating the action",
      "app-dir action handling caching disabled by default should not override force-cache in server action",
      "app-dir action handling caching disabled by default should not override revalidate in server action",
      "app-dir action handling caching disabled by default should use no-store as default for server action",
      "app-dir action handling encryption should send encrypted values from the closed over closure",
      "app-dir action handling fetch actions should handle a fetch action initiated from a static page",
      "app-dir action handling fetch actions should handle calls to redirect() with a absolute URL in a single pass",
      "app-dir action handling fetch actions should handle calls to redirect() with a relative URL in a single pass",
      "app-dir action handling fetch actions should handle calls to redirect() with external URLs",
      "app-dir action handling fetch actions should handle redirects to routes that provide an invalid RSC response",
      "app-dir action handling fetch actions should handle revalidatePath",
      "app-dir action handling fetch actions should handle revalidateTag",
      "app-dir action handling fetch actions should invalidate client cache on other routes when cookies.set is called",
      "app-dir action handling fetch actions should invalidate client cache when path is revalidated",
      "app-dir action handling fetch actions should invalidate client cache when tag is revalidated",
      "app-dir action handling fetch actions should revalidate when cookies.set is called",
      "app-dir action handling fetch actions should revalidate when cookies.set is called in a client action",
      "app-dir action handling fetch actions should store revalidation data in the prefetch cache",
      "app-dir action handling redirects displays searchParams correctly when redirecting with SearchParams",
      "app-dir action handling redirects merges cookies correctly when redirecting",
      "app-dir action handling redirects redirects properly when server action handler redirects with a 307 status code",
      "app-dir action handling redirects redirects properly when server action handler redirects with a 308 status code",
      "app-dir action handling redirects redirects properly when server action handler uses `permanentRedirect`",
      "app-dir action handling redirects redirects properly when server action handler uses `redirect`",
      "app-dir action handling redirects should not forward next-action header to a redirected RSC request",
      "app-dir action handling server actions render client components server component imported action should support importing client components from actions",
      "app-dir action handling should 404 when POSTing an invalid server action",
      "app-dir action handling should be possible to catch network errors",
      "app-dir action handling should be possible to catch regular errors",
      "app-dir action handling should bundle external libraries if they are on the action layer",
      "app-dir action handling should forward action request to a worker that contains the action handler (edge)",
      "app-dir action handling should forward action request to a worker that contains the action handler (node)",
      "app-dir action handling should handle action correctly with middleware rewrite",
      "app-dir action handling should handle actions executed in quick succession",
      "app-dir action handling should handle basic actions correctly",
      "app-dir action handling should log a warning when a server action is not found but an id is provided",
      "app-dir action handling should not block navigation events while a server action is in flight",
      "app-dir action handling should not block router.back() while a server action is in flight",
      "app-dir action handling should not error when a forwarded action triggers a redirect (edge)",
      "app-dir action handling should not error when a forwarded action triggers a redirect (node)",
      "app-dir action handling should not log errors for non-action form POSTs",
      "app-dir action handling should only submit action once when resubmitting an action after navigation",
      "app-dir action handling should propagate errors from a `text/plain` response to an error boundary",
      "app-dir action handling should push new route when redirecting",
      "app-dir action handling should report errors with bad inputs correctly",
      "app-dir action handling should support .bind",
      "app-dir action handling should support chained .bind",
      "app-dir action handling should support formData and redirect",
      "app-dir action handling should support headers and cookies",
      "app-dir action handling should support headers in client imported actions",
      "app-dir action handling should support hoc auth wrappers",
      "app-dir action handling should support importing actions in client components",
      "app-dir action handling should support importing the same action module instance in both server and action layers",
      "app-dir action handling should support next/dynamic with ssr: false",
      "app-dir action handling should support next/dynamic with ssr: false (edge)",
      "app-dir action handling should support notFound",
      "app-dir action handling should support notFound (javascript disabled)",
      "app-dir action handling should support setting cookies in route handlers with the correct overrides",
      "app-dir action handling should support uploading files",
      "app-dir action handling should trigger a refresh for a server action that also dispatches a navigation event",
      "app-dir action handling should trigger a refresh for a server action that gets discarded due to a navigation",
      "app-dir action handling should trigger an error boundary for action responses with an invalid content-type",
      "app-dir action handling should work with interception routes"
    ],
    "failed": [],
    "pending": [
      "app-dir action handling fetch actions should handle revalidateTag + redirect",
      "app-dir action handling server actions render client components client component imported action should support importing client components from actions"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/app-a11y/index.test.ts": {
    "passed": [
      "app a11y features route announcer should announce document.title changes",
      "app a11y features route announcer should announce h1 changes",
      "app a11y features route announcer should announce route changes when h1 changes inside an inner layout",
      "app a11y features route announcer should not announce the initital title"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/app-alias/app-alias.test.ts": {
    "passed": [
      "app-dir alias should handle typescript paths alias correctly",
      "app-dir alias should resolve css imports from outside with src folder presented"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/app-basepath-custom-server/index.test.ts": {
    "passed": [
      "custom-app-server-action-redirect redirects with basepath properly when server action handler uses `redirect`",
      "custom-app-server-action-redirect redirects with proper cookies set from both redirect response and post respose"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/create-root-layout/create-root-layout.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app-dir create root layout page.js find available dir create root layout",
      "app-dir create root layout page.js root layout in app create root layout",
      "app-dir create root layout page.js root layout in route group create root layout",
      "app-dir create root layout page.tsx create root layout"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/crypto-globally-available/crypto-globally-available.test.ts": {
    "passed": [
      "Web Crypto API is available globally should be available in Route Handlers",
      "Web Crypto API is available globally should be available in Server Components"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/css-client-side-nav-parallel-routes/css-client-side-nav-parallel-routes.test.ts": {
    "passed": [
      "css-client-side-nav-parallel-routes should apply styles after navigation"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/css-modules-scoping/css-modules-scoping.test.ts": {
    "passed": [
      "css-modules-scoping should not prefix grid areas",
      "css-modules-scoping should prefix animation"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/css-order/css-order.test.ts": {
    "passed": [
      "css-order turbo should load correct styles navigating big-interleaved-a -> big-interleaved-b",
      "css-order turbo should load correct styles navigating big-interleaved-b -> big-interleaved-a",
      "css-order turbo should load correct styles navigating first -> first-client",
      "css-order turbo should load correct styles navigating first -> second",
      "css-order turbo should load correct styles navigating first -> second-client",
      "css-order turbo should load correct styles navigating first -> third",
      "css-order turbo should load correct styles navigating first-client -> first",
      "css-order turbo should load correct styles navigating first-client -> second",
      "css-order turbo should load correct styles navigating first-client -> second-client",
      "css-order turbo should load correct styles navigating first-client -> third",
      "css-order turbo should load correct styles navigating global-first -> global-second",
      "css-order turbo should load correct styles navigating global-second -> global-first",
      "css-order turbo should load correct styles navigating interleaved-a -> interleaved-b",
      "css-order turbo should load correct styles navigating interleaved-b -> interleaved-a",
      "css-order turbo should load correct styles navigating pages-first -> pages-second",
      "css-order turbo should load correct styles navigating pages-first -> pages-third",
      "css-order turbo should load correct styles navigating pages-partial-reversed-a -> pages-partial-reversed-b",
      "css-order turbo should load correct styles navigating pages-partial-reversed-b -> pages-partial-reversed-a",
      "css-order turbo should load correct styles navigating pages-reversed-a -> pages-reversed-b",
      "css-order turbo should load correct styles navigating pages-reversed-b -> pages-reversed-a",
      "css-order turbo should load correct styles navigating pages-second -> pages-first",
      "css-order turbo should load correct styles navigating pages-second -> pages-third",
      "css-order turbo should load correct styles navigating pages-third -> pages-first",
      "css-order turbo should load correct styles navigating pages-third -> pages-second",
      "css-order turbo should load correct styles navigating partial-reversed-a -> partial-reversed-b",
      "css-order turbo should load correct styles navigating partial-reversed-b -> partial-reversed-a",
      "css-order turbo should load correct styles navigating reversed-a -> reversed-b",
      "css-order turbo should load correct styles navigating reversed-b -> reversed-a",
      "css-order turbo should load correct styles navigating second -> first",
      "css-order turbo should load correct styles navigating second -> first-client",
      "css-order turbo should load correct styles navigating second -> second-client",
      "css-order turbo should load correct styles navigating second -> third",
      "css-order turbo should load correct styles navigating second-client -> first",
      "css-order turbo should load correct styles navigating second-client -> first-client",
      "css-order turbo should load correct styles navigating second-client -> second",
      "css-order turbo should load correct styles navigating second-client -> third",
      "css-order turbo should load correct styles navigating third -> first",
      "css-order turbo should load correct styles navigating third -> first-client",
      "css-order turbo should load correct styles navigating third -> second",
      "css-order turbo should load correct styles navigating third -> second-client",
      "css-order turbo should load correct styles on big-interleaved-a",
      "css-order turbo should load correct styles on big-interleaved-b",
      "css-order turbo should load correct styles on first",
      "css-order turbo should load correct styles on first-client",
      "css-order turbo should load correct styles on global-first",
      "css-order turbo should load correct styles on global-second",
      "css-order turbo should load correct styles on interleaved-a",
      "css-order turbo should load correct styles on interleaved-b",
      "css-order turbo should load correct styles on pages-first",
      "css-order turbo should load correct styles on pages-interleaved-a",
      "css-order turbo should load correct styles on pages-interleaved-b",
      "css-order turbo should load correct styles on pages-partial-reversed-a",
      "css-order turbo should load correct styles on pages-partial-reversed-b",
      "css-order turbo should load correct styles on pages-reversed-a",
      "css-order turbo should load correct styles on pages-reversed-b",
      "css-order turbo should load correct styles on pages-second",
      "css-order turbo should load correct styles on pages-third",
      "css-order turbo should load correct styles on partial-reversed-a",
      "css-order turbo should load correct styles on partial-reversed-b",
      "css-order turbo should load correct styles on reversed-a",
      "css-order turbo should load correct styles on reversed-b",
      "css-order turbo should load correct styles on second",
      "css-order turbo should load correct styles on second-client",
      "css-order turbo should load correct styles on third"
    ],
    "failed": [],
    "pending": [
      "css-order turbo should load correct styles navigating back again big-interleaved-a -> big-interleaved-b -> big-interleaved-a -> big-interleaved-b",
      "css-order turbo should load correct styles navigating back again big-interleaved-b -> big-interleaved-a -> big-interleaved-b -> big-interleaved-a",
      "css-order turbo should load correct styles navigating back again first -> first-client -> first -> first-client",
      "css-order turbo should load correct styles navigating back again first -> second -> first -> second",
      "css-order turbo should load correct styles navigating back again first -> second-client -> first -> second-client",
      "css-order turbo should load correct styles navigating back again first -> third -> first -> third",
      "css-order turbo should load correct styles navigating back again first-client -> first -> first-client -> first",
      "css-order turbo should load correct styles navigating back again first-client -> second -> first-client -> second",
      "css-order turbo should load correct styles navigating back again first-client -> second-client -> first-client -> second-client",
      "css-order turbo should load correct styles navigating back again first-client -> third -> first-client -> third",
      "css-order turbo should load correct styles navigating back again interleaved-a -> interleaved-b -> interleaved-a -> interleaved-b",
      "css-order turbo should load correct styles navigating back again interleaved-b -> interleaved-a -> interleaved-b -> interleaved-a",
      "css-order turbo should load correct styles navigating back again pages-first -> pages-second -> pages-first -> pages-second",
      "css-order turbo should load correct styles navigating back again pages-first -> pages-third -> pages-first -> pages-third",
      "css-order turbo should load correct styles navigating back again pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b",
      "css-order turbo should load correct styles navigating back again pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a",
      "css-order turbo should load correct styles navigating back again pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b",
      "css-order turbo should load correct styles navigating back again pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a",
      "css-order turbo should load correct styles navigating back again pages-reversed-a -> pages-reversed-b -> pages-reversed-a -> pages-reversed-b",
      "css-order turbo should load correct styles navigating back again pages-reversed-b -> pages-reversed-a -> pages-reversed-b -> pages-reversed-a",
      "css-order turbo should load correct styles navigating back again pages-second -> pages-first -> pages-second -> pages-first",
      "css-order turbo should load correct styles navigating back again pages-second -> pages-third -> pages-second -> pages-third",
      "css-order turbo should load correct styles navigating back again pages-third -> pages-first -> pages-third -> pages-first",
      "css-order turbo should load correct styles navigating back again pages-third -> pages-second -> pages-third -> pages-second",
      "css-order turbo should load correct styles navigating back again second -> first -> second -> first",
      "css-order turbo should load correct styles navigating back again second -> first-client -> second -> first-client",
      "css-order turbo should load correct styles navigating back again second -> second-client -> second -> second-client",
      "css-order turbo should load correct styles navigating back again second -> third -> second -> third",
      "css-order turbo should load correct styles navigating back again second-client -> first -> second-client -> first",
      "css-order turbo should load correct styles navigating back again second-client -> first-client -> second-client -> first-client",
      "css-order turbo should load correct styles navigating back again second-client -> second -> second-client -> second",
      "css-order turbo should load correct styles navigating back again second-client -> third -> second-client -> third",
      "css-order turbo should load correct styles navigating back again third -> first -> third -> first",
      "css-order turbo should load correct styles navigating back again third -> first-client -> third -> first-client",
      "css-order turbo should load correct styles navigating back again third -> second -> third -> second",
      "css-order turbo should load correct styles navigating back again third -> second-client -> third -> second-client",
      "css-order turbo should load correct styles navigating pages-interleaved-a -> pages-interleaved-b",
      "css-order turbo should load correct styles navigating pages-interleaved-b -> pages-interleaved-a"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dedupe-rsc-error-log/dedupe-rsc-error-log.test.ts": {
    "passed": [
      "dedupe-rsc-error-log should only log RSC error once for edge runtime",
      "dedupe-rsc-error-log should only log RSC error once for nodejs runtime",
      "dedupe-rsc-error-log should only log SSR error once for edge runtime",
      "dedupe-rsc-error-log should only log SSR error once for nodejs runtime"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/draft-mode/draft-mode.test.ts": {
    "passed": [
      "app dir - draft mode in edge runtime should be disabled from api route handler",
      "app dir - draft mode in edge runtime should be enabled from api route handler when draft mode enabled",
      "app dir - draft mode in edge runtime should genenerate rand when draft mode enabled",
      "app dir - draft mode in edge runtime should have set-cookie header on enable",
      "app dir - draft mode in edge runtime should have set-cookie header with redirect location",
      "app dir - draft mode in edge runtime should not perform full page navigation on router.refresh()",
      "app dir - draft mode in edge runtime should read other cookies when draft mode enabled",
      "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/index",
      "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/with-cookies",
      "app dir - draft mode in nodejs runtime should be disabled from api route handler",
      "app dir - draft mode in nodejs runtime should be enabled from api route handler when draft mode enabled",
      "app dir - draft mode in nodejs runtime should genenerate rand when draft mode enabled",
      "app dir - draft mode in nodejs runtime should have set-cookie header on enable",
      "app dir - draft mode in nodejs runtime should have set-cookie header with redirect location",
      "app dir - draft mode in nodejs runtime should not perform full page navigation on router.refresh()",
      "app dir - draft mode in nodejs runtime should read other cookies when draft mode enabled",
      "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /index",
      "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /with-cookies"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-css/index.test.ts": {
    "passed": [
      "app dir - dynamic css should not throw with accessing to ALS in preload css",
      "app dir - dynamic css should only apply corresponding css for page loaded in edge runtime",
      "app dir - dynamic css should only apply corresponding css for page loaded that /another",
      "app dir - dynamic css should only apply corresponding css for page loaded that /ssr",
      "app dir - dynamic css should preload all chunks of dynamic component during SSR"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-data/dynamic-data.test.ts": {
    "passed": [
      "dynamic-data inside cache scope displays redbox when accessing dynamic data inside a cache scope",
      "dynamic-data should render empty objects for dynamic APIs when rendering with force-static",
      "dynamic-data should render the dynamic apis dynamically when used in a top-level scope",
      "dynamic-data should render the dynamic apis dynamically when used in a top-level scope with force dynamic",
      "dynamic-data should track searchParams access as dynamic when the Page is a client component",
      "dynamic-data with dynamic = \"error\" displays redbox when `dynamic = \"error\"` and dynamic data is read in dev"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-href/dynamic-href.test.ts": {
    "passed": [
      "dynamic-href should error when using dynamic href in app dir",
      "dynamic-href should error when using dynamic href.pathname in app dir"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-in-generate-params/index.test.ts": {
    "passed": [
      "app-dir - dynamic in generate params should be able to call fetch while generating multiple dynamic pages",
      "app-dir - dynamic in generate params should be able to call while generating multiple dynamic sitemaps",
      "app-dir - dynamic in generate params should render sitemap with generateSitemaps in force-dynamic config dynamically"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-interception-route-revalidate/dynamic-interception-route-revalidate.test.ts": {
    "passed": [
      "dynamic-interception-route-revalidate should refresh the dynamic intercepted route when the interception route is revalidated"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic-requests/dynamic-requests.test.ts": {
    "passed": [
      "dynamic-requests should not error for dynamic requests in pages",
      "dynamic-requests should not error for dynamic requests in routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/dynamic/dynamic.test.ts": {
    "passed": [
      "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components",
      "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components in edge runtime",
      "app dir - next/dynamic no SSR should support dynamic import with accessing named exports from client component",
      "app dir - next/dynamic should directly raise error when dynamic component error on server",
      "app dir - next/dynamic should generate correct client manifest for dynamic chunks",
      "app dir - next/dynamic should handle next/dynamic in SSR correctly",
      "app dir - next/dynamic should handle next/dynamic in hydration correctly",
      "app dir - next/dynamic should handle ssr: false in pages when appDir is enabled",
      "app dir - next/dynamic should not render loading by default",
      "app dir - next/dynamic should render loading by default if loading is specified and loader is slow"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ecmascript-features/turbopack/ecmascript-features-turbopack.test.ts": {
    "passed": [
      "ecmascript-features turbopack should work using browser",
      "ecmascript-features turbopack should work using cheerio"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ecmascript-features/webpack/ecmascript-features-webpack.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "ecmascript-features webpack should work using browser",
      "ecmascript-features webpack should work using cheerio"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/edge-route-catchall/edge-route-catchall.test.ts": {
    "passed": [
      "edge-route-catchall should correctly normalize edge route catch-all with a single param",
      "edge-route-catchall should correctly normalize edge route catch-all with multiple params"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/edge-route-rewrite/edge-route-rewrite.test.ts": {
    "passed": [
      "edge-route-rewrite it should support a rewrite to a dynamic edge route",
      "edge-route-rewrite it should support a rewrite to an edge route"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/edge-runtime-node-compatibility/edge-runtime-node-compatibility.test.ts": {
    "passed": [
      "edge runtime node compatibility [app] supports node:buffer",
      "edge runtime node compatibility [pages/api] supports node:buffer"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/emotion-js/index.test.ts": {
    "passed": [
      "app dir - emotion-js should render emotion-js css with compiler.emotion option correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/error-boundary-navigation/index.test.ts": {
    "passed": [
      "app dir - not found navigation should allow navigating to a non-existent page",
      "app dir - not found navigation should allow navigating to a page calling notfound",
      "app dir - not found navigation should allow navigation back to route that was initially not-found",
      "app dir - not found navigation should allow navigation on error",
      "app dir - not found navigation should allow navigation on not-found",
      "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
      "app dir - not found navigation should be able to navigate to other page from root not-found page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/error-boundary-navigation/override-node-env.test.ts": {
    "passed": [
      "app dir - not found navigation - with overridden node env should allow navigating to a non-existent page",
      "app dir - not found navigation - with overridden node env should allow navigating to a page calling notfound",
      "app dir - not found navigation - with overridden node env should allow navigation back to route that was initially not-found",
      "app dir - not found navigation - with overridden node env should allow navigation on error",
      "app dir - not found navigation - with overridden node env should allow navigation on not-found",
      "app dir - not found navigation - with overridden node env should allow navigation to other routes on route that was initially not-found",
      "app dir - not found navigation - with overridden node env should be able to navigate to other page from root not-found page",
      "app dir - not found navigation should allow navigating to a non-existent page",
      "app dir - not found navigation should allow navigating to a page calling notfound",
      "app dir - not found navigation should allow navigation back to route that was initially not-found",
      "app dir - not found navigation should allow navigation on error",
      "app dir - not found navigation should allow navigation on not-found",
      "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
      "app dir - not found navigation should be able to navigate to other page from root not-found page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/errors/index.test.ts": {
    "passed": [
      "app-dir - errors error component should display error digest for error in server component with default error boundary",
      "app-dir - errors error component should trigger error component when an error happens during rendering",
      "app-dir - errors error component should trigger error component when an error happens during server components rendering",
      "app-dir - errors error component should use default error boundary for prod and overlay for dev when no error component specified"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/fallback-prefetch/fallback-prefetch.test.ts": {
    "passed": ["fallback-prefetch should prefetch the page without errors"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/front-redirect-issue/front-redirect-issue.test.ts": {
    "passed": ["app dir - front redirect issue should redirect"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/global-error/basic/index.test.ts": {
    "passed": [
      "app dir - global error should catch metadata error in error boundary if presented",
      "app dir - global error should catch metadata error in global-error if no error boundary is presented",
      "app dir - global error should catch the client error thrown in the nested routes",
      "app dir - global error should render global error for error in client components",
      "app dir - global error should render global error for error in server components",
      "app dir - global error should trigger error component when an error happens during rendering"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/global-error/catch-all/index.test.ts": {
    "passed": [
      "app dir - global error - with catch-all route should render 404 page correctly",
      "app dir - global error - with catch-all route should render catch-all route correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/global-error/layout-error/index.test.ts": {
    "passed": [
      "app dir - global error - layout error should render global error for error in server components"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/headers-static-bailout/headers-static-bailout.test.ts": {
    "passed": ["headers-static-bailout should skip"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/hello-world/hello-world.test.ts": {
    "passed": [
      "hello-world should work using browser",
      "hello-world should work using cheerio",
      "hello-world should work with fetch",
      "hello-world should work with html"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/hooks/hooks.test.ts": {
    "passed": [
      "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1",
      "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1/account",
      "app dir - hooks from pages should have the correct hooks at /adapter-hooks/2",
      "app dir - hooks from pages should have the correct hooks at /adapter-hooks/static",
      "app dir - hooks useDraftMode should generate rand when draft mode enabled",
      "app dir - hooks useDraftMode should use initial rand when draft mode be disabled",
      "app dir - hooks usePathname should have the canonical url pathname on rewrite",
      "app dir - hooks usePathname should have the correct pathname",
      "app dir - hooks useRouter should allow access to the router",
      "app dir - hooks useSearchParams should have the canonical url search params on rewrite",
      "app dir - hooks useSearchParams should have the correct search params",
      "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first",
      "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug1",
      "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
      "app dir - hooks useSelectedLayoutSegment should return null in pages",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug1",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten",
      "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten-middleware",
      "app dir - hooks useSelectedLayoutSegments should return an empty array in pages"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/i18n-hybrid/i18n-hybrid.test.js": {
    "passed": [
      "i18n-hybrid does not resolve /en-CA/blog/first-post",
      "i18n-hybrid does not resolve /en-US/blog/first-post",
      "i18n-hybrid does not resolve /fr-CA/blog/first-post",
      "i18n-hybrid does not resolve /fr-FR/blog/first-post",
      "i18n-hybrid does resolve /about",
      "i18n-hybrid does resolve /blog/first-post",
      "i18n-hybrid does resolve /en-CA/about",
      "i18n-hybrid does resolve /en-US/about",
      "i18n-hybrid does resolve /fr-CA/about",
      "i18n-hybrid does resolve /fr-FR/about"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/import/import.test.ts": {
    "passed": [
      "app dir - imports we can import all components from .js",
      "app dir - imports we can import all components from .jsx",
      "app dir - imports we can import all components from .ts",
      "app dir - imports we can import all components from .tsx"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interception-dynamic-segment-middleware/interception-dynamic-segment-middleware.test.ts": {
    "passed": [
      "interception-dynamic-segment-middleware should work when interception route is paired with a dynamic segment & middleware"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interception-dynamic-segment/interception-dynamic-segment.test.ts": {
    "passed": [
      "interception-dynamic-segment should work when interception route is paired with a dynamic segment"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interception-middleware-rewrite/interception-middleware-rewrite.test.ts": {
    "passed": [
      "interception-middleware-rewrite should continue to show the intercepted page when revisiting it",
      "interception-middleware-rewrite should continue to work after using browser back button and following another intercepting route",
      "interception-middleware-rewrite should support intercepting routes with a middleware rewrite"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interception-route-prefetch-cache/interception-route-prefetch-cache.test.ts": {
    "passed": [
      "interception-route-prefetch-cache runtime = edge should render the correct interception when two distinct layouts share the same path structure",
      "interception-route-prefetch-cache runtime = nodejs should render the correct interception when two distinct layouts share the same path structure"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interception-routes-root-catchall/interception-routes-root-catchall.test.ts": {
    "passed": [
      "interception-routes-root-catchall should handle non-intercepted catch-all pages",
      "interception-routes-root-catchall should support having a root catch-all and a catch-all in a parallel route group"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/interoperability-with-pages/navigation.test.ts": {
    "passed": [
      "navigation between pages and app dir It should be able to navigate app -> pages",
      "navigation between pages and app dir It should be able to navigate app -> pages and go back and forward",
      "navigation between pages and app dir It should be able to navigate pages -> app",
      "navigation between pages and app dir It should be able to navigate pages -> app and go back an forward"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/layout-params/layout-params.test.ts": {
    "passed": [
      "app dir - layout params basic params check layout renders just it's params",
      "app dir - layout params basic params check layout without params get no params",
      "app dir - layout params basic params check topmost layout renders all params",
      "app dir - layout params catchall params should give catchall params just to last layout",
      "app dir - layout params catchall params should give empty optional catchall params won't give params to any layout",
      "app dir - layout params catchall params should give optional catchall params just to last layout"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/loader-file-named-export-custom-loader-error/loader-file-named-export-custom-loader-error.test.ts": {
    "passed": [
      "Error test if the loader file export a named function in Development development only should show the error when using `Image` component",
      "Error test if the loader file export a named function in Development development only should show the error when using `getImageProps` method"
    ],
    "failed": [],
    "pending": [
      "Error test if the loader file export a named function in Build and Start build and start only should show the build error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/logging/fetch-logging.test.ts": {
    "passed": [
      "app-dir - logging with default logging should not contain metadata internal segments for dynamic metadata routes",
      "app-dir - logging with default logging should not contain trailing word page for app router routes",
      "app-dir - logging with default logging should not log fetch requests at all",
      "app-dir - logging with fetches default logging should exclude Middleware invoked and _rsc requests",
      "app-dir - logging with fetches default logging should log 'skip' cache status with a reason when cache: 'no-cache' is used",
      "app-dir - logging with fetches default logging should log 'skip' cache status with a reason when revalidate: 0 is used",
      "app-dir - logging with fetches default logging should log 'skip' cache status with a reason when the browser indicates caching should be ignored",
      "app-dir - logging with fetches default logging should log each page request only once",
      "app-dir - logging with fetches default logging should log requests with correct indentation",
      "app-dir - logging with fetches default logging should not contain metadata internal segments for dynamic metadata routes",
      "app-dir - logging with fetches default logging should not contain trailing word page for app router routes",
      "app-dir - logging with fetches default logging should not log _rsc query for client navigation RSC request",
      "app-dir - logging with fetches default logging should only log requests in development mode",
      "app-dir - logging with fetches default logging should respect request.init.cache when use with fetch input is instance",
      "app-dir - logging with fetches default logging should show cache reason of noStore when use with fetch",
      "app-dir - logging with fetches verbose logging should exclude Middleware invoked and _rsc requests",
      "app-dir - logging with fetches verbose logging should log 'skip' cache status with a reason when cache: 'no-cache' is used",
      "app-dir - logging with fetches verbose logging should log 'skip' cache status with a reason when revalidate: 0 is used",
      "app-dir - logging with fetches verbose logging should log 'skip' cache status with a reason when the browser indicates caching should be ignored",
      "app-dir - logging with fetches verbose logging should log each page request only once",
      "app-dir - logging with fetches verbose logging should log requests with correct indentation",
      "app-dir - logging with fetches verbose logging should not contain metadata internal segments for dynamic metadata routes",
      "app-dir - logging with fetches verbose logging should not contain trailing word page for app router routes",
      "app-dir - logging with fetches verbose logging should not log _rsc query for client navigation RSC request",
      "app-dir - logging with fetches verbose logging should only log requests in development mode",
      "app-dir - logging with fetches verbose logging should respect request.init.cache when use with fetch input is instance",
      "app-dir - logging with fetches verbose logging should show cache reason of noStore when use with fetch",
      "app-dir - logging with verbose logging for edge runtime should not contain metadata internal segments for dynamic metadata routes",
      "app-dir - logging with verbose logging for edge runtime should not contain trailing word page for app router routes",
      "app-dir - logging with verbose logging for edge runtime should not log fetch requests at all"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/logging/fetch-warning.test.ts": {
    "passed": [
      "app-dir - fetch warnings should log when request input is a Request instance",
      "app-dir - fetch warnings should log when request input is a string",
      "app-dir - fetch warnings should not log when overriding cache within the Request object"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/mdx/mdx.test.ts": {
    "passed": [
      "mdx with-mdx-rs app directory should allow importing client components",
      "mdx with-mdx-rs app directory should allow overriding components",
      "mdx with-mdx-rs app directory should work in initial html",
      "mdx with-mdx-rs app directory should work in initial html with mdx import",
      "mdx with-mdx-rs app directory should work using browser",
      "mdx with-mdx-rs app directory should work using browser with mdx import",
      "mdx with-mdx-rs app directory should work with next/image",
      "mdx with-mdx-rs pages directory should allow overriding components",
      "mdx with-mdx-rs pages directory should work in initial html",
      "mdx with-mdx-rs pages directory should work in initial html with mdx import",
      "mdx with-mdx-rs pages directory should work using browser",
      "mdx with-mdx-rs pages directory should work using browser with mdx import"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-dynamic-routes/index.test.ts": {
    "passed": [
      "app dir - metadata dynamic routes icon image routes should render apple icon with dynamic routes",
      "app dir - metadata dynamic routes icon image routes should render icon with dynamic routes",
      "app dir - metadata dynamic routes robots.txt should handle robots.[ext] dynamic routes",
      "app dir - metadata dynamic routes should generate unique path for image routes under group routes",
      "app dir - metadata dynamic routes should inject dynamic metadata properly to head",
      "app dir - metadata dynamic routes should pick configured metadataBase instead of deployment url for canonical url",
      "app dir - metadata dynamic routes should use localhost for local prod and fallback to deployment url when metadataBase is falsy",
      "app dir - metadata dynamic routes sitemap should handle sitemap.[ext] dynamic routes",
      "app dir - metadata dynamic routes sitemap should not throw if client components are imported but not used in sitemap",
      "app dir - metadata dynamic routes sitemap should support alternate.languages in sitemap",
      "app dir - metadata dynamic routes sitemap should support generate multi sitemaps with generateSitemaps",
      "app dir - metadata dynamic routes social image routes should fill params into dynamic routes url of metadata images",
      "app dir - metadata dynamic routes social image routes should fill params into routes groups url of static images",
      "app dir - metadata dynamic routes social image routes should handle custom fonts in both edge and nodejs runtime",
      "app dir - metadata dynamic routes social image routes should handle manifest.[ext] dynamic routes",
      "app dir - metadata dynamic routes social image routes should render og image with opengraph-image dynamic routes",
      "app dir - metadata dynamic routes social image routes should render og image with twitter-image dynamic routes",
      "app dir - metadata dynamic routes social image routes should support generate multi images with generateImageMetadata",
      "app dir - metadata dynamic routes social image routes should support params as argument in dynamic routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-edge/index.test.ts": {
    "passed": [
      "app dir - Metadata API on the Edge runtime should render OpenGraph image meta tag correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-json-manifest/index.test.ts": {
    "passed": [
      "app-dir metadata-json-manifest should support metadata.json manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-navigation/metadata-navigation.test.ts": {
    "passed": [
      "app dir - metadata navigation navigation should render root not-found with default metadata",
      "app dir - metadata navigation navigation should support notFound in generateMetadata",
      "app dir - metadata navigation navigation should support redirect in generateMetadata"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-suspense/index.test.ts": {
    "passed": [
      "app dir - metadata dynamic routes suspense should render metadata in head even root layout is wrapped with Suspense"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-thrown/metadata-thrown.test.ts": {
    "passed": [
      "app dir - metadata thrown should not crash from error thrown during preloading nested generateMetadata"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-warnings/index.test.ts": {
    "passed": [
      "app dir - metadata missing metadataBase should not warn for viewport properties during manually merging metadata",
      "app dir - metadata missing metadataBase should not warn metadataBase is missing if there is only absolute url",
      "app dir - metadata missing metadataBase should show warning in vercel deployment output in default build output mode",
      "app dir - metadata missing metadataBase should warn for unsupported metadata properties"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata-warnings/standalone.test.ts": {
    "passed": [
      "app dir - metadata missing metadataBase should fallback to localhost if metadataBase is missing for absolute urls resolving",
      "app dir - metadata missing metadataBase should not warn for viewport properties during manually merging metadata",
      "app dir - metadata missing metadataBase should not warn metadataBase is missing if there is only absolute url",
      "app dir - metadata missing metadataBase should warn for unsupported metadata properties"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/metadata/metadata.test.ts": {
    "passed": [
      "app dir - metadata basic should apply metadata when navigating client-side",
      "app dir - metadata basic should handle metadataBase for urls resolved as only URL type",
      "app dir - metadata basic should not contain query in canonical url after client navigation",
      "app dir - metadata basic should relative canonical url",
      "app dir - metadata basic should support alternate tags",
      "app dir - metadata basic should support appLinks tags",
      "app dir - metadata basic should support apple related tags `itunes` and `appWebApp`",
      "app dir - metadata basic should support generateMetadata dynamic props",
      "app dir - metadata basic should support other basic tags",
      "app dir - metadata basic should support other basic tags (edge)",
      "app dir - metadata basic should support robots tags",
      "app dir - metadata basic should support stashed title in one layer of page and layout",
      "app dir - metadata basic should support stashed title in two layers of page and layout",
      "app dir - metadata basic should support title and description",
      "app dir - metadata basic should support title template",
      "app dir - metadata basic should support verification tags",
      "app dir - metadata basic should use parent layout title when no title is defined in page",
      "app dir - metadata file based icons should not render if image file is not specified",
      "app dir - metadata file based icons should render icon and apple touch icon meta if their images are specified",
      "app dir - metadata icons should merge icons from layout if no static icons files are specified",
      "app dir - metadata icons should not hoist meta[itemProp] to head",
      "app dir - metadata icons should support basic complex descriptor icons field",
      "app dir - metadata icons should support basic object icons field",
      "app dir - metadata icons should support basic string icons field",
      "app dir - metadata icons should support root level of favicon.ico",
      "app dir - metadata opengraph should override file based images when opengraph-image and twitter-image specify images property",
      "app dir - metadata opengraph should pick up opengraph-image and twitter-image as static metadata files",
      "app dir - metadata opengraph should support opengraph tags",
      "app dir - metadata opengraph should support opengraph with article type",
      "app dir - metadata react cache should have same title and page value on initial load",
      "app dir - metadata react cache should have same title and page value when navigating",
      "app dir - metadata should not effect metadata images convention like files under pages directory",
      "app dir - metadata static routes should have /favicon.ico as route",
      "app dir - metadata static routes should have icons as route",
      "app dir - metadata static routes should support root dir robots.txt",
      "app dir - metadata static routes should support sitemap.xml under every routes",
      "app dir - metadata static routes should support static manifest.webmanifest",
      "app dir - metadata twitter should render twitter card summary when image is not present",
      "app dir - metadata twitter should support default twitter app card",
      "app dir - metadata twitter should support default twitter player card",
      "app dir - metadata twitter should support twitter card summary_large_image when image present",
      "app dir - metadata viewport should support dynamic viewport export"
    ],
    "failed": [],
    "pending": [
      "app dir - metadata hmr should handle updates to the file icon name and order"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/missing-suspense-with-csr-bailout/missing-suspense-with-csr-bailout.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "missing-suspense-with-csr-bailout skip test for development mode"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/mjs-as-extension/mjs-as-extension.test.ts": {
    "passed": ["mjs as extension should render the page correctly"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/modularizeimports/modularizeimports.test.ts": {
    "passed": [
      "modularizeImports should work",
      "modularizeImports should work with MDX"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/navigation-redirect-import/navigation-redirect-import.test.ts": {
    "passed": ["navigation-redirect-import should work using fetch"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/navigation/navigation.test.ts": {
    "passed": [
      "app dir - navigation SEO should contain default meta tags in error page",
      "app dir - navigation SEO should emit noindex meta tag for not found page when streaming",
      "app dir - navigation SEO should emit refresh meta tag (permanent) for redirect page when streaming",
      "app dir - navigation SEO should emit refresh meta tag for redirect page when streaming",
      "app dir - navigation SEO should not log 404 errors in ipc server",
      "app dir - navigation bots should block rendering for bots and return 404 status",
      "app dir - navigation browser back to a revalidated page should load the page",
      "app dir - navigation external push should push external url without affecting hooks",
      "app dir - navigation hash should not scroll to hash when scroll={false} is set",
      "app dir - navigation hash should scroll to the specified hash",
      "app dir - navigation hash-link-back-to-same-page should scroll to the specified hash",
      "app dir - navigation hash-with-scroll-offset should scroll to the specified hash",
      "app dir - navigation middleware redirect should change browser location when router.refresh() gets a redirect response",
      "app dir - navigation navigating to a page with async metadata should render the final state of the page with correct metadata",
      "app dir - navigation navigating to dynamic params & changing the casing should load the page correctly",
      "app dir - navigation navigation between pages and app should not contain _rsc query while navigating from app to pages",
      "app dir - navigation navigation between pages and app should not contain _rsc query while navigating from pages to app",
      "app dir - navigation navigation between pages and app should not omit the hash while navigating from app to pages",
      "app dir - navigation navigations when attaching a Proxy to `window.Promise` should navigate without issue",
      "app dir - navigation nested navigation should load chunks correctly without double encoding of url",
      "app dir - navigation nested navigation should navigate to nested pages",
      "app dir - navigation not-found should trigger not-found client-side",
      "app dir - navigation not-found should trigger not-found in a client component",
      "app dir - navigation not-found should trigger not-found in a server component",
      "app dir - navigation not-found should trigger not-found while streaming",
      "app dir - navigation query string should handle unicode search params",
      "app dir - navigation query string should not reset shallow url updates on prefetch",
      "app dir - navigation query string should set query correctly",
      "app dir - navigation query string should set query with semicolon correctly",
      "app dir - navigation query string useParams identity between renders should be stable in app",
      "app dir - navigation query string useParams identity between renders should be stable in pages",
      "app dir - navigation redirect components should only trigger the redirect once (/redirect/servercomponent)",
      "app dir - navigation redirect components should only trigger the redirect once (redirect/redirect-with-loading)",
      "app dir - navigation redirect components should redirect client-side",
      "app dir - navigation redirect components should redirect in a client component",
      "app dir - navigation redirect components should redirect in a server component",
      "app dir - navigation redirect components should redirect to external url",
      "app dir - navigation redirect components should redirect to external url, initiating only once",
      "app dir - navigation redirect middleware redirects should redirect from middleware",
      "app dir - navigation redirect middleware redirects should redirect from middleware with link navigation",
      "app dir - navigation redirect next.config.js redirects should redirect from next.config.js",
      "app dir - navigation redirect next.config.js redirects should redirect from next.config.js with link navigation",
      "app dir - navigation redirect status code should respond with 307 status code in client component",
      "app dir - navigation redirect status code should respond with 307 status code in server component",
      "app dir - navigation redirect status code should respond with 308 status code if permanent flag is set",
      "app dir - navigation relative hashes and queries should work with a hash-only `router.push(...)`",
      "app dir - navigation relative hashes and queries should work with a hash-only href",
      "app dir - navigation relative hashes and queries should work with a query-only href",
      "app dir - navigation relative hashes and queries should work with both relative hashes and queries",
      "app dir - navigation scroll restoration should restore original scroll position when navigating back"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-after-app/index.test.ts": {
    "passed": [
      "unstable_after() in edge runtime does not allow modifying cookies in a callback",
      "unstable_after() in edge runtime interrupted RSC renders runs callbacks if a user error was thrown in the RSC render",
      "unstable_after() in edge runtime interrupted RSC renders runs callbacks if notFound() was called",
      "unstable_after() in edge runtime interrupted RSC renders runs callbacks if redirect() was called",
      "unstable_after() in edge runtime invalid usages errors at compile time when used in a client module",
      "unstable_after() in edge runtime invalid usages errors at compile time with dynamic = \"error\"",
      "unstable_after() in edge runtime invalid usages errors at compile time with dynamic = \"force-static\"",
      "unstable_after() in edge runtime only runs callbacks after the response is fully sent",
      "unstable_after() in edge runtime runs callbacks from nested unstable_after calls",
      "unstable_after() in edge runtime runs in dynamic pages",
      "unstable_after() in edge runtime runs in dynamic route handlers",
      "unstable_after() in edge runtime runs in generateMetadata()",
      "unstable_after() in edge runtime runs in middleware",
      "unstable_after() in edge runtime runs in server actions",
      "unstable_after() in edge runtime uses waitUntil from request context if available",
      "unstable_after() in nodejs runtime does not allow modifying cookies in a callback",
      "unstable_after() in nodejs runtime interrupted RSC renders runs callbacks if a user error was thrown in the RSC render",
      "unstable_after() in nodejs runtime interrupted RSC renders runs callbacks if notFound() was called",
      "unstable_after() in nodejs runtime interrupted RSC renders runs callbacks if redirect() was called",
      "unstable_after() in nodejs runtime invalid usages errors at compile time when used in a client module",
      "unstable_after() in nodejs runtime invalid usages errors at compile time with dynamic = \"error\"",
      "unstable_after() in nodejs runtime invalid usages errors at compile time with dynamic = \"force-static\"",
      "unstable_after() in nodejs runtime only runs callbacks after the response is fully sent",
      "unstable_after() in nodejs runtime runs callbacks from nested unstable_after calls",
      "unstable_after() in nodejs runtime runs in dynamic pages",
      "unstable_after() in nodejs runtime runs in dynamic route handlers",
      "unstable_after() in nodejs runtime runs in generateMetadata()",
      "unstable_after() in nodejs runtime runs in middleware",
      "unstable_after() in nodejs runtime runs in server actions",
      "unstable_after() in nodejs runtime uses waitUntil from request context if available"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-after-pages/index.test.ts": {
    "passed": [
      "unstable_after() - pages invalid usages errors at compile time when used in pages dir errors when used in getServerSideProps",
      "unstable_after() - pages invalid usages errors at compile time when used in pages dir errors when used in getStaticProps",
      "unstable_after() - pages invalid usages errors at compile time when used in pages dir errors when used in within a page component",
      "unstable_after() - pages runs in middleware"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-config/index.test.ts": {
    "passed": [
      "app dir - next config should support importing webpack in next.config"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-dynamic-css/next-dynamic-css.test.ts": {
    "passed": [
      "next-dynamic-css should have correct order of global styles between layout and pages",
      "next-dynamic-css should have correct order of styles between global and css modules",
      "next-dynamic-css should have correct order of styles on next/dynamic loaded component"
    ],
    "failed": [],
    "pending": [
      "next-dynamic-css should have correct order of styles on client component that is sharing styles with next/dynamic (TODO)"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-font/next-font.test.ts": {
    "passed": [
      "app dir - next/font app dir - next-font Dev errors should recover on font loader error",
      "app dir - next/font app dir - next-font computed styles should have correct styles at /",
      "app dir - next/font app dir - next-font computed styles should have correct styles at /client",
      "app dir - next/font app dir - next-font import values should have correct values at /",
      "app dir - next/font app dir - next-font import values should have correct values at /client",
      "app dir - next/font app dir - next-font import values should transform code in node_modules",
      "app dir - next/font app dir - next-font navigation should not have duplicate preload tags on navigation"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-image/next-image-https.test.ts": {
    "passed": [
      "app dir - next-image (with https) only runs on CI as it requires administrator privileges"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-image/next-image-proxy.test.ts": {
    "passed": [
      "next-image-proxy loads images without any errors",
      "next-image-proxy should work with connection upgrade by removing it via filterReqHeaders()"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-image/next-image.test.ts": {
    "passed": [
      "app dir - next-image browser content should render images nested under page dir on /nested route",
      "app dir - next-image browser content should render images on / route",
      "app dir - next-image image content should render images nested under page dir on /nested route",
      "app dir - next-image image content should render images on / route",
      "app dir - next-image image content should render images on /client route",
      "app dir - next-image image content should render legacy images in edge runtime on /legacy-edge-runtime route",
      "app dir - next-image image content should render legacy images under /legacy route",
      "app dir - next-image ssr content should render images nested under page dir on /nested route",
      "app dir - next-image ssr content should render images on / route",
      "app dir - next-image ssr content should render images on /client route"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/next-script/next-script.test.ts": {
    "passed": [
      "Script component with crossOrigin props should be set crossOrigin also in preload link tag"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found-default/index.test.ts": {
    "passed": [
      "app dir - not found with default 404 page should be able to navigate to page calling not-found",
      "app dir - not found with default 404 page should be able to navigate to page with calling not-found in metadata",
      "app dir - not found with default 404 page should error on client notFound from root layout in browser",
      "app dir - not found with default 404 page should error on server notFound from root layout on server-side",
      "app dir - not found with default 404 page should render default 404 with root layout for non-existent page",
      "app dir - not found with default 404 page should render default not found for group routes if not found is not defined",
      "app dir - not found with default 404 page should return 404 status code for default not-found page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/basic/index.test.ts": {
    "passed": [
      "app dir - not-found - basic should propagate notFound errors past a segment's error boundary",
      "app dir - not-found - basic should return 404 status code for custom not-found page",
      "app dir - not-found - basic with default runtime should escalate notFound to parent layout if no not-found boundary present in current layer",
      "app dir - not-found - basic with default runtime should match dynamic route not-found boundary correctly",
      "app dir - not-found - basic with default runtime should not reload the page",
      "app dir - not-found - basic with default runtime should render the 404 page when the file is removed, and restore the page when re-added",
      "app dir - not-found - basic with default runtime should use the not-found page for non-matching routes",
      "app dir - not-found - basic with runtime = edge should escalate notFound to parent layout if no not-found boundary present in current layer",
      "app dir - not-found - basic with runtime = edge should match dynamic route not-found boundary correctly",
      "app dir - not-found - basic with runtime = edge should not reload the page",
      "app dir - not-found - basic with runtime = edge should use the not-found page for non-matching routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/conflict-route/index.test.ts": {
    "passed": [
      "app dir - not-found - conflict route with default runtime should allow to have a valid /not-found route",
      "app dir - not-found - conflict route with default runtime should use the not-found page for non-matching routes",
      "app dir - not-found - conflict route with runtime = edge should allow to have a valid /not-found route",
      "app dir - not-found - conflict route with runtime = edge should use the not-found page for non-matching routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/css-precedence/index.test.ts": {
    "passed": [
      "not-found app dir css should load css while navigation between not-found and page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/default/default.test.ts": {
    "passed": [
      "app dir - not-found - default should has noindex in the head html"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/group-route-root-not-found/index.test.ts": {
    "passed": [
      "app dir - group routes with root not-found should render default 404 with root layout for non-existent page",
      "app dir - group routes with root not-found should render root not found for group routes if hit 404"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/not-found/group-route/index.test.ts": {
    "passed": [
      "app dir - not-found - group route with default runtime should use the not-found page under group routes",
      "app dir - not-found - group route with runtime = edge should use the not-found page under group routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/options-request/options-request.test.ts": {
    "passed": [
      "options-request should 404 for an OPTIONS request to a non-existent route",
      "options-request should respond with a 200 + response body when invoking a pages API route with an OPTIONS request",
      "options-request should respond with a 204 No Content when invoking an app route handler with an OPTIONS request",
      "options-request should return a 400 status code when invoking /app-page with an OPTIONS request",
      "options-request should return a 400 status code when invoking /pages-page with an OPTIONS request"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/pages-to-app-routing/pages-to-app-routing.test.ts": {
    "passed": ["pages-to-app-routing should work using browser"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-route-not-found-params/parallel-route-not-found-params.test.ts": {
    "passed": [
      "parallel-route-not-found should behave correctly without any errors",
      "parallel-route-not-found should handle the not found case correctly without any errors"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-route-not-found/parallel-route-not-found.test.ts": {
    "passed": [
      "parallel-route-not-found should handle `notFound()` in a slot",
      "parallel-route-not-found should handle `notFound()` in generateMetadata on a page that also renders a parallel route",
      "parallel-route-not-found should handle a layout that attempts to render a missing parallel route",
      "parallel-route-not-found should handle multiple missing parallel routes",
      "parallel-route-not-found should not log any warnings for a regular not found page",
      "parallel-route-not-found should render the page & slots if all parallel routes are found"
    ],
    "failed": [],
    "pending": [
      "parallel-route-not-found should handle `notFound()` in a slot with no `children` slot"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-and-interception-basepath/parallel-routes-and-interception-basepath.test.ts": {
    "passed": [
      "parallel-routes-and-interception-basepath should show normal route via direct link with basepath when parallel intercepted slot exist",
      "parallel-routes-and-interception-basepath should show parallel intercepted slot with basepath"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-and-interception/parallel-routes-and-interception.test.ts": {
    "passed": [
      "parallel-routes-and-interception parallel routes should apply the catch-all route to the parallel route if no matching route is found",
      "parallel-routes-and-interception parallel routes should display all parallel route params with useParams",
      "parallel-routes-and-interception parallel routes should handle a loading state",
      "parallel-routes-and-interception parallel routes should load CSS for a default page that exports another page",
      "parallel-routes-and-interception parallel routes should match parallel routes",
      "parallel-routes-and-interception parallel routes should match parallel routes in route groups",
      "parallel-routes-and-interception parallel routes should match the catch-all routes of the more specific path, if there is more than one catch-all route",
      "parallel-routes-and-interception parallel routes should navigate with a link with prefetch=false",
      "parallel-routes-and-interception parallel routes should only scroll to the parallel route that was navigated to",
      "parallel-routes-and-interception parallel routes should render nested parallel routes",
      "parallel-routes-and-interception parallel routes should support layout files in parallel routes",
      "parallel-routes-and-interception parallel routes should support nested parallel routes",
      "parallel-routes-and-interception parallel routes should support parallel route tab bars",
      "parallel-routes-and-interception parallel routes should support parallel routes with no page component",
      "parallel-routes-and-interception parallel routes should throw a 404 when no matching parallel route is found",
      "parallel-routes-and-interception route intercepting should intercept on routes that contain hyphenated/special dynamic params",
      "parallel-routes-and-interception route intercepting should re-render the layout on the server when it had a default child route",
      "parallel-routes-and-interception route intercepting should render an intercepted route at the top level from a nested path",
      "parallel-routes-and-interception route intercepting should render an intercepted route from a slot",
      "parallel-routes-and-interception route intercepting should render intercepted route",
      "parallel-routes-and-interception route intercepting should render intercepted route from a nested route",
      "parallel-routes-and-interception route intercepting should render modal when paired with parallel routes",
      "parallel-routes-and-interception route intercepting should support intercepting local dynamic sibling routes",
      "parallel-routes-and-interception route intercepting should support intercepting with beforeFiles rewrites",
      "parallel-routes-and-interception route intercepting with dynamic catch-all routes should render intercepted route",
      "parallel-routes-and-interception route intercepting with dynamic optional catch-all routes should render intercepted route",
      "parallel-routes-and-interception route intercepting with dynamic routes should render intercepted route",
      "parallel-routes-and-interception-conflicting-pages should gracefully handle when two page segments match the `children` parallel slot"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-breadcrumbs/parallel-routes-breadcrumbs.test.ts": {
    "passed": [
      "parallel-routes-breadcrumbs should provide an unmatched catch-all route with params",
      "parallel-routes-breadcrumbs should render the breadcrumbs correctly with catchall route segments",
      "parallel-routes-breadcrumbs should render the breadcrumbs correctly with optional catchall route segments",
      "parallel-routes-breadcrumbs should render the breadcrumbs correctly with the non-dynamic route segments"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-children-slot/parallel-routes-catchall-children-slot.test.ts": {
    "passed": [
      "parallel-routes-catchall-children-slot should match the @children slot for a page before attempting to match the catchall"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-default/parallel-routes-catchall-default.test.ts": {
    "passed": [
      "parallel-routes-catchall-default should match default paths before catch-all"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-dynamic-segment/parallel-routes-catchall-dynamic-segment.test.ts": {
    "passed": [
      "parallel-routes-catchall-dynamic-segment should match default and dynamic segment paths before catch-all"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-groups/parallel-routes-catchall-groups.test.ts": {
    "passed": [
      "parallel-routes-catchall-groups should work without throwing any errors about conflicting paths"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-slotted-non-catchalls/parallel-routes-catchall-slotted-non-catchalls.test.ts": {
    "passed": [
      "parallel-routes-catchall-slotted-non-catchalls should match default and dynamic segment paths before catch-all"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall-specificity/parallel-routes-catchall-specificity.test.ts": {
    "passed": [
      "parallel-routes-catchall-specificity should match the catch-all route when navigating from a page with a similar path depth as the previously matched slot"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-catchall/parallel-routes-catchall.test.ts": {
    "passed": [
      "parallel-routes-catchall should match both the catch-all page & slot",
      "parallel-routes-catchall should match correctly when defining an explicit page & slot",
      "parallel-routes-catchall should match correctly when defining an explicit page but no slot",
      "parallel-routes-catchall should match correctly when defining an explicit slot but no page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-css/parallel-routes-css.test.ts": {
    "passed": [
      "parallel-routes-catchall-css should properly load the Head content from multiple leaf segments"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-generate-static-params/parallel-routes-generate-static-params.test.ts": {
    "passed": [
      "parallel-routes-generate-static-params should render the intercepted/non-intercepted modal"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-layouts/parallel-routes-layouts.test.ts": {
    "passed": [
      "parallel-routes-layouts should properly render layouts for multiple slots"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-not-found/parallel-routes-not-found.test.ts": {
    "passed": [
      "parallel-routes-and-interception should not render the @children slot when the @slot is not found"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-revalidation/parallel-routes-revalidation.test.ts": {
    "passed": [
      "parallel-routes-revalidation router.refresh (dynamic) - searchParams: false should correctly refresh data for previously intercepted modal and active page slot",
      "parallel-routes-revalidation router.refresh (dynamic) - searchParams: false should correctly refresh data for the intercepted route and previously active page slot",
      "parallel-routes-revalidation router.refresh (dynamic) - searchParams: true should correctly refresh data for previously intercepted modal and active page slot",
      "parallel-routes-revalidation router.refresh (dynamic) - searchParams: true should correctly refresh data for the intercepted route and previously active page slot",
      "parallel-routes-revalidation router.refresh (regular) - searchParams: false should correctly refresh data for previously intercepted modal and active page slot",
      "parallel-routes-revalidation router.refresh (regular) - searchParams: false should correctly refresh data for the intercepted route and previously active page slot",
      "parallel-routes-revalidation router.refresh (regular) - searchParams: true should correctly refresh data for previously intercepted modal and active page slot",
      "parallel-routes-revalidation router.refresh (regular) - searchParams: true should correctly refresh data for the intercepted route and previously active page slot",
      "parallel-routes-revalidation server action revalidation handles refreshing when multiple parallel slots are active",
      "parallel-routes-revalidation server action revalidation should not trigger a refresh for the page that is being redirected to",
      "parallel-routes-revalidation should handle a redirect action when called in a slot",
      "parallel-routes-revalidation should handle router.refresh() when called in a slot",
      "parallel-routes-revalidation should not trigger full page when calling router.refresh() on an intercepted route",
      "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/catchall/foobar)",
      "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/detail-page)",
      "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/dynamic/foobar)",
      "parallel-routes-revalidation should not trigger the intercepted route when lazy-fetching missing data",
      "parallel-routes-revalidation should refresh the correct page when a server action triggers a redirect",
      "parallel-routes-revalidation should submit the action and revalidate the page data"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-root-slot/parallel-routes-root-slot.test.ts": {
    "passed": [
      "parallel-routes-root-slot Should render the root parallel route"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/parallel-routes-use-selected-layout-segment/parallel-routes-use-selected-layout-segment.test.ts": {
    "passed": [
      "parallel-routes-use-selected-layout-segment hard nav to parallel route",
      "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav around other router pages",
      "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav to parallel route and soft nav back to another router page",
      "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav to parallel routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/params-hooks-compat/index.test.ts": {
    "passed": [
      "app-dir - params hooks compat should only access path params with useParams",
      "app-dir - params hooks compat should only access search params with useSearchParams"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-errors/ppr-errors.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "ppr build errors production mode outside of a suspense boundary should fail the build for uncaught errors",
      "ppr build errors production mode when a postpone call is caught and logged it should should include a message telling why",
      "ppr build errors production mode within a suspense boundary should fail the build for uncaught prerender errors"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-full/ppr-full.test.ts": {
    "passed": [
      "ppr-full HTML Response for / should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for / should cache the static part",
      "ppr-full HTML Response for / should have correct headers",
      "ppr-full HTML Response for / should resume with dynamic content",
      "ppr-full HTML Response for /dynamic/force-dynamic should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /dynamic/force-dynamic should have correct headers",
      "ppr-full HTML Response for /dynamic/force-dynamic should resume with dynamic content",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should have correct headers",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should resume with dynamic content",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should have correct headers",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should resume with dynamic content",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should have correct headers",
      "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should resume with dynamic content",
      "ppr-full HTML Response for /dynamic/force-static should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /dynamic/force-static should have correct headers",
      "ppr-full HTML Response for /dynamic/force-static should not contain dynamic content",
      "ppr-full HTML Response for /loading/a should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /loading/a should cache the static part",
      "ppr-full HTML Response for /loading/a should have correct headers",
      "ppr-full HTML Response for /loading/a should resume with dynamic content",
      "ppr-full HTML Response for /loading/b should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /loading/b should cache the static part",
      "ppr-full HTML Response for /loading/b should have correct headers",
      "ppr-full HTML Response for /loading/b should resume with dynamic content",
      "ppr-full HTML Response for /loading/c should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /loading/c should cache the static part",
      "ppr-full HTML Response for /loading/c should have correct headers",
      "ppr-full HTML Response for /loading/c should resume with dynamic content",
      "ppr-full HTML Response for /metadata should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /metadata should cache the static part",
      "ppr-full HTML Response for /metadata should have correct headers",
      "ppr-full HTML Response for /metadata should resume with dynamic content",
      "ppr-full HTML Response for /nested/a should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /nested/a should cache the static part",
      "ppr-full HTML Response for /nested/a should have correct headers",
      "ppr-full HTML Response for /nested/a should resume with dynamic content",
      "ppr-full HTML Response for /nested/b should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /nested/b should cache the static part",
      "ppr-full HTML Response for /nested/b should have correct headers",
      "ppr-full HTML Response for /nested/b should resume with dynamic content",
      "ppr-full HTML Response for /nested/c should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /nested/c should cache the static part",
      "ppr-full HTML Response for /nested/c should have correct headers",
      "ppr-full HTML Response for /nested/c should resume with dynamic content",
      "ppr-full HTML Response for /no-suspense should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /no-suspense should cache the static part",
      "ppr-full HTML Response for /no-suspense should have correct headers",
      "ppr-full HTML Response for /no-suspense should resume with dynamic content",
      "ppr-full HTML Response for /no-suspense/nested/a should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /no-suspense/nested/a should cache the static part",
      "ppr-full HTML Response for /no-suspense/nested/a should have correct headers",
      "ppr-full HTML Response for /no-suspense/nested/a should resume with dynamic content",
      "ppr-full HTML Response for /no-suspense/nested/b should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /no-suspense/nested/b should cache the static part",
      "ppr-full HTML Response for /no-suspense/nested/b should have correct headers",
      "ppr-full HTML Response for /no-suspense/nested/b should resume with dynamic content",
      "ppr-full HTML Response for /no-suspense/nested/c should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /no-suspense/nested/c should cache the static part",
      "ppr-full HTML Response for /no-suspense/nested/c should have correct headers",
      "ppr-full HTML Response for /no-suspense/nested/c should resume with dynamic content",
      "ppr-full HTML Response for /on-demand/a should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /on-demand/a should cache the static part",
      "ppr-full HTML Response for /on-demand/a should have correct headers",
      "ppr-full HTML Response for /on-demand/a should resume with dynamic content",
      "ppr-full HTML Response for /on-demand/b should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /on-demand/b should cache the static part",
      "ppr-full HTML Response for /on-demand/b should have correct headers",
      "ppr-full HTML Response for /on-demand/b should resume with dynamic content",
      "ppr-full HTML Response for /on-demand/c should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /on-demand/c should cache the static part",
      "ppr-full HTML Response for /on-demand/c should have correct headers",
      "ppr-full HTML Response for /on-demand/c should resume with dynamic content",
      "ppr-full HTML Response for /static should allow navigations to and from a pages/ page",
      "ppr-full HTML Response for /static should have correct headers",
      "ppr-full HTML Response for /static should not contain dynamic content",
      "ppr-full Metadata should set the right metadata when generateMetadata uses dynamic APIs",
      "ppr-full Navigation Signals notFound() for /navigation/not-found should have correct headers",
      "ppr-full Navigation Signals notFound() for /navigation/not-found/dynamic should cache the static part",
      "ppr-full Navigation Signals notFound() for /navigation/not-found/dynamic should have correct headers",
      "ppr-full Navigation Signals redirect() for /navigation/redirect should have correct headers",
      "ppr-full Navigation Signals redirect() for /navigation/redirect/dynamic should cache the static part",
      "ppr-full Navigation Signals redirect() for /navigation/redirect/dynamic should have correct headers",
      "ppr-full Test Setup has all the test pathnames listed in the links component"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-incremental/ppr-incremental.test.ts": {
    "passed": [],
    "failed": [],
    "pending": ["ppr-incremental should skip next dev"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/avoid-popstate-flash/avoid-popstate-flash.test.ts": {
    "passed": ["avoid-popstate-flash should skip dev & deploy"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/incremental/incremental.test.ts": {
    "passed": [
      "ppr-navigations incremental can navigate between all the links and back without writing to disk"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/loading-tsx-no-partial-rendering/loading-tsx-no-partial-rendering.test.ts": {
    "passed": ["loading-tsx-no-partial-rendering should skip dev & deploy"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/search-params/search-params.test.ts": {
    "passed": ["search-params ppr is disabled in dev"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/simple/simple.test.ts": {
    "passed": [
      "ppr-navigations simple can navigate between all the links and back"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-navigations/stale-prefetch-entry/stale-prefetch-entry.test.ts": {
    "passed": ["stale-prefetch-entry should skip dev & deploy"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr-unstable-cache/ppr-unstable-cache.test.ts": {
    "passed": [],
    "failed": [],
    "pending": ["ppr-unstable-cache should not run in dev mode"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/ppr/ppr.test.ts": {
    "passed": [
      "ppr /no-suspense/node/gsp/[slug] should serve the static & dynamic parts",
      "ppr /suspense/node/gsp/[slug] should not have the dynamic part",
      "ppr /suspense/node/gsp/[slug] should serve the static part first",
      "ppr for /loading/nested/1 should have the dynamic part",
      "ppr for /loading/nested/1 should serve the static part",
      "ppr for /loading/nested/2 should have the dynamic part",
      "ppr for /loading/nested/2 should serve the static part",
      "ppr for /loading/nested/3 should have the dynamic part",
      "ppr for /loading/nested/3 should serve the static part",
      "ppr for /suspense/node should have the dynamic part",
      "ppr for /suspense/node should serve the static part",
      "ppr for /suspense/node/nested/1 should have the dynamic part",
      "ppr for /suspense/node/nested/1 should serve the static part",
      "ppr for /suspense/node/nested/2 should have the dynamic part",
      "ppr for /suspense/node/nested/2 should serve the static part",
      "ppr for /suspense/node/nested/3 should have the dynamic part",
      "ppr for /suspense/node/nested/3 should serve the static part",
      "ppr search parameters should render the page with the search parameters",
      "ppr should indicate the feature is experimental",
      "ppr with suspense for /suspense/edge should eventually render the dynamic part",
      "ppr with suspense for /suspense/node should eventually render the dynamic part",
      "ppr without suspense for /no-suspense should immediately render the dynamic part"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/prefetch-searchparam/prefetch-searchparam.test.ts": {
    "passed": [
      "prefetch-searchparam should set prefetch cache properly on different search params"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/prefetching-not-found/prefetching-not-found.test.ts": {
    "passed": [
      "prefetching-not-found should correctly navigate to/from a global 404 page when following links with prefetch=auto"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/react-owner-stacks-svgr/react-owner-stacks-svgr.test.ts": {
    "passed": [
      "react-owner-stacks-svgr renders an SVG that is transformed by @svgr/webpack into a React component"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/resolve-extensions/resolve-extensions.test.ts": {
    "passed": [
      "turbo-resolve-extensions should SSR",
      "turbo-resolve-extensions should work using browser"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/resource-url-encoding/resource-url-encoding.test.ts": {
    "passed": [
      "scripts encodes characters in app router",
      "scripts encodes characters in pages router",
      "styles encodes characters in app router",
      "styles encodes characters in pages router"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/revalidate-dynamic/revalidate-dynamic.test.ts": {
    "passed": [
      "app-dir revalidate-dynamic should revalidate the data with /api/revalidate-path",
      "app-dir revalidate-dynamic should revalidate the data with /api/revalidate-tag"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/rewrites-redirects/rewrites-redirects.test.ts": {
    "passed": [
      "redirects and rewrites navigation using button should redirect from middleware correctly",
      "redirects and rewrites navigation using button should redirect from next.config.js correctly",
      "redirects and rewrites navigation using button should redirect using catchall from next.config.js correctly",
      "redirects and rewrites navigation using button should rewrite from middleware correctly",
      "redirects and rewrites navigation using button should rewrite from next.config.js correctly",
      "redirects and rewrites navigation using link should redirect from middleware correctly",
      "redirects and rewrites navigation using link should redirect from next.config.js correctly",
      "redirects and rewrites navigation using link should redirect using catchall from next.config.js correctly",
      "redirects and rewrites navigation using link should rewrite from middleware correctly",
      "redirects and rewrites navigation using link should rewrite from next.config.js correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/root-layout-redirect/root-layout-redirect.test.ts": {
    "passed": ["root-layout-redirect should work using browser"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/root-layout-render-once/index.test.ts": {
    "passed": [
      "app-dir root layout render once should only render root layout once"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/root-layout/root-layout.test.ts": {
    "passed": [
      "app-dir root layout Should do a mpa navigation when switching root layout should work with basic routes",
      "app-dir root layout Should do a mpa navigation when switching root layout should work with dynamic catchall routes",
      "app-dir root layout Should do a mpa navigation when switching root layout should work with dynamic routes",
      "app-dir root layout Should do a mpa navigation when switching root layout should work with parallel routes",
      "app-dir root layout Should do a mpa navigation when switching root layout should work with route groups",
      "app-dir root layout Should do a mpa navigation when switching root layout should work with static routes",
      "app-dir root layout should correctly handle navigation between multiple root layouts"
    ],
    "failed": [],
    "pending": [
      "app-dir root layout Missing required tags should error on page load",
      "app-dir root layout Missing required tags should error on page load on static generation",
      "app-dir root layout Missing required tags should error on page navigation"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/route-page-manifest-bug/route-page-manifest-bug.test.ts": {
    "passed": [
      "route-page-manifest-bug should work when requesting route handler after page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/router-autoscroll/router-autoscroll.test.ts": {
    "passed": [
      "router autoscrolling on navigation bugs Should apply scroll when loading.js is used",
      "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is display none",
      "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is position fixed",
      "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is position sticky",
      "router autoscrolling on navigation horizontal scroll should't scroll horizontally",
      "router autoscrolling on navigation router.refresh() should not scroll the page when we hot reload",
      "router autoscrolling on navigation router.refresh() should not scroll when called alone",
      "router autoscrolling on navigation router.refresh() should not stop router.push() from scrolling",
      "router autoscrolling on navigation vertical scroll should not scroll to top of document if page in viewport",
      "router autoscrolling on navigation vertical scroll should not scroll when the top of the page is in the viewport",
      "router autoscrolling on navigation vertical scroll should scroll down to the navigated page when it's below viewort",
      "router autoscrolling on navigation vertical scroll should scroll to top of document if possible while giving focus to page",
      "router autoscrolling on navigation vertical scroll should scroll to top of document when navigating between to pages without layout",
      "router autoscrolling on navigation vertical scroll should scroll to top of page when scrolling to phe top of the document wouldn't have the page in the viewport"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/router-stuck-dynamic-static-segment/router-stuck-dynamic-static-segment.test.ts": {
    "passed": [
      "router-stuck-dynamic-static-segment should allow navigation between dynamic parameter and static parameter of the same value"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/rsc-basic/rsc-basic.test.ts": {
    "passed": [
      "app dir - rsc basics next internal shared context should not error if just load next/navigation module in pages/api",
      "app dir - rsc basics next internal shared context should not error if just load next/router module in app page",
      "app dir - rsc basics react@experimental should opt into the react@experimental when enabling ppr",
      "app dir - rsc basics react@experimental should opt into the react@experimental when enabling taint",
      "app dir - rsc basics should be able to call legacy react-dom/server APIs in client components",
      "app dir - rsc basics should be able to navigate between rsc routes",
      "app dir - rsc basics should correctly render component returning null",
      "app dir - rsc basics should correctly render component returning undefined",
      "app dir - rsc basics should correctly render layout returning null",
      "app dir - rsc basics should correctly render layout returning undefined",
      "app dir - rsc basics should correctly render page returning null",
      "app dir - rsc basics should correctly render page returning undefined",
      "app dir - rsc basics should create client reference successfully for all file conventions",
      "app dir - rsc basics should escape streaming data correctly",
      "app dir - rsc basics should handle client components imported as namespace",
      "app dir - rsc basics should handle named client components imported as page",
      "app dir - rsc basics should handle streaming server components correctly",
      "app dir - rsc basics should handle various kinds of exports correctly",
      "app dir - rsc basics should link correctly with next/link without mpa navigation to the page",
      "app dir - rsc basics should not apply rsc syntax checks in pages/api",
      "app dir - rsc basics should render built-in 404 page for missing route if pagesDir is not presented",
      "app dir - rsc basics should render css-in-js suspense boundary correctly",
      "app dir - rsc basics should render initial styles of css-in-js in edge SSR correctly",
      "app dir - rsc basics should render initial styles of css-in-js in nodejs SSR correctly",
      "app dir - rsc basics should render server components correctly",
      "app dir - rsc basics should resolve different kinds of components correctly",
      "app dir - rsc basics should reuse the inline flight response without sending extra requests",
      "app dir - rsc basics should stick to the url without trailing /page suffix",
      "app dir - rsc basics should support multi-level server component imports",
      "app dir - rsc basics should support native modules in server component",
      "app dir - rsc basics should support next/link in server components",
      "app dir - rsc basics should support partial hydration with inlined server data",
      "app dir - rsc basics should support streaming for flight response",
      "app dir - rsc basics should suspense next/image in server components",
      "app dir - rsc basics should suspense next/legacy/image in server components",
      "app dir - rsc basics should track client components in dynamic imports",
      "app dir - rsc basics should use canary react for app"
    ],
    "failed": [],
    "pending": [
      "app dir - rsc basics should not use bundled react for pages with app",
      "app dir - rsc basics should support partial hydration with inlined server data in browser"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/rsc-webpack-loader/rsc-webpack-loader.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - rsc webpack loader should support webpack loader rules"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/3rd-party-module/3rd-party-module.test.ts": {
    "passed": [
      "3rd Party CSS Module Support ({\"sass\": \"1.54.0\"}) should render the module",
      "3rd Party CSS Module Support ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/basic-module-additional-data/basic-module-additional-data.test.ts": {
    "passed": [
      "Basic Module Additional Data Support ({\"sass\": \"1.54.0\"}) should render the module",
      "Basic Module Additional Data Support ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/basic-module-include-paths/basic-module-include-paths.test.ts": {
    "passed": [
      "Basic Module Include Paths Support ({\"sass\": \"1.54.0\"}) should render the module",
      "Basic Module Include Paths Support ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/basic-module-prepend-data/basic-module-prepend-data.test.ts": {
    "passed": [
      "Basic Module Prepend Data Support ({\"sass\": \"1.54.0\"}) should render the module",
      "Basic Module Prepend Data Support ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/basic-module/basic-module.test.ts": {
    "passed": [
      "Basic SCSS Module Support ({\"sass\": \"1.54.0\"}) should render the module",
      "Basic SCSS Module Support ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/catch-all-module/catch-all-module.test.ts": {
    "passed": [
      "Catch-all Route CSS Module Usage ({\"sass\": \"1.54.0\"}) should render the module",
      "Catch-all Route CSS Module Usage ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/compilation-and-prefixing/compilation-and-prefixing.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "SCSS Support ({\"sass\": \"1.54.0\"}) Production only CSS Compilation and Prefixing should've compiled and prefixed",
      "SCSS Support ({\"sass\": \"1.54.0\"}) Production only CSS Compilation and Prefixing should've emitted a source map",
      "SCSS Support ({\"sass-embedded\": \"1.75.0\"}) Production only CSS Compilation and Prefixing should've compiled and prefixed",
      "SCSS Support ({\"sass-embedded\": \"1.75.0\"}) Production only CSS Compilation and Prefixing should've emitted a source map"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/composes-basic/composes-basic.test.ts": {
    "passed": [
      "CSS Module Composes Usage (Basic) ({\"sass\": \"1.54.0\"}) should render the module",
      "CSS Module Composes Usage (Basic) ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/composes-external/composes-external.test.ts": {
    "passed": [
      "CSS Module Composes Usage (External) ({\"sass\": \"1.54.0\"}) should render the module",
      "CSS Module Composes Usage (External) ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/data-url/data-url.test.ts": {
    "passed": [
      "SCSS Support loader handling Data Urls ({\"sass\": \"1.54.0\"}) should render the module",
      "SCSS Support loader handling Data Urls ({\"sass-embedded\": \"1.75.0\"}) should render the module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/dev-module/dev-module.test.ts": {
    "passed": [
      "Has CSS Module in computed styles in Development ({\"sass\": \"1.54.0\"}) should have CSS for page",
      "Has CSS Module in computed styles in Development ({\"sass-embedded\": \"1.75.0\"}) should have CSS for page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/dynamic-route-module/dynamic-route-module.test.ts": {
    "passed": [
      "Dynamic Route CSS Module Usage ({\"sass\": \"1.54.0\"}) should apply styles correctly",
      "Dynamic Route CSS Module Usage ({\"sass-embedded\": \"1.75.0\"}) should apply styles correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/external-url/external-url.test.ts": {
    "passed": [
      "SCSS Support loader handling External imports ({\"sass\": \"1.54.0\"}) should include font on the page",
      "SCSS Support loader handling External imports ({\"sass-embedded\": \"1.75.0\"}) should include font on the page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/hmr-module/hmr-module.test.ts": {
    "passed": [
      "Can hot reload CSS Module without losing state ({\"sass\": \"1.54.0\"}) development only should update CSS color without remounting <input>",
      "Can hot reload CSS Module without losing state ({\"sass-embedded\": \"1.75.0\"}) development only should update CSS color without remounting <input>"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/invalid-global-module/invalid-global-module.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid CSS Global Module Usage in node_modules production only should fail to build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/invalid-global-with-app/invalid-global-with-app.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid Global CSS with Custom App production only should fail to build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/invalid-global/invalid-global.test.ts": {
    "passed": [],
    "failed": [],
    "pending": ["Invalid Global CSS production only should fail to build"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/invalid-module-document/invalid-module-document.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid SCSS in _document production only should fail to build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/scss/invalid-module/invalid-module.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid CSS Module Usage in node_modules production only should fail to build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/with-exported-function-config/with-exported-function-config.test.ts": {
    "passed": [
      "with-exported-function-config should have correct values in function config manifest"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/app-dir/x-forwarded-headers/x-forwarded-headers.test.ts": {
    "passed": [
      "x-forwarded-headers already assigned should not override existing x-forwarded-* headers",
      "x-forwarded-headers already assigned should work with multiple x-forwarded-* headers",
      "x-forwarded-headers host header exists should include x-forwarded-* headers relative to host",
      "x-forwarded-headers should include x-forwarded-* headers"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/async-modules-app/index.test.ts": {
    "passed": ["Async modules app router server component async module"],
    "failed": [],
    "pending": ["Async modules app router client component async module"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/async-modules/index.test.ts": {
    "passed": [
      "Async modules can render async 404 pages",
      "Async modules csr async page modules",
      "Async modules ssr async page modules",
      "Async modules works on async api routes",
      "Async modules works with getServerSideProps",
      "Async modules works with getStaticProps"
    ],
    "failed": [],
    "pending": [
      "Async modules can render async AMP pages",
      "Async modules can render async error page"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/basepath-trailing-slash.test.ts": {
    "passed": [
      "basePath + trailingSlash should allow URL query strings on index without refresh",
      "basePath + trailingSlash should allow URL query strings without refresh",
      "basePath + trailingSlash should correctly replace state when same asPath but different url"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/basepath.test.ts": {
    "passed": [
      "basePath should 404 for public file without basePath",
      "basePath should 404 when manually adding basePath with <Link>",
      "basePath should 404 when manually adding basePath with router.push",
      "basePath should 404 when manually adding basePath with router.replace",
      "basePath should add header with basePath by default",
      "basePath should add header without basePath when set to false",
      "basePath should allow URL query strings on index without refresh",
      "basePath should allow URL query strings without refresh",
      "basePath should correctly replace state when same asPath but different url",
      "basePath should fetch data for getServerSideProps without reloading",
      "basePath should fetch data for getStaticProps without reloading",
      "basePath should handle 404 urls that start with basePath",
      "basePath should handle query/hash correctly during query updating ## $search",
      "basePath should handle query/hash correctly during query updating ##? $search",
      "basePath should handle query/hash correctly during query updating ##hello $search",
      "basePath should handle query/hash correctly during query updating ##hello? $search",
      "basePath should handle query/hash correctly during query updating #? $search",
      "basePath should handle query/hash correctly during query updating #a ?hello",
      "basePath should handle query/hash correctly during query updating #a ?hello=",
      "basePath should handle query/hash correctly during query updating #a ?hello=world",
      "basePath should handle query/hash correctly during query updating #hello? $search",
      "basePath should handle query/hash correctly during query updating #hello?world $search",
      "basePath should have basePath field on Router",
      "basePath should have correct href for a link",
      "basePath should have correct href for a link to /",
      "basePath should have correct router paths on first load of /",
      "basePath should have correct router paths on first load of /hello",
      "basePath should navigate an absolute local url with basePath",
      "basePath should navigate an absolute local url without basePath",
      "basePath should navigate an absolute url",
      "basePath should navigate back correctly to a dynamic route",
      "basePath should navigate to /404 correctly client-side",
      "basePath should navigate to /_error correctly client-side",
      "basePath should navigate to external site and back",
      "basePath should navigate to index page with getStaticProps",
      "basePath should navigate to the page without refresh",
      "basePath should not add header with basePath when set to false",
      "basePath should not add header without basePath without disabling",
      "basePath should not redirect with basePath when set to false",
      "basePath should not redirect without basePath without disabling",
      "basePath should not rewrite with basePath when set to false",
      "basePath should not rewrite without basePath without disabling",
      "basePath should not update URL for a 404",
      "basePath should redirect trailing slash correctly",
      "basePath should redirect trailing slash on root correctly",
      "basePath should redirect with basePath by default",
      "basePath should redirect without basePath when set to false",
      "basePath should respect basePath in amphtml link rel",
      "basePath should rewrite with basePath by default",
      "basePath should rewrite without basePath when set to false",
      "basePath should serve public file with basePath correctly",
      "basePath should show 404 for page not under the /docs prefix",
      "basePath should show the hello page under the /docs prefix",
      "basePath should show the other-page page under the /docs prefix",
      "basePath should update dynamic params after mount correctly",
      "basePath should use urls with basepath in router events",
      "basePath should use urls with basepath in router events for cancelled routes",
      "basePath should use urls with basepath in router events for failed route change",
      "basePath should use urls with basepath in router events for hash changes",
      "basePath should work with catch-all page",
      "basePath should work with hash links",
      "basePath should work with nested folder with same name as basePath",
      "basePath should work with normal dynamic page"
    ],
    "failed": [],
    "pending": [
      "basePath should navigate back to a non-basepath 404 that starts with basepath",
      "basePath should navigate to nested index page with getStaticProps"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/browserslist-extends/index.test.ts": {
    "passed": ["browserslist-extends should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/browserslist/browserslist.test.ts": {
    "passed": [],
    "failed": [],
    "pending": ["Browserslist should apply browserslist target"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/browserslist/default-target.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "default browserslist target should apply default browserslist target"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/cancel-request/stream-cancel.test.ts": {
    "passed": [
      "streaming responses cancel inner stream after disconnect edge app route handler cancels stalled stream",
      "streaming responses cancel inner stream after disconnect edge app route handler cancels stream making progress",
      "streaming responses cancel inner stream after disconnect edge app route handler cancels stream that never sent data",
      "streaming responses cancel inner stream after disconnect edge pages api cancels stalled stream",
      "streaming responses cancel inner stream after disconnect edge pages api cancels stream making progress",
      "streaming responses cancel inner stream after disconnect edge pages api cancels stream that never sent data",
      "streaming responses cancel inner stream after disconnect middleware cancels stalled stream",
      "streaming responses cancel inner stream after disconnect middleware cancels stream making progress",
      "streaming responses cancel inner stream after disconnect middleware cancels stream that never sent data",
      "streaming responses cancel inner stream after disconnect node app route handler cancels stalled stream",
      "streaming responses cancel inner stream after disconnect node app route handler cancels stream making progress",
      "streaming responses cancel inner stream after disconnect node app route handler cancels stream that never sent data",
      "streaming responses cancel inner stream after disconnect node pages api cancels stalled stream",
      "streaming responses cancel inner stream after disconnect node pages api cancels stream making progress",
      "streaming responses cancel inner stream after disconnect node pages api cancels stream that never sent data"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/children-page/index.test.ts": {
    "passed": [
      "children-page with app dir should show the content if you have a page named children",
      "children-page with pages dir should show the content if you have a page named children"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/config-promise-export/async-function.test.ts": {
    "passed": ["async export should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/config-promise-export/promise.test.ts": {
    "passed": ["promise export should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/config-schema-check/index.test.ts": {
    "passed": [
      "next.config.js schema validating - defaultConfig should validate against defaultConfig",
      "next.config.js schema validating - invalid config should warn the invalid next config"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/conflicting-app-page-error/index.test.ts": {
    "passed": [
      "Conflict between app file and pages file should error again when there is new conflict",
      "Conflict between app file and pages file should not show error overlay for non conflict pages under app or pages dir",
      "Conflict between app file and pages file should show error overlay for /",
      "Conflict between app file and pages file should show error overlay for /another",
      "Conflict between app file and pages file should support hmr with conflicts"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/custom-app-render/custom-app-render.test.ts": {
    "passed": [
      "custom-app-render should render /",
      "custom-app-render should render /render"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/disable-js-preload/test/index.test.js": {
    "passed": [
      "disabled JS preloads should not have JS preload links",
      "disabled JS preloads should render the page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/dynamic-route-interpolation/index.test.ts": {
    "passed": [
      "Dynamic Route Interpolation should bust data cache",
      "Dynamic Route Interpolation should bust data cache with symbol",
      "Dynamic Route Interpolation should work",
      "Dynamic Route Interpolation should work with brackets",
      "Dynamic Route Interpolation should work with brackets in API routes",
      "Dynamic Route Interpolation should work with parameter itself",
      "Dynamic Route Interpolation should work with parameter itself in API routes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-api-endpoints-can-receive-body/index.test.ts": {
    "passed": [
      "Edge API endpoints can receive body reads the body as text",
      "Edge API endpoints can receive body reads the body from index"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-async-local-storage/index.test.ts": {
    "passed": [
      "edge api can use async local storage cans use a single instance per request",
      "edge api can use async local storage cans use multiple instances per request"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-can-read-request-body/index.test.ts": {
    "passed": [
      "Edge can read request body middleware reads a JSON body",
      "Edge can read request body middleware reads a multipart form data",
      "Edge can read request body middleware reads a text body",
      "Edge can read request body middleware reads an URL encoded form data",
      "Edge can read request body renders the static page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-can-use-wasm-files/index.test.ts": {
    "passed": [
      "edge api endpoints can use wasm files uses the wasm file",
      "middleware can use wasm files can be called twice",
      "middleware can use wasm files lists the necessary wasm bindings in the manifest",
      "middleware can use wasm files uses the wasm file",
      "middleware can use wasm files with the experimental modes on uses the wasm file"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-compiler-can-import-blob-assets/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Edge Compiler can import asset assets allows to assets from node_modules",
      "Edge Compiler can import asset assets allows to fetch a remote URL",
      "Edge Compiler can import asset assets allows to fetch a remote URL with a path and basename",
      "Edge Compiler can import asset assets allows to fetch image assets",
      "Edge Compiler can import asset assets allows to fetch text assets",
      "Edge Compiler can import asset assets extracts all the assets from the bundle"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-compiler-module-exports-preference/index.test.ts": {
    "passed": [
      "Edge compiler module exports preference favors the browser export"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-configurable-runtime/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Configurable runtime for pages and API routes In development mode errors about page using edge runtime",
      "Configurable runtime for pages and API routes In development mode runs with no warning API route on the edge runtime",
      "Configurable runtime for pages and API routes In development mode warns about API route using experimental-edge runtime",
      "Configurable runtime for pages and API routes In development mode warns about page using edge runtime",
      "Configurable runtime for src/pages and API routes In development mode errors about page using edge runtime",
      "Configurable runtime for src/pages and API routes In development mode runs with no warning API route on the edge runtime",
      "Configurable runtime for src/pages and API routes In development mode warns about API route using experimental-edge runtime",
      "Configurable runtime for src/pages and API routes In development mode warns about page using edge runtime"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-pages-support/edge-document.test.ts": {
    "passed": [
      "edge render - custom _document with edge runtime should render page properly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-pages-support/index.test.ts": {
    "passed": [
      "edge-render-getserversideprops should have correct query for pages/api",
      "edge-render-getserversideprops should have correct query for pages/api dynamic",
      "edge-render-getserversideprops should have correct query/params on /[id]",
      "edge-render-getserversideprops should have correct query/params on dynamic rewrite",
      "edge-render-getserversideprops should have correct query/params on index",
      "edge-render-getserversideprops should have correct query/params on rewrite",
      "edge-render-getserversideprops should respond to _next/data for [id] correctly",
      "edge-render-getserversideprops should respond to _next/data for index correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-runtime-pages-api-route/edge-runtime-pages-api-route.test.ts": {
    "passed": [
      "Edge runtime pages-api route should work edge runtime",
      "Edge runtime pages-api route should work with node runtime"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/edge-runtime-uses-edge-light-import-specifier-for-packages/edge-runtime-uses-edge-light-import-specifier-for-packages.test.ts": {
    "passed": [
      "edge-runtime uses edge-light import specifier for packages app-dir imports the correct module",
      "edge-runtime uses edge-light import specifier for packages pages import the correct module",
      "edge-runtime uses edge-light import specifier for packages pages/api endpoints import the correct module"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/esm-externals/esm-externals.test.ts": {
    "passed": [
      "esm-externals app dir url /client should render the correct page",
      "esm-externals app dir url /client should return the correct SSR HTML",
      "esm-externals app dir url /server should render the correct page",
      "esm-externals app dir url /server should return the correct SSR HTML",
      "esm-externals pages url /ssg should render the correct page",
      "esm-externals pages url /ssg should return the correct SSR HTML",
      "esm-externals pages url /ssr should render the correct page",
      "esm-externals pages url /ssr should return the correct SSR HTML",
      "esm-externals pages url /static should render the correct page",
      "esm-externals pages url /static should return the correct SSR HTML"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/favicon-short-circuit/favicon-short-circuit.test.ts": {
    "passed": [
      "favicon-short-circuit should short circuit the favicon in development"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/fetch-failures-have-good-stack-traces-in-edge-runtime/fetch-failures-have-good-stack-traces-in-edge-runtime.test.ts": {
    "passed": [
      "fetch failures have good stack traces in edge runtime when awaiting `fetch` using an unknown domain, stack traces are preserved"
    ],
    "failed": [],
    "pending": [
      "fetch failures have good stack traces in edge runtime when returning `fetch` using an unknown domain, stack traces are preserved"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/geist-font/geist-font.test.ts": {
    "passed": ["geist-font should work with geist font in pages router"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/getserversideprops/test/index.test.ts": {
    "passed": [
      "getServerSideProps should SSR getServerSideProps page correctly",
      "getServerSideProps should SSR normal page correctly",
      "getServerSideProps should allow POST request for getServerSideProps page",
      "getServerSideProps should always call getServerSideProps without caching",
      "getServerSideProps should dedupe server data requests",
      "getServerSideProps should handle throw ENOENT correctly",
      "getServerSideProps should have correct req.url and query for direct visit",
      "getServerSideProps should have correct req.url and query for direct visit dynamic page",
      "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite direct",
      "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite direct with internal query",
      "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite param",
      "getServerSideProps should have correct req.url and query for direct visit dynamic page with query",
      "getServerSideProps should have gssp in __NEXT_DATA__",
      "getServerSideProps should have original req.url for /_next/data request",
      "getServerSideProps should have original req.url for /_next/data request dynamic page",
      "getServerSideProps should have original req.url for /_next/data request dynamic page with query",
      "getServerSideProps should have original req.url for /_next/data request with query",
      "getServerSideProps should load a fast refresh page",
      "getServerSideProps should navigate between pages successfully",
      "getServerSideProps should navigate to a normal page and back",
      "getServerSideProps should not have gssp in __NEXT_DATA__ for non-GSSP page",
      "getServerSideProps should not re-call getServerSideProps when updating query",
      "getServerSideProps should not show warning from url prop being returned",
      "getServerSideProps should only warn for accessing res if not streaming",
      "getServerSideProps should parse query values on mount correctly",
      "getServerSideProps should pass query for data request",
      "getServerSideProps should pass query for data request on navigation",
      "getServerSideProps should provide correct query value for dynamic page",
      "getServerSideProps should reload page on failed data request",
      "getServerSideProps should render 404 correctly when notFound is returned (dynamic)",
      "getServerSideProps should render 404 correctly when notFound is returned (non-dynamic)",
      "getServerSideProps should render 404 correctly when notFound is returned client-transition (dynamic)",
      "getServerSideProps should render 404 correctly when notFound is returned client-transition (non-dynamic)",
      "getServerSideProps should render correctly when notFound is false (dynamic)",
      "getServerSideProps should render correctly when notFound is false (non-dynamic)",
      "getServerSideProps should return data correctly",
      "getServerSideProps should return data correctly for dynamic page",
      "getServerSideProps should return data correctly when props is a promise",
      "getServerSideProps should show error for accessing res after gssp returns",
      "getServerSideProps should show error for accessing res through props promise after gssp returns",
      "getServerSideProps should show error for extra keys returned from getServerSideProps",
      "getServerSideProps should show error for invalid JSON returned from getServerSideProps",
      "getServerSideProps should show error for invalid JSON returned from getStaticProps on CST",
      "getServerSideProps should supply params values for catchall correctly",
      "getServerSideProps should supply query values SSR",
      "getServerSideProps should work with early request ending"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/handle-non-hoisted-swc-helpers/index.test.ts": {
    "passed": ["handle-non-hoisted-swc-helpers should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/hello-world/hello-world.test.ts": {
    "passed": [
      "hello-world should work using browser",
      "hello-world should work using cheerio",
      "hello-world should work with fetch",
      "hello-world should work with html"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-api-support/index.test.ts": {
    "passed": [
      "i18n API support should fallback rewrite non-matching API request",
      "i18n API support should respond to normal API request",
      "i18n API support should respond to normal dynamic API request"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-data-fetching-redirect/index.test.ts": {
    "passed": [
      "i18n-data-fetching-redirect Redirect to another locale gsp-blocking-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale gsp-blocking-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to another locale gsp-fallback-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale gsp-fallback-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to another locale gssp-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale gssp-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to another locale next/link gsp-blocking-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale next/link gsp-blocking-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to another locale next/link gsp-fallback-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale next/link gsp-fallback-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to another locale next/link gssp-redirect en -> sv",
      "i18n-data-fetching-redirect Redirect to another locale next/link gssp-redirect sv -> en",
      "i18n-data-fetching-redirect Redirect to locale from context gsp-blocking-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context gsp-blocking-redirect sv",
      "i18n-data-fetching-redirect Redirect to locale from context gsp-fallback-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context gsp-fallback-redirect sv",
      "i18n-data-fetching-redirect Redirect to locale from context gssp-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context gssp-redirect sv",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-blocking-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-blocking-redirect sv",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-fallback-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-fallback-redirect sv",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gssp-redirect en",
      "i18n-data-fetching-redirect Redirect to locale from context next/link gssp-redirect sv"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-data-route/i18n-data-route.test.ts": {
    "passed": [
      "i18n-data-route with locale prefix /en-CA should render /[slug]/about via /en-CA/blog/about",
      "i18n-data-route with locale prefix /en-CA should render /about via /en-CA/about",
      "i18n-data-route with locale prefix /en-CA should serve data for /[slug]/about",
      "i18n-data-route with locale prefix /en-CA should serve data for /about",
      "i18n-data-route with locale prefix /fr-CA should render /[slug]/about via /fr-CA/blog/about",
      "i18n-data-route with locale prefix /fr-CA should render /about via /fr-CA/about",
      "i18n-data-route with locale prefix /fr-CA should serve data for /[slug]/about",
      "i18n-data-route with locale prefix /fr-CA should serve data for /about",
      "i18n-data-route without locale prefix should render /[slug]/about via /blog/about",
      "i18n-data-route without locale prefix should render /about via /about",
      "i18n-data-route without locale prefix should serve data for /[slug]/about",
      "i18n-data-route without locale prefix should serve data for /about"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-default-locale-redirect/i18n-default-locale-redirect.test.ts": {
    "passed": [
      "i18-default-locale-redirect should not request a path prefixed with default locale",
      "i18-default-locale-redirect should request a path prefixed with non-default locale"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-disallow-multiple-locales/i18n-disallow-multiple-locales.test.ts": {
    "passed": [
      "i18n-disallow-multiple-locales /en should 200",
      "i18n-disallow-multiple-locales /en-US should 200",
      "i18n-disallow-multiple-locales /en-US/en should 404",
      "i18n-disallow-multiple-locales /en-US/en-US should 404",
      "i18n-disallow-multiple-locales /en-US/fr should 404",
      "i18n-disallow-multiple-locales /en-US/fr-BE should 404",
      "i18n-disallow-multiple-locales /en-US/nl should 404",
      "i18n-disallow-multiple-locales /en-US/nl-BE should 404",
      "i18n-disallow-multiple-locales /en-US/nl-NL should 404",
      "i18n-disallow-multiple-locales /en/en should 404",
      "i18n-disallow-multiple-locales /en/en-US should 404",
      "i18n-disallow-multiple-locales /en/fr should 404",
      "i18n-disallow-multiple-locales /en/fr-BE should 404",
      "i18n-disallow-multiple-locales /en/nl should 404",
      "i18n-disallow-multiple-locales /en/nl-BE should 404",
      "i18n-disallow-multiple-locales /en/nl-NL should 404",
      "i18n-disallow-multiple-locales /fr should 200",
      "i18n-disallow-multiple-locales /fr-BE should 200",
      "i18n-disallow-multiple-locales /fr-BE/en should 404",
      "i18n-disallow-multiple-locales /fr-BE/en-US should 404",
      "i18n-disallow-multiple-locales /fr-BE/fr should 404",
      "i18n-disallow-multiple-locales /fr-BE/fr-BE should 404",
      "i18n-disallow-multiple-locales /fr-BE/nl should 404",
      "i18n-disallow-multiple-locales /fr-BE/nl-BE should 404",
      "i18n-disallow-multiple-locales /fr-BE/nl-NL should 404",
      "i18n-disallow-multiple-locales /fr/en should 404",
      "i18n-disallow-multiple-locales /fr/en-US should 404",
      "i18n-disallow-multiple-locales /fr/fr should 404",
      "i18n-disallow-multiple-locales /fr/fr-BE should 404",
      "i18n-disallow-multiple-locales /fr/nl should 404",
      "i18n-disallow-multiple-locales /fr/nl-BE should 404",
      "i18n-disallow-multiple-locales /fr/nl-NL should 404",
      "i18n-disallow-multiple-locales /nl should 200",
      "i18n-disallow-multiple-locales /nl-BE should 200",
      "i18n-disallow-multiple-locales /nl-BE/en should 404",
      "i18n-disallow-multiple-locales /nl-BE/en-US should 404",
      "i18n-disallow-multiple-locales /nl-BE/fr should 404",
      "i18n-disallow-multiple-locales /nl-BE/fr-BE should 404",
      "i18n-disallow-multiple-locales /nl-BE/nl should 404",
      "i18n-disallow-multiple-locales /nl-BE/nl-BE should 404",
      "i18n-disallow-multiple-locales /nl-BE/nl-NL should 404",
      "i18n-disallow-multiple-locales /nl-NL should 200",
      "i18n-disallow-multiple-locales /nl-NL/en should 404",
      "i18n-disallow-multiple-locales /nl-NL/en-US should 404",
      "i18n-disallow-multiple-locales /nl-NL/fr should 404",
      "i18n-disallow-multiple-locales /nl-NL/fr-BE should 404",
      "i18n-disallow-multiple-locales /nl-NL/nl should 404",
      "i18n-disallow-multiple-locales /nl-NL/nl-BE should 404",
      "i18n-disallow-multiple-locales /nl-NL/nl-NL should 404",
      "i18n-disallow-multiple-locales /nl/en should 404",
      "i18n-disallow-multiple-locales /nl/en-US should 404",
      "i18n-disallow-multiple-locales /nl/fr should 404",
      "i18n-disallow-multiple-locales /nl/fr-BE should 404",
      "i18n-disallow-multiple-locales /nl/nl should 404",
      "i18n-disallow-multiple-locales /nl/nl-BE should 404",
      "i18n-disallow-multiple-locales /nl/nl-NL should 404",
      "i18n-disallow-multiple-locales should verify the default locale works"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-ignore-redirect-source-locale/redirects-with-basepath.test.ts": {
    "passed": [
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: ",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /en",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /nl",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /sv",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: /",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: en",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: sv",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: /",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: en",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: sv",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: /",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: en",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: sv",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: /",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: en",
      "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: sv"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-ignore-redirect-source-locale/redirects.test.ts": {
    "passed": [
      "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: ",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /en",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /nl",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /sv",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: /",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: en",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: sv",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: /",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: en",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: sv",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: /",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: en",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: sv",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: /",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: en",
      "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: sv"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-ignore-rewrite-source-locale/rewrites-with-basepath.test.ts": {
    "passed": [
      "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /sv",
      "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /sv"
    ],
    "failed": [],
    "pending": [
      "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /sv"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-ignore-rewrite-source-locale/rewrites.test.ts": {
    "passed": [
      "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /sv",
      "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /sv"
    ],
    "failed": [],
    "pending": [
      "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: ",
      "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /en",
      "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /nl",
      "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /sv"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/i18n-preferred-locale-detection/i18n-preferred-locale-detection.test.ts": {
    "passed": [
      "i18-preferred-locale-redirect should not request a path prefixed with my preferred detected locale when clicking link to index from a non-locale-prefixed path",
      "i18-preferred-locale-redirect should request a path prefixed with my preferred detected locale when accessing index",
      "i18-preferred-locale-redirect should request a path prefixed with my preferred detected locale when clicking link to index from a locale-prefixed path"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/ignore-invalid-popstateevent/with-i18n.test.ts": {
    "passed": [
      "i18n: Event with stale state - static route previously was dynamic Don't ignore event with different locale",
      "i18n: Event with stale state - static route previously was dynamic Ignore event with query param",
      "i18n: Event with stale state - static route previously was dynamic Ignore event without query param"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/ignore-invalid-popstateevent/without-i18n.test.ts": {
    "passed": [
      "Event with stale state - static route previously was dynamic Ignore event with query param",
      "Event with stale state - static route previously was dynamic Ignore event without query param"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/import-conditions/import-conditions.test.ts": {
    "passed": [
      "react version App Router Route Handler with edge runtime",
      "react version App Router Route Handler with nodejs runtime",
      "react version App Router page headers with edge runtime",
      "react version App Router page headers with nodejs runtime",
      "react version App Router page with edge runtime",
      "react version App Router page with nodejs runtime",
      "react version Pages Router page headers with edge runtime",
      "react version Pages Router page headers with nodejs runtime",
      "react version Pages Router page with edge runtime",
      "react version Pages Router page with nodejs runtime after hydration"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/import-meta/import-meta.test.ts": {
    "passed": [
      "import-meta import.meta.url should work in browser",
      "import-meta import.meta.url should work on the server"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/instrumentation-hook-src/instrumentation-hook-src.test.ts": {
    "passed": [
      "instrumentation-hook-rsc instrumentation should not overlap with a instrumentation page",
      "instrumentation-hook-rsc instrumentation should run the edge instrumentation compiled version with the edge runtime",
      "instrumentation-hook-rsc instrumentation should run the instrumentation hook"
    ],
    "failed": [],
    "pending": [
      "instrumentation-hook-rsc instrumentation should reload the server when the instrumentation hook changes"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/instrumentation-hook/instrumentation-hook.test.ts": {
    "passed": [
      "Instrumentation Hook general should not overlap with a instrumentation page",
      "Instrumentation Hook with-async-edge-page with-async-edge-page should run the instrumentation hook",
      "Instrumentation Hook with-async-node-page with-async-node-page should run the instrumentation hook",
      "Instrumentation Hook with-edge-api with-edge-api should run the instrumentation hook",
      "Instrumentation Hook with-edge-page with-edge-page should run the instrumentation hook",
      "Instrumentation Hook with-middleware with-middleware should run the instrumentation hook",
      "Instrumentation Hook with-node-api with-node-api should run the instrumentation hook",
      "Instrumentation Hook with-node-page with-node-page should run the instrumentation hook"
    ],
    "failed": [],
    "pending": [
      "Instrumentation Hook general should reload the server when the instrumentation hook changes"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/link-with-api-rewrite/index.test.ts": {
    "passed": [
      "link-with-api-rewrite should perform hard navigation for direct urls",
      "link-with-api-rewrite should perform hard navigation for rewritten urls"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/manual-client-base-path/index.test.ts": {
    "passed": [
      "manual-client-base-path should navigate correctly from another",
      "manual-client-base-path should navigate correctly from index",
      "manual-client-base-path should not update with basePath on mount /",
      "manual-client-base-path should not update with basePath on mount /another",
      "manual-client-base-path should not update with basePath on mount /dynamic/first",
      "manual-client-base-path should not update with basePath on mount /dynamic/second",
      "manual-client-base-path should not warn for flag in output"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-base-path/test/index.test.ts": {
    "passed": [
      "Middleware base tests router.query must exist when Link clicked page routing",
      "Middleware base tests should execute from absolute paths"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-custom-matchers-basepath/test/index.test.ts": {
    "passed": [
      "Middleware custom matchers basePath should match",
      "Middleware custom matchers basePath should match has query on client routing",
      "Middleware custom matchers basePath should not match"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-custom-matchers-i18n/test/index.test.ts": {
    "passed": [
      "Middleware custom matchers i18n should match",
      "Middleware custom matchers i18n should match has query on client routing",
      "Middleware custom matchers i18n should not match",
      "Middleware custom matchers with root should not match"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-custom-matchers/test/index.test.ts": {
    "passed": [
      "Middleware custom matchers should match has cookie",
      "Middleware custom matchers should match has cookie on client routing",
      "Middleware custom matchers should match has header",
      "Middleware custom matchers should match has header value",
      "Middleware custom matchers should match has host",
      "Middleware custom matchers should match has query",
      "Middleware custom matchers should match has query on client routing",
      "Middleware custom matchers should match missing header correctly",
      "Middleware custom matchers should match missing query correctly",
      "Middleware custom matchers should match source path"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-dynamic-basepath-matcher/test/index.test.ts": {
    "passed": [
      "Middleware custom matchers basePath should match",
      "Middleware custom matchers basePath should match query path",
      "Middleware custom matchers basePath should not match"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-fetches-with-any-http-method/index.test.ts": {
    "passed": [
      "Middleware fetches with any HTTP method passes the method on a direct fetch request",
      "Middleware fetches with any HTTP method passes the method when providing a Request object"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-fetches-with-body/index.test.ts": {
    "passed": [
      "Middleware fetches with body should return 413 for body equal to 10mb",
      "Middleware fetches with body with bodyParser = false should be able to send and return with body greater than 16KiB",
      "Middleware fetches with body with bodyParser = false should be able to send and return with body size equal to 16KiB",
      "Middleware fetches with body with custom bodyParser sizeLimit (5kb) should be able to send and return body size equal to 5kb",
      "Middleware fetches with body with custom bodyParser sizeLimit (5kb) should return 413 for body greater than 5kb",
      "Middleware fetches with body with custom bodyParser sizeLimit (5mb) should be able to send and return body size equal to 5mb",
      "Middleware fetches with body with custom bodyParser sizeLimit (5mb) should return 413 for body greater than 5mb",
      "Middleware fetches with body with default bodyParser sizeLimit (1mb) should be able to send and return body greater than default highWaterMark (16KiB)",
      "Middleware fetches with body with default bodyParser sizeLimit (1mb) should be able to send and return body size equal to 1mb",
      "Middleware fetches with body with default bodyParser sizeLimit (1mb) should return 413 for body greater than 1mb"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-general/test/index.test.ts": {
    "passed": [
      "Middleware Runtime with i18n allows shallow linking with middleware",
      "Middleware Runtime with i18n allows to access env variables",
      "Middleware Runtime with i18n hard-navigates when the data request failed",
      "Middleware Runtime with i18n passes search params with rewrites",
      "Middleware Runtime with i18n refreshes the page when middleware changes ",
      "Middleware Runtime with i18n should accept a URL instance for fetch",
      "Middleware Runtime with i18n should add a rewrite header on data requests for rewrites",
      "Middleware Runtime with i18n should allow to abort a fetch request",
      "Middleware Runtime with i18n should be able to rewrite on _next/static/chunks/pages/ 404",
      "Middleware Runtime with i18n should contain `globalThis`",
      "Middleware Runtime with i18n should contain crypto APIs",
      "Middleware Runtime with i18n should have correct dynamic route params for middleware rewrite to dynamic route",
      "Middleware Runtime with i18n should have correct dynamic route params on client-transition to dynamic route",
      "Middleware Runtime with i18n should have correct query values for rewrite to ssg page",
      "Middleware Runtime with i18n should have correct route params for chained rewrite from middleware to config rewrite",
      "Middleware Runtime with i18n should have correct route params for rewrite from config dynamic route",
      "Middleware Runtime with i18n should have correct route params for rewrite from config non-dynamic route",
      "Middleware Runtime with i18n should have init header for NextResponse.redirect",
      "Middleware Runtime with i18n should keep non data requests in their original shape",
      "Middleware Runtime with i18n should normalize data requests into page requests",
      "Middleware Runtime with i18n should only contain middleware route in dev middleware manifest",
      "Middleware Runtime with i18n should redirect the same for direct visit and client-transition",
      "Middleware Runtime with i18n should respond with 400 on decode failure",
      "Middleware Runtime with i18n should rewrite correctly for non-SSG/SSP page",
      "Middleware Runtime with i18n should rewrite the same for direct visit and client-transition",
      "Middleware Runtime with i18n should set fetch user agent correctly",
      "Middleware Runtime with i18n should throw when using NextRequest with a relative URL",
      "Middleware Runtime with i18n should throw when using NextResponse.rewrite with a relative URL",
      "Middleware Runtime with i18n should throw when using Request with a relative URL",
      "Middleware Runtime with i18n should throw when using URL with a relative URL",
      "Middleware Runtime with i18n should trigger middleware for data requests",
      "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params",
      "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params and no query",
      "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params and query",
      "Middleware Runtime with i18n should validate & parse request url from any route",
      "Middleware Runtime with i18n should warn when using NextResponse.redirect with a relative URL",
      "Middleware Runtime with i18n should warn when using Response.redirect with a relative URL",
      "Middleware Runtime with i18n should work with notFound: true correctly",
      "Middleware Runtime without i18n allows shallow linking with middleware",
      "Middleware Runtime without i18n allows to access env variables",
      "Middleware Runtime without i18n hard-navigates when the data request failed",
      "Middleware Runtime without i18n passes search params with rewrites",
      "Middleware Runtime without i18n refreshes the page when middleware changes ",
      "Middleware Runtime without i18n should accept a URL instance for fetch",
      "Middleware Runtime without i18n should add a rewrite header on data requests for rewrites",
      "Middleware Runtime without i18n should allow to abort a fetch request",
      "Middleware Runtime without i18n should be able to rewrite on _next/static/chunks/pages/ 404",
      "Middleware Runtime without i18n should contain `globalThis`",
      "Middleware Runtime without i18n should contain crypto APIs",
      "Middleware Runtime without i18n should have correct dynamic route params for middleware rewrite to dynamic route",
      "Middleware Runtime without i18n should have correct dynamic route params on client-transition to dynamic route",
      "Middleware Runtime without i18n should have correct query values for rewrite to ssg page",
      "Middleware Runtime without i18n should have correct route params for chained rewrite from middleware to config rewrite",
      "Middleware Runtime without i18n should have correct route params for rewrite from config dynamic route",
      "Middleware Runtime without i18n should have correct route params for rewrite from config non-dynamic route",
      "Middleware Runtime without i18n should have init header for NextResponse.redirect",
      "Middleware Runtime without i18n should keep non data requests in their original shape",
      "Middleware Runtime without i18n should normalize data requests into page requests",
      "Middleware Runtime without i18n should only contain middleware route in dev middleware manifest",
      "Middleware Runtime without i18n should redirect the same for direct visit and client-transition",
      "Middleware Runtime without i18n should respond with 400 on decode failure",
      "Middleware Runtime without i18n should rewrite correctly for non-SSG/SSP page",
      "Middleware Runtime without i18n should rewrite the same for direct visit and client-transition",
      "Middleware Runtime without i18n should set fetch user agent correctly",
      "Middleware Runtime without i18n should throw when using NextRequest with a relative URL",
      "Middleware Runtime without i18n should throw when using NextResponse.rewrite with a relative URL",
      "Middleware Runtime without i18n should throw when using Request with a relative URL",
      "Middleware Runtime without i18n should throw when using URL with a relative URL",
      "Middleware Runtime without i18n should trigger middleware for data requests",
      "Middleware Runtime without i18n should validate & parse request url from a dynamic route with params and query",
      "Middleware Runtime without i18n should validate & parse request url from any route",
      "Middleware Runtime without i18n should warn when using NextResponse.redirect with a relative URL",
      "Middleware Runtime without i18n should warn when using Response.redirect with a relative URL",
      "Middleware Runtime without i18n should work with notFound: true correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-matcher/index.test.ts": {
    "passed": [
      "Middleware can set the matcher in its config adds the header for a matched data path (with header)",
      "Middleware can set the matcher in its config adds the header for a matched data path (without header)",
      "Middleware can set the matcher in its config adds the header for a matched path",
      "Middleware can set the matcher in its config adds the header for another matched data path",
      "Middleware can set the matcher in its config adds the header for another matched path",
      "Middleware can set the matcher in its config does add the header for root data request",
      "Middleware can set the matcher in its config does add the header for root request",
      "Middleware can set the matcher in its config should load matches in client matchers correctly",
      "Middleware can set the matcher in its config should navigate correctly with matchers",
      "using a single matcher adds the header for a matched data path (without header)",
      "using a single matcher adds the header for a matched path",
      "using a single matcher adds the headers for a matched data path (with header)",
      "using a single matcher does not add the header for an unmatched path",
      "using a single matcher does not add the header for root data request",
      "using a single matcher does not add the header for root request",
      "using a single matcher with i18n adds the header for a matched path",
      "using a single matcher with i18n adds the header for a mathed root path with /index",
      "using a single matcher with i18n adds the headers for a matched data path",
      "using a single matcher with i18n and basePath adds the header for a matched path",
      "using a single matcher with i18n and basePath adds the header for a mathed root path with /index",
      "using a single matcher with i18n and basePath adds the headers for a matched data path",
      "using a single matcher with i18n and basePath and trailingSlash adds the header for a matched path",
      "using a single matcher with i18n and basePath and trailingSlash adds the header for a mathed root path with /index",
      "using a single matcher with i18n and basePath and trailingSlash adds the headers for a matched data path",
      "using a single matcher with i18n and basePath and trailingSlash does not add the header for an unmatched path",
      "using a single matcher with i18n and basePath does not add the header for an unmatched path",
      "using a single matcher with i18n and trailingSlash adds the header for a matched path",
      "using a single matcher with i18n and trailingSlash adds the header for a mathed root path with /index",
      "using a single matcher with i18n and trailingSlash adds the headers for a matched data path",
      "using a single matcher with i18n and trailingSlash does not add the header for an unmatched path",
      "using a single matcher with i18n does not add the header for an unmatched path",
      "using root matcher adds the header for a matched data path (with header)",
      "using root matcher adds the header for a matched data path (without header)",
      "using root matcher adds the header to the /",
      "using root matcher adds the header to the /index"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-redirects/test/index.test.ts": {
    "passed": [
      "Middleware Redirect /fr should implement internal redirects",
      "Middleware Redirect /fr should redirect",
      "Middleware Redirect /fr should redirect (infinite-loop)",
      "Middleware Redirect /fr should redirect cleanly with the original url param",
      "Middleware Redirect /fr should redirect multiple times",
      "Middleware Redirect /fr should redirect to api route with locale",
      "Middleware Redirect /fr should redirect with a fragment",
      "Middleware Redirect does not include the locale in redirects by default",
      "Middleware Redirect should implement internal redirects",
      "Middleware Redirect should redirect",
      "Middleware Redirect should redirect (infinite-loop)",
      "Middleware Redirect should redirect cleanly with the original url param",
      "Middleware Redirect should redirect correctly with redirect in next.config.js",
      "Middleware Redirect should redirect multiple times",
      "Middleware Redirect should redirect to api route with locale",
      "Middleware Redirect should redirect to data urls with data requests and internal redirects",
      "Middleware Redirect should redirect to external urls with data requests and external redirects",
      "Middleware Redirect should redirect with a fragment"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-request-header-overrides/test/index.test.ts": {
    "passed": [
      "Middleware Request Headers Overrides Edge Functions Backend Adds new headers",
      "Middleware Request Headers Overrides Edge Functions Backend Deletes headers",
      "Middleware Request Headers Overrides Edge Functions Backend Updates headers",
      "Middleware Request Headers Overrides Serverless Functions Backend Adds new headers",
      "Middleware Request Headers Overrides Serverless Functions Backend Deletes headers",
      "Middleware Request Headers Overrides Serverless Functions Backend Updates headers",
      "Middleware Request Headers Overrides getServerSideProps Backend Adds new headers",
      "Middleware Request Headers Overrides getServerSideProps Backend Deletes headers",
      "Middleware Request Headers Overrides getServerSideProps Backend Updates headers"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-responses/test/index.test.ts": {
    "passed": [
      "Middleware Responses /fr responds with multiple cookies",
      "Middleware Responses /fr should not fail when returning a stream",
      "Middleware Responses /fr should not fail when returning a text body",
      "Middleware Responses /fr should respond appending headers headers",
      "Middleware Responses /fr should respond with a 401 status code",
      "Middleware Responses /fr should respond with one header",
      "Middleware Responses /fr should respond with two headers",
      "Middleware Responses responds with multiple cookies",
      "Middleware Responses should not fail when returning a stream",
      "Middleware Responses should not fail when returning a text body",
      "Middleware Responses should respond appending headers headers",
      "Middleware Responses should respond with a 401 status code",
      "Middleware Responses should respond with one header",
      "Middleware Responses should respond with two headers"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-rewrites/test/index.test.ts": {
    "passed": [
      "Middleware Rewrite /fr can rewrite from path with colon",
      "Middleware Rewrite /fr can rewrite from path with colon and retain query parameter",
      "Middleware Rewrite /fr can rewrite to path with colon",
      "Middleware Rewrite /fr can rewrite to path with colon and retain query parameter",
      "Middleware Rewrite /fr should add a cookie and rewrite to a/b test",
      "Middleware Rewrite /fr should clear query parameters",
      "Middleware Rewrite /fr should correctly rewriting to a different dynamic path",
      "Middleware Rewrite /fr should not call middleware with shallow push",
      "Middleware Rewrite /fr should rewrite to Vercel",
      "Middleware Rewrite /fr should rewrite to about page",
      "Middleware Rewrite /fr should rewrite when not using localhost",
      "Middleware Rewrite /fr should rewrite without hard navigation",
      "Middleware Rewrite /fr support colons in path",
      "Middleware Rewrite can rewrite from path with colon",
      "Middleware Rewrite can rewrite from path with colon and retain query parameter",
      "Middleware Rewrite can rewrite to path with colon",
      "Middleware Rewrite can rewrite to path with colon and retain query parameter",
      "Middleware Rewrite should add a cookie and rewrite to a/b test",
      "Middleware Rewrite should allow to opt-out prefetch caching",
      "Middleware Rewrite should allow to rewrite keeping the locale in pathname",
      "Middleware Rewrite should allow to rewrite to a `afterFiles` rewrite config",
      "Middleware Rewrite should allow to rewrite to a `beforeFiles` rewrite config",
      "Middleware Rewrite should allow to rewrite to a different locale",
      "Middleware Rewrite should allow to switch locales",
      "Middleware Rewrite should behave consistently on recursive rewrites",
      "Middleware Rewrite should clear query parameters",
      "Middleware Rewrite should correctly rewriting to a different dynamic path",
      "Middleware Rewrite should handle catch-all rewrite correctly",
      "Middleware Rewrite should handle middleware rewrite with body correctly",
      "Middleware Rewrite should handle next.config.js rewrite with body correctly",
      "Middleware Rewrite should handle shallow navigation correctly (dynamic page)",
      "Middleware Rewrite should handle shallow navigation correctly (non-dynamic page)",
      "Middleware Rewrite should handle static dynamic rewrite from middleware correctly",
      "Middleware Rewrite should handle static rewrite from next.config.js correctly",
      "Middleware Rewrite should hard navigate on 404 for data request",
      "Middleware Rewrite should have correct query info for dynamic route after query hydration",
      "Middleware Rewrite should have props for afterFiles rewrite to SSG page",
      "Middleware Rewrite should not call middleware with shallow push",
      "Middleware Rewrite should not have un-necessary data request on rewrite",
      "Middleware Rewrite should not have unexpected errors",
      "Middleware Rewrite should not mix component cache when navigating between dynamic routes",
      "Middleware Rewrite should override with rewrite externally correctly",
      "Middleware Rewrite should override with rewrite internally correctly",
      "Middleware Rewrite should resolve dynamic route after rewrite correctly",
      "Middleware Rewrite should return HTML/data correctly for pre-rendered page",
      "Middleware Rewrite should rewrite correctly when navigating via history",
      "Middleware Rewrite should rewrite correctly when navigating via history after query update",
      "Middleware Rewrite should rewrite to Vercel",
      "Middleware Rewrite should rewrite to about page",
      "Middleware Rewrite should rewrite to data urls for incoming data request internally rewritten",
      "Middleware Rewrite should rewrite to fallback: true page successfully",
      "Middleware Rewrite should rewrite to the external url for incoming data request externally rewritten",
      "Middleware Rewrite should rewrite when not using localhost",
      "Middleware Rewrite should rewrite without hard navigation",
      "Middleware Rewrite support colons in path"
    ],
    "failed": [],
    "pending": [
      "Middleware Rewrite includes the locale in rewrites by default"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-shallow-link/index.test.ts": {
    "passed": ["browser-shallow-navigation should render the correct page"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/middleware-trailing-slash/test/index.test.ts": {
    "passed": [
      "Middleware Runtime trailing slash allows shallow linking with middleware",
      "Middleware Runtime trailing slash refreshes the page when middleware changes ",
      "Middleware Runtime trailing slash should add a rewrite header on data requests for rewrites",
      "Middleware Runtime trailing slash should have correct dynamic route params for middleware rewrite to dynamic route",
      "Middleware Runtime trailing slash should have correct dynamic route params on client-transition to dynamic route",
      "Middleware Runtime trailing slash should have correct query values for rewrite to ssg page",
      "Middleware Runtime trailing slash should have correct route params for chained rewrite from middleware to config rewrite",
      "Middleware Runtime trailing slash should have correct route params for rewrite from config dynamic route",
      "Middleware Runtime trailing slash should have correct route params for rewrite from config non-dynamic route",
      "Middleware Runtime trailing slash should have init header for NextResponse.redirect",
      "Middleware Runtime trailing slash should keep non data requests in their original shape",
      "Middleware Runtime trailing slash should normalize data requests into page requests",
      "Middleware Runtime trailing slash should redirect the same for direct visit and client-transition",
      "Middleware Runtime trailing slash should respond with 400 on decode failure",
      "Middleware Runtime trailing slash should rewrite correctly for non-SSG/SSP page",
      "Middleware Runtime trailing slash should rewrite the same for direct visit and client-transition",
      "Middleware Runtime trailing slash should trigger middleware for data requests",
      "Middleware Runtime trailing slash should validate & parse request url from any route",
      "Middleware Runtime trailing slash with .html extension should work using browser",
      "Middleware Runtime trailing slash with .html extension should work when navigating",
      "Middleware Runtime trailing slash with .html extension should work when requesting the page directly",
      "Middleware Runtime trailing slash without .html extension should work using browser",
      "Middleware Runtime trailing slash without .html extension should work when navigating",
      "Middleware Runtime trailing slash without .html extension should work when requesting the page directly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/module-layer/module-layer.test.ts": {
    "passed": [
      "module layer client packages in middleware should error when import server packages in middleware",
      "module layer with server-only in server targets should contain client react exports for pages api",
      "module layer with server-only in server targets should render installed react-server condition for middleware",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/default",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/default-edge",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/mixed",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/server-only",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/server-only-edge",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/client",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/client-edge",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/route",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/route-edge",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/server",
      "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/server-edge"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/multi-zone/multi-zone.test.ts": {
    "passed": [
      "multi-zone should correctly respond for /",
      "multi-zone should correctly respond for /blog/post-1",
      "multi-zone should correctly respond for /guest",
      "multi-zone should correctly respond for /guest/another/post-1",
      "multi-zone should correctly respond for /guest/blog/post-1",
      "multi-zone should support HMR in both apps"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/new-link-behavior/child-a-tag-error.test.ts": {
    "passed": [
      "New Link Behavior with <a> child should throw error with <a> child"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/new-link-behavior/index.test.ts": {
    "passed": [
      "New Link Behavior should handle onclick",
      "New Link Behavior should handle preventdefault",
      "New Link Behavior should navigate to /about",
      "New Link Behavior should render link with <a>",
      "New Link Behavior should render link with classname",
      "New Link Behavior should render link with id",
      "New Link Behavior should render link with multiple children"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/new-link-behavior/material-ui.test.ts": {
    "passed": [
      "New Link Behavior with material-ui should render MuiLink with <a>"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/new-link-behavior/stitches.test.ts": {
    "passed": ["New Link Behavior with stitches should render <a>"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/new-link-behavior/typescript.test.ts": {
    "passed": [
      "New Link Behavior should apply ref on link",
      "New Link Behavior should render link with <a>"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-config-warnings/esm-externals-false/esm-externals-false.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "next-config-warnings - esm-externals-false should warn when using ESM externals: false"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/basepath.test.ts": {
    "passed": ["next/font/google basepath preload correct files"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/google-fetch-error.test.ts": {
    "passed": [
      "next/font/google fetch error should use a fallback font in dev"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/index.test.ts": {
    "passed": [
      "next/font Fallback fontfaces google Fraunces",
      "next/font Fallback fontfaces google Indie flower",
      "next/font Fallback fontfaces local Fraunces",
      "next/font Fallback fontfaces local Indie flower",
      "next/font Fallback fontfaces local Roboto multiple weights and styles",
      "next/font Fallback fontfaces local Roboto multiple weights and styles - variable 1",
      "next/font Fallback fontfaces local Roboto multiple weights and styles - variable 2",
      "next/font computed styles page using fallback fonts",
      "next/font computed styles page using variables",
      "next/font computed styles page with fonts",
      "next/font import values Variable font without weight range",
      "next/font import values page with font",
      "next/font import values page with local fonts",
      "next/font preload font without preloadable subsets",
      "next/font preload font without size adjust",
      "next/font preload google fonts with multiple weights/styles",
      "next/font preload page with fonts",
      "next/font preload page with local fonts",
      "next/font preload page without fonts",
      "next/font should use production cache control for fonts"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/with-font-declarations-file.test.ts": {
    "passed": [
      "next/font/google with-font-declarations-file preload correct files at /inter",
      "next/font/google with-font-declarations-file preload correct files at /local-font",
      "next/font/google with-font-declarations-file preload correct files at /roboto"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/with-proxy.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "next/font/google with proxy should use a proxy agent when proxy environment variable is set"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-font/without-preloaded-fonts.test.ts": {
    "passed": [
      "next/font/google no preloads with _app without fonts",
      "next/font/google no preloads with _app without preload",
      "next/font/google without-preloaded-fonts without _app without fonts",
      "next/font/google without-preloaded-fonts without _app without preload"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-head/index.test.ts": {
    "passed": [
      "next/head should have correct head tags after hydration",
      "next/head should have correct head tags from a fragment",
      "next/head should have correct head tags in initial document",
      "next/head should have current head tags from a _document getInitialProps",
      "next/head should place charset element at the top of <head>"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-image-forward-ref/index.test.ts": {
    "passed": [
      "next-image-forward-ref allows framer-motion to animate opacity"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-phase/index.test.ts": {
    "passed": ["next-phase should render page with next phase correctly"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-script/index.test.ts": {
    "passed": [
      "beforeInteractive in document Head Script is injected server-side",
      "beforeInteractive in document body Script is injected server-side",
      "empty strategy in document Head Script is injected server-side",
      "empty strategy in document body Script is injected server-side"
    ],
    "failed": [],
    "pending": [
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: false with no Partytown dependency Partytown snippet is not injected to head if not enabled in configuration",
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with config override Partytown config script is overwritten",
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for external script Partytown snippets are injected to head if enabled in configuration",
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for external script Worker scripts are modified by Partytown to execute on a worker thread",
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for inline script Inline worker script through children is modified by Partytown to execute on a worker thread",
      "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for inline script Inline worker script through dangerouslySetInnerHtml is modified by Partytown to execute on a worker thread"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/next-test/next-test.test.ts": {
    "passed": [
      "next test first time setup should correctly install missing dependencies and generate missing configuration file for first-time-setup-js",
      "next test first time setup should correctly install missing dependencies and generate missing configuration file for first-time-setup-ts",
      "next test first time setup should fail if next.js config is missing experimental#testProxy",
      "next test should pass args to test runner",
      "next test test runner validation should validate configured/specified test runner"
    ],
    "failed": [],
    "pending": ["next test should execute playwright tests"],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/no-eslint-warn-with-no-eslint-config/index.test.ts": {
    "passed": [
      "no-eslint-warn-with-no-eslint-config should not have eslint warnings when no eslint config",
      "no-eslint-warn-with-no-eslint-config should render"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/nonce-head-manager/index.test.ts": {
    "passed": [
      "nonce head manager should not re-execute the script when re-rendering",
      "nonce head manager should not re-execute the script when re-rendering with CSP header"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/og-api/index.test.ts": {
    "passed": [
      "og-api should respond from index",
      "og-api should throw error when returning a response object in pages/api in node runtime",
      "og-api should work in app route",
      "og-api should work in app route in node runtime",
      "og-api should work in pages/api"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/opentelemetry/client-trace-metadata/client-trace-metadata.test.ts": {
    "passed": [
      "clientTraceMetadata hard loading a dynamic page twice should yield different dynamic trace data",
      "clientTraceMetadata next dev only should inject propagation data for a statically server-side-rendered page",
      "clientTraceMetadata next dev only soft navigating to a dynamic page should not transform previous propagation data",
      "clientTraceMetadata next dev only soft navigating to a static page should not transform previous propagation data",
      "clientTraceMetadata should inject propagation data for a dynamically server-side-rendered page",
      "clientTraceMetadata should only insert the client trace metadata once"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/opentelemetry/instrumentation/instrumentation-pages-app-only.test.ts": {
    "passed": [
      "instrumentation app should start and serve correctly",
      "instrumentation app src/ should start and serve correctly",
      "instrumentation pages should start and serve correctly",
      "instrumentation pages src/ should start and serve correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/opentelemetry/instrumentation/opentelemetry.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "opentelemetry incoming context propagation app router should handle RSC with fetch",
      "opentelemetry incoming context propagation app router should handle RSC with fetch in RSC mode",
      "opentelemetry incoming context propagation app router should handle RSC with fetch on edge",
      "opentelemetry incoming context propagation app router should handle route handlers in app router",
      "opentelemetry incoming context propagation app router should handle route handlers in app router on edge",
      "opentelemetry incoming context propagation app router should propagate custom context without span",
      "opentelemetry incoming context propagation app router should trace middleware",
      "opentelemetry incoming context propagation pages should handle api routes in pages",
      "opentelemetry incoming context propagation pages should handle api routes in pages on edge",
      "opentelemetry incoming context propagation pages should handle getServerSideProps",
      "opentelemetry incoming context propagation pages should handle getServerSideProps on edge",
      "opentelemetry incoming context propagation pages should handle getStaticProps when fallback: 'blocking'",
      "opentelemetry root context app router should handle RSC with fetch",
      "opentelemetry root context app router should handle RSC with fetch in RSC mode",
      "opentelemetry root context app router should handle RSC with fetch on edge",
      "opentelemetry root context app router should handle route handlers in app router",
      "opentelemetry root context app router should handle route handlers in app router on edge",
      "opentelemetry root context app router should propagate custom context without span",
      "opentelemetry root context app router should trace middleware",
      "opentelemetry root context pages should handle api routes in pages",
      "opentelemetry root context pages should handle api routes in pages on edge",
      "opentelemetry root context pages should handle getServerSideProps",
      "opentelemetry root context pages should handle getServerSideProps on edge",
      "opentelemetry root context pages should handle getStaticProps when fallback: 'blocking'",
      "opentelemetry with disabled fetch tracing root context app router with disabled fetch should handle RSC with disabled fetch"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/optimized-loading/test/index.test.ts": {
    "passed": [
      "Optimized loading page / should load scripts with defer in head",
      "Optimized loading page / should not have JS preload links",
      "Optimized loading page / should render the page /",
      "Optimized loading page /page1 should load scripts with defer in head",
      "Optimized loading page /page1 should not have JS preload links",
      "Optimized loading page /page1 should render the page /page1"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/pages-performance-mark/index.test.ts": {
    "passed": [
      "pages performance mark should render the page correctly without crashing with performance mark"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/postcss-config-cjs/index.test.ts": {
    "passed": ["postcss-config-cjs works with postcss.config.cjs files"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/prerender-crawler.test.ts": {
    "passed": [
      "Prerender crawler handling should block for crawler correctly",
      "Prerender crawler handling should return fallback for non-crawler correctly",
      "Prerender crawler handling should return prerendered page for correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/prerender-native-module.test.ts": {
    "passed": [
      "prerender native module should render /blog/first correctly",
      "prerender native module should render /blog/second correctly",
      "prerender native module should render index correctly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/prerender.test.ts": {
    "passed": [
      "Prerender should 404 for a missing catchall explicit route",
      "Prerender should 404 for an invalid data url",
      "Prerender should SSR blocking path correctly (blocking)",
      "Prerender should SSR blocking path correctly (pre-rendered)",
      "Prerender should SSR catch-all page with brackets in param as object",
      "Prerender should SSR catch-all page with brackets in param as string",
      "Prerender should SSR dynamic page with brackets in param as object",
      "Prerender should SSR dynamic page with brackets in param as string",
      "Prerender should SSR incremental page correctly",
      "Prerender should SSR normal page correctly",
      "Prerender should allow rewriting to SSG page with fallback: 'blocking'",
      "Prerender should allow rewriting to SSG page with fallback: false",
      "Prerender should always call getStaticProps without caching in dev",
      "Prerender should always show fallback for page not in getStaticPaths",
      "Prerender should error on bad object from getStaticProps",
      "Prerender should error on dynamic page without getStaticPaths",
      "Prerender should error on dynamic page without getStaticPaths returning fallback property",
      "Prerender should fetch /_next/data correctly with mismatched href and as",
      "Prerender should handle fallback only page correctly HTML",
      "Prerender should handle fallback only page correctly data",
      "Prerender should have gsp in __NEXT_DATA__",
      "Prerender should log error in console and browser in development mode",
      "Prerender should navigate between pages successfully",
      "Prerender should navigate to a normal page and back",
      "Prerender should navigate to catch-all page with brackets in param as object",
      "Prerender should navigate to catch-all page with brackets in param as string",
      "Prerender should navigate to dynamic page with brackets in param as object",
      "Prerender should navigate to dynamic page with brackets in param as string",
      "Prerender should never show fallback for page not in getStaticPaths when blocking",
      "Prerender should not contain headers already sent error",
      "Prerender should not error when rewriting to fallback dynamic SSG page",
      "Prerender should not fail to update incremental cache",
      "Prerender should not fallback before invalid JSON is returned from getStaticProps when blocking fallback",
      "Prerender should not have attempted sending invalid payload",
      "Prerender should not have experimental undici warning",
      "Prerender should not have gsp in __NEXT_DATA__ for non-GSP page",
      "Prerender should not re-call getStaticProps when updating query",
      "Prerender should not return data for fallback: false and missing dynamic page",
      "Prerender should not show fallback for page in getStaticPaths",
      "Prerender should not show fallback for page in getStaticPaths when blocking",
      "Prerender should not show warning from url prop being returned",
      "Prerender should not supply query values to params in /_next/data request",
      "Prerender should not supply query values to params or useRouter dynamic page SSR",
      "Prerender should not supply query values to params or useRouter non-dynamic page SSR",
      "Prerender should parse query values on mount correctly",
      "Prerender should reload page on failed data request",
      "Prerender should render correctly for SSG pages that starts with api-docs",
      "Prerender should respond for catch-all deep folder",
      "Prerender should respond with 405 for POST to static page",
      "Prerender should return data correctly",
      "Prerender should return data correctly for SSG pages that starts with api-docs",
      "Prerender should return data correctly for dynamic page",
      "Prerender should return data correctly for dynamic page (non-seeded)",
      "Prerender should server prerendered path correctly for SSG pages that starts with api-docs",
      "Prerender should show error for invalid JSON returned from getStaticProps on CST",
      "Prerender should show error for invalid JSON returned from getStaticProps on SSR",
      "Prerender should show fallback before invalid JSON is returned from getStaticProps",
      "Prerender should show warning every time page with large amount of page data is returned",
      "Prerender should show warning when large amount of page data is returned",
      "Prerender should support lazy catchall route",
      "Prerender should support nested lazy catchall route",
      "Prerender should support prerendered catchall route",
      "Prerender should support prerendered catchall-explicit route (nested)",
      "Prerender should support prerendered catchall-explicit route (single)"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/proxy-request-with-middleware/test/index.test.ts": {
    "passed": [
      "Requests not effected when middleware used should proxy GET request ",
      "Requests not effected when middleware used should proxy POST request with body"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/react-compiler/react-compiler.test.ts": {
    "passed": [
      "react-compiler default should render",
      "react-compiler default should show an experimental warning"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/react-dnd-compile/react-dnd-compile.test.ts": {
    "passed": [
      "react-dnd-compile should work",
      "react-dnd-compile should work on react-dnd import page"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/react-version/react-version.test.ts": {
    "passed": [
      "react version should use default react condition for pages router apis",
      "react version should use default react condition for pages router pages",
      "react version should use react-server condition for app router client components pages",
      "react version should use react-server condition for app router custom routes",
      "react version should use react-server condition for app router server components pages"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/reload-scroll-backforward-restoration/index.test.ts": {
    "passed": [
      "reload-scroll-back-restoration should restore the scroll position on navigating back",
      "reload-scroll-back-restoration should restore the scroll position on navigating forward"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/repeated-forward-slashes-error/repeated-forward-slashes-error.test.ts": {
    "passed": [
      "repeated-forward-slashes-error should log error when href has repeated forward-slashes"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/revalidate-reason/revalidate-reason.test.ts": {
    "passed": [
      "revalidate-reason development mode should support revalidateReason: \"stale\""
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/rsc-layers-transform/rsc-layers-transform.test.ts": {
    "passed": [
      "rsc layers transform should call instrumentation hook without errors",
      "rsc layers transform should render installed react-server condition for middleware"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/skip-trailing-slash-redirect/index.test.ts": {
    "passed": [
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should navigate client side correctly",
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should not apply trailing slash redirect (with slash)",
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should not apply trailing slash redirect (without slash)",
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should preserve original trailing slashes to links on client",
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should respond to dynamic route correctly",
      "skip-trailing-slash-redirect app dir - skip trailing slash redirect should respond to index correctly",
      "skip-trailing-slash-redirect pages dir should navigate client side correctly",
      "skip-trailing-slash-redirect pages dir should not apply trailing slash redirect (with slash)",
      "skip-trailing-slash-redirect pages dir should not apply trailing slash redirect (without slash)",
      "skip-trailing-slash-redirect pages dir should preserve original trailing slashes to links on client",
      "skip-trailing-slash-redirect pages dir should respond to dynamic route correctly",
      "skip-trailing-slash-redirect pages dir should respond to index correctly",
      "skip-trailing-slash-redirect should allow response body from middleware with flag",
      "skip-trailing-slash-redirect should allow rewriting invalid buildId correctly",
      "skip-trailing-slash-redirect should apply config redirect correctly",
      "skip-trailing-slash-redirect should apply config rewrites correctly",
      "skip-trailing-slash-redirect should be able to redirect locale casing $1",
      "skip-trailing-slash-redirect should correct skip URL normalizing in middleware",
      "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-ssg",
      "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-ssr",
      "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-static",
      "skip-trailing-slash-redirect should handle external rewrite correctly /docs-auto-static/first",
      "skip-trailing-slash-redirect should handle external rewrite correctly /docs-ssr/first",
      "skip-trailing-slash-redirect should handle external rewrite correctly /docs/first",
      "skip-trailing-slash-redirect should merge cookies from middleware and API routes correctly",
      "skip-trailing-slash-redirect should merge cookies from middleware and edge API routes correctly",
      "skip-trailing-slash-redirect should not apply trailing slash on load on client",
      "skip-trailing-slash-redirect should parse locale info for data request correctly",
      "skip-trailing-slash-redirect should provide original _next/data URL with skipMiddlewareUrlNormalize"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/socket-io/index.test.js": {
    "passed": [
      "socket-io should support socket.io without falling back to polling"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/ssr-react-context/index.test.ts": {
    "passed": [
      "React Context should render a page with context",
      "React Context should render correctly with context consumer",
      "React Context should render with context after change"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/streaming-ssr/index.test.ts": {
    "passed": [
      "streaming SSR with custom next configs should match more specific route along with dynamic routes",
      "streaming SSR with custom next configs should redirect paths without trailing-slash and render when slash is appended",
      "streaming SSR with custom next configs should render multi-byte characters correctly in streaming",
      "streaming SSR with custom next configs should render next/router correctly in edge runtime",
      "streaming SSR with custom next configs should render styled-jsx styles in streaming",
      "streaming SSR with custom next configs should work with custom document"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/styled-jsx/index.test.ts": {
    "passed": [
      "styled-jsx should contain styled-jsx styles during SSR",
      "styled-jsx should render styles during CSR",
      "styled-jsx should render styles during CSR (AMP)",
      "styled-jsx should render styles during SSR (AMP)"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/swc-warnings/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "can force swc should not have warning",
      "swc warnings by default should have warning"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/switchable-runtime/index.test.ts": {
    "passed": [
      "Switchable runtime Switchable runtime (dev) should be able to navigate between edge SSR routes without any errors",
      "Switchable runtime Switchable runtime (dev) should be possible to switch between runtimes in API routes",
      "Switchable runtime Switchable runtime (dev) should be possible to switch between runtimes in pages",
      "Switchable runtime Switchable runtime (dev) should build /api/hello and /api/edge as an api route with edge runtime",
      "Switchable runtime Switchable runtime (dev) should not consume server.js file extension",
      "Switchable runtime Switchable runtime (dev) should not include edge api routes and edge ssr routes into dev middleware manifest",
      "Switchable runtime Switchable runtime (dev) should sort edge SSR routes correctly"
    ],
    "failed": [],
    "pending": [
      "Switchable runtime Switchable runtime (dev) should be possible to switch between runtimes with same content",
      "Switchable runtime Switchable runtime (dev) should give proper errors for invalid runtime in app dir",
      "Switchable runtime Switchable runtime (dev) should not crash the dev server when invalid runtime is configured",
      "Switchable runtime Switchable runtime (dev) should recover from syntax error when using edge runtime",
      "Switchable runtime Switchable runtime (dev) should support client side navigation to ssg rsc pages",
      "Switchable runtime Switchable runtime (dev) should support client side navigation to ssr rsc pages",
      "Switchable runtime Switchable runtime (dev) should support client side navigation to static rsc pages"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/test-template/{{ toFileName name }}/{{ toFileName name }}.test.ts": {
    "passed": [
      "{{name}} should work using browser",
      "{{name}} should work using cheerio",
      "{{name}} should work with fetch",
      "{{name}} should work with html"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/test-utils-tests/basic/basic.test.ts": {
    "passed": ["nextTestSetup should work"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/testmode/testmode.test.ts": {
    "passed": [
      "testmode app router should avoid fetch cache",
      "testmode app router should fetch real data when Next-Test-* headers are not present",
      "testmode app router should handle API with fetch in edge function",
      "testmode app router should handle API with fetch in serverless function",
      "testmode app router should handle API with http.get in serverless function",
      "testmode app router should handle RSC with fetch in edge function",
      "testmode app router should handle RSC with fetch in serverless function",
      "testmode app router should handle RSC with http.get in serverless function",
      "testmode middleware should intercept fetchs in middleware",
      "testmode page router should handle API with fetch",
      "testmode page router should handle API with http.get",
      "testmode page router should handle getServerSideProps with fetch",
      "testmode page router should handle getServerSideProps with http.get",
      "testmode rewrites should handle rewrites"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/third-parties/index.test.ts": {
    "passed": [
      "@next/third-parties basic usage renders GA",
      "@next/third-parties basic usage renders GTM",
      "@next/third-parties basic usage renders GoogleMapsEmbed",
      "@next/third-parties basic usage renders YoutubeEmbed"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/trailingslash-with-rewrite/index.test.ts": {
    "passed": [
      "trailingSlash:true with rewrites and getStaticProps should work"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/transpile-packages/index.test.ts": {
    "passed": [
      "transpile packages css should handle css modules imports inside transpiled modules",
      "transpile packages css should handle global css imports inside transpiled modules",
      "transpile packages css should handle global scss imports inside transpiled modules",
      "transpile packages css should handle scss modules imports inside transpiled modules",
      "transpile packages optional deps should hide dynammic module dependency errors from node_modules",
      "transpile packages optional deps should not throw an error when optional deps are not installed"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/tsconfig-module-preserve/index.test.ts": {
    "passed": [
      "tsconfig module: preserve allows you to skip moduleResolution, esModuleInterop and resolveJsonModule when using \"module: preserve\""
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/type-module-interop/index.test.ts": {
    "passed": [
      "Type module interop should render client-side",
      "Type module interop should render client-side with modules",
      "Type module interop should render server-side",
      "Type module interop should render server-side with modules"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/typescript-version-no-warning/typescript-version-no-warning.test.ts": {
    "passed": ["typescript-version-no-warning should skip"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/typescript-version-warning/typescript-version-warning.test.ts": {
    "passed": ["typescript-version-warning should skip"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/undici-fetch/index.test.ts": {
    "passed": [
      "undici fetch undici global Headers should return true when undici is used",
      "undici fetch undici global Request should return true when undici is used",
      "undici fetch undici global Response should return true when undici is used",
      "undici fetch undici global fetch should return true when undici is used"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/useselectedlayoutsegment-s-in-pages-router/useselectedlayoutsegment-s-in-pages-router.test.ts": {
    "passed": [
      "useSelectedLayoutSegment(s) in Pages Router Should render with `useSelectedLayoutSegment(s) hooks"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/yarn-pnp/test/with-eslint.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "yarn PnP should compile and serve the index page correctly with-eslint"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/yarn-pnp/test/with-mdx.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "yarn PnP should compile and serve the index page correctly with-mdx"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/e2e/yarn-pnp/test/with-next-sass.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "yarn PnP should compile and serve the index page correctly with-next-sass"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/404-page-app/test/index.test.js": {
    "passed": [
      "404 Page Support with _app development mode should not show pages/404 GIP error if _app has GIP"
    ],
    "failed": [],
    "pending": [
      "404 Page Support with _app production mode should build successfully",
      "404 Page Support with _app production mode should not output static 404 if _app has getInitialProps",
      "404 Page Support with _app production mode should still use 404 page",
      "404 Page Support with _app production mode specify to use the 404 page still in the routes-manifest"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/404-page-custom-error/test/index.test.js": {
    "passed": [
      "Default 404 Page with custom _error development mode should render error correctly",
      "Default 404 Page with custom _error development mode should render index page normal",
      "Default 404 Page with custom _error development mode should respond to 404 correctly"
    ],
    "failed": [],
    "pending": [
      "Default 404 Page with custom _error production mode should build successfully",
      "Default 404 Page with custom _error production mode should have output 404.html",
      "Default 404 Page with custom _error production mode should render error correctly",
      "Default 404 Page with custom _error production mode should render index page normal",
      "Default 404 Page with custom _error production mode should respond to 404 correctly",
      "Default 404 Page with custom _error production mode should set pages404 in routes-manifest correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/404-page-ssg/test/index.test.js": {
    "passed": [
      "404 Page Support SSG development mode should not show an error in the logs for 404 SSG",
      "404 Page Support SSG development mode should render error correctly",
      "404 Page Support SSG development mode should render index page normal",
      "404 Page Support SSG development mode should respond to 404 correctly"
    ],
    "failed": [],
    "pending": [
      "404 Page Support SSG production mode should build successfully",
      "404 Page Support SSG production mode should have 404 page in prerender-manifest",
      "404 Page Support SSG production mode should not revalidate custom 404 page",
      "404 Page Support SSG production mode should not show an error in the logs for 404 SSG",
      "404 Page Support SSG production mode should render error correctly",
      "404 Page Support SSG production mode should render index page normal",
      "404 Page Support SSG production mode should respond to 404 correctly",
      "404 Page Support SSG production mode should set pages404 in routes-manifest correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/404-page/test/index.test.js": {
    "passed": [
      "404 Page Support development mode 2 does not show error with getStaticProps in pages/404 dev",
      "404 Page Support development mode 2 falls back to _error correctly without pages/404",
      "404 Page Support development mode 2 shows error with getInitialProps in pages/404 dev",
      "404 Page Support development mode 2 shows error with getServerSideProps in pages/404 dev",
      "404 Page Support development mode should not error when visited directly",
      "404 Page Support development mode should render _error for a 500 error still",
      "404 Page Support development mode should set correct status code with pages/404",
      "404 Page Support development mode should use pages/404",
      "404 Page Support development mode should use pages/404 for .d.ts file"
    ],
    "failed": [],
    "pending": [
      "404 Page Support production mode does not show error with getStaticProps in pages/404 build",
      "404 Page Support production mode should add /404 to pages-manifest correctly",
      "404 Page Support production mode should not cache for custom 404 page with gssp and revalidate disabled",
      "404 Page Support production mode should not cache for custom 404 page with gssp and revalidate enabled",
      "404 Page Support production mode should not cache for custom 404 page without gssp",
      "404 Page Support production mode should not error when visited directly",
      "404 Page Support production mode should output 404.html during build",
      "404 Page Support production mode should render _error for a 500 error still",
      "404 Page Support production mode should set correct status code with pages/404",
      "404 Page Support production mode should use pages/404",
      "404 Page Support production mode should use pages/404 for .d.ts file",
      "404 Page Support production mode shows error with getInitialProps in pages/404 build",
      "404 Page Support production mode shows error with getServerSideProps in pages/404 build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/500-page/test/gsp-gssp.test.js": {
    "passed": [
      "gsp-gssp development mode does not show error with getStaticProps in pages/500 dev",
      "gsp-gssp development mode shows error with getServerSideProps in pages/500 dev"
    ],
    "failed": [],
    "pending": [
      "gsp-gssp production mode does build 500 statically with getInitialProps in _app and getStaticProps in pages/500",
      "gsp-gssp production mode does not build 500 statically with no pages/500 and getServerSideProps in _error",
      "gsp-gssp production mode does not show error with getStaticProps in pages/500 build",
      "gsp-gssp production mode shows error with getServerSideProps in pages/500 build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/500-page/test/index.test.js": {
    "passed": [
      "500 Page Support development mode 2 shows error with getInitialProps in pages/500 dev",
      "500 Page Support development mode should not error when visited directly",
      "500 Page Support development mode should set correct status code with pages/500",
      "500 Page Support development mode should use pages/500"
    ],
    "failed": [],
    "pending": [
      "500 Page Support production mode 2 builds 500 statically by default with no pages/500",
      "500 Page Support production mode 2 builds 500 statically by default with no pages/500 and custom _error without getInitialProps",
      "500 Page Support production mode 2 does not build 500 statically with getInitialProps in _app",
      "500 Page Support production mode 2 does not build 500 statically with no pages/500 and custom getInitialProps in _error",
      "500 Page Support production mode 2 does not build 500 statically with no pages/500 and custom getInitialProps in _error and _app",
      "500 Page Support production mode 2 shows error with getInitialProps in pages/500 build",
      "500 Page Support production mode should add /500 to pages-manifest correctly",
      "500 Page Support production mode should not error when visited directly",
      "500 Page Support production mode should output 500.html during build",
      "500 Page Support production mode should set correct status code with pages/500",
      "500 Page Support production mode should use pages/500"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/absolute-assetprefix/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "absolute assetPrefix with path prefix production mode should fetch from cache correctly",
      "absolute assetPrefix with path prefix production mode should not fetch static data from a CDN",
      "absolute assetPrefix with path prefix production mode should work with getServerSideProps",
      "absolute assetPrefix with path prefix production mode should work with getStaticPaths fallback",
      "absolute assetPrefix with path prefix production mode should work with getStaticPaths prerendered"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amp-export-validation/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "AMP Validation on Export production mode should have shown errors during build",
      "AMP Validation on Export production mode shows AMP warning without throwing error",
      "AMP Validation on Export production mode shows warning and error when throwing error",
      "AMP Validation on Export production mode throws error on AMP error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amphtml-custom-optimizer/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "AMP Custom Optimizer production mode should build and start for dynamic page",
      "AMP Custom Optimizer production mode should build and start for static page"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amphtml-custom-validator/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "AMP Custom Validator development mode should run in development mode successfully",
      "AMP Custom Validator production mode should build and start successfully"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amphtml-fragment-style/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "AMP Fragment Styles production mode adds styles from fragment in AMP mode correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amphtml-ssg/test/index.test.js": {
    "passed": [
      "AMP SSG Support development mode should load a hybrid amp page with query correctly",
      "AMP SSG Support development mode should load a hybrid amp page without query correctly",
      "AMP SSG Support development mode should load an amp first page correctly",
      "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page",
      "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page with query",
      "AMP SSG Support development mode should load dynamic hybrid SSG/AMP page with trailing slash"
    ],
    "failed": [],
    "pending": [
      "AMP SSG Support export mode production mode should have copied SSG files correctly",
      "AMP SSG Support production mode should load a hybrid amp page with query correctly",
      "AMP SSG Support production mode should load a hybrid amp page without query correctly",
      "AMP SSG Support production mode should load an amp first page correctly",
      "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page",
      "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page with query",
      "AMP SSG Support production mode should load dynamic hybrid SSG/AMP page with trailing slash",
      "AMP SSG Support production mode should output prerendered files correctly during build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/amphtml/test/index.test.js": {
    "passed": [
      "AMP Usage AMP dev no-warn should not warn on valid amp",
      "AMP Usage AMP development mode should add data-ampdevmode to development script tags",
      "AMP Usage AMP development mode should detect amp validator warning on custom scripts",
      "AMP Usage AMP development mode should detect amp validator warning on invalid amp",
      "AMP Usage AMP development mode should navigate from non-AMP to AMP without error",
      "AMP Usage AMP development mode should not contain missing files warning"
    ],
    "failed": [],
    "pending": [
      "AMP Usage AMP development mode should detect changes and refresh a hybrid AMP page",
      "AMP Usage AMP development mode should detect changes and refresh an AMP page",
      "AMP Usage AMP development mode should detect changes and refresh an AMP page at root pages/",
      "AMP Usage AMP development mode should detect changes to component and refresh an AMP page",
      "AMP Usage AMP development mode should detect the changes and display it",
      "AMP Usage AMP development mode should not reload unless the page is edited for an AMP page",
      "AMP Usage production mode With AMP context should render nested AMP page with AMP hook",
      "AMP Usage production mode With AMP context should render nested normal page with AMP hook",
      "AMP Usage production mode With AMP context should render the AMP page that uses the AMP hook",
      "AMP Usage production mode With AMP context should render the normal page that uses the AMP hook",
      "AMP Usage production mode With basic AMP usage should auto import extensions",
      "AMP Usage production mode With basic AMP usage should drop custom scripts",
      "AMP Usage production mode With basic AMP usage should not drop custom amp scripts",
      "AMP Usage production mode With basic AMP usage should not output client pages for AMP only",
      "AMP Usage production mode With basic AMP usage should not output client pages for AMP only with config exported after declaration",
      "AMP Usage production mode With basic AMP usage should optimize clean",
      "AMP Usage production mode With basic AMP usage should render the page as valid AMP",
      "AMP Usage production mode With basic AMP usage should render the page without leaving render target",
      "AMP Usage production mode With basic usage should render the page",
      "AMP Usage production mode canonical amphtml should allow manually setting amphtml rel",
      "AMP Usage production mode canonical amphtml should allow manually setting canonical",
      "AMP Usage production mode canonical amphtml should not render amphtml link tag with no AMP page",
      "AMP Usage production mode canonical amphtml should remove conflicting amp tags",
      "AMP Usage production mode canonical amphtml should render a canonical regardless of amp-only status (explicit)",
      "AMP Usage production mode canonical amphtml should render amphtml from provided rel link",
      "AMP Usage production mode canonical amphtml should render link rel amphtml",
      "AMP Usage production mode canonical amphtml should render link rel amphtml with existing query",
      "AMP Usage production mode canonical amphtml should render the AMP page that uses the AMP hook",
      "AMP Usage production mode combined styles should combine style tags",
      "AMP Usage production mode combined styles should remove sourceMaps from styles",
      "AMP Usage production mode should have amp optimizer in trace",
      "AMP Usage production mode should not contain missing files warning"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/api-body-parser/test/index.test.js": {
    "passed": [
      "should not throw if request body is already parsed in custom middleware",
      "should not throw if request's content-type is invalid",
      "should parse JSON body"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/api-catch-all/test/index.test.js": {
    "passed": [
      "API routes dev support should return data when catch-all",
      "API routes dev support should return data when catch-all with index and no trailing slash",
      "API routes dev support should return data when catch-all with index and trailing slash",
      "API routes dev support should return redirect when catch-all with index and trailing slash"
    ],
    "failed": [],
    "pending": [
      "API routes production mode should return data when catch-all",
      "API routes production mode should return data when catch-all with index and no trailing slash",
      "API routes production mode should return data when catch-all with index and trailing slash",
      "API routes production mode should return redirect when catch-all with index and trailing slash"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/api-support/test/index.test.js": {
    "passed": [
      "API routes dev support should 404 on optional dynamic api page",
      "API routes dev support should compile only server code in development",
      "API routes dev support should handle 204 status correctly",
      "API routes dev support should handle proxying to self correctly",
      "API routes dev support should not conflict with /api routes",
      "API routes dev support should not show warning if using externalResolver flag",
      "API routes dev support should not show warning when the API resolves and the response is piped",
      "API routes dev support should not warn if response body is larger than 4MB with responseLimit config = false",
      "API routes dev support should parse JSON body",
      "API routes dev support should parse bigger body then 1mb",
      "API routes dev support should parse body in handler",
      "API routes dev support should parse body with config",
      "API routes dev support should parse query correctly",
      "API routes dev support should parse urlencoded body",
      "API routes dev support should prioritize a non-dynamic page",
      "API routes dev support should redirect to login",
      "API routes dev support should redirect with status code 301",
      "API routes dev support should redirect with status code 307",
      "API routes dev support should render page",
      "API routes dev support should respond from /api/auth/[...nextauth] correctly",
      "API routes dev support should return 200 on POST on pages",
      "API routes dev support should return 404 for undefined path",
      "API routes dev support should return JSON on post on API",
      "API routes dev support should return cookies object",
      "API routes dev support should return custom error",
      "API routes dev support should return data on dynamic nested route",
      "API routes dev support should return data on dynamic optional nested route",
      "API routes dev support should return data on dynamic route",
      "API routes dev support should return empty cookies object",
      "API routes dev support should return empty query object",
      "API routes dev support should return error with invalid JSON",
      "API routes dev support should set cors headers when adding cors middleware",
      "API routes dev support should show false positive warning if not using externalResolver flag",
      "API routes dev support should show friendly error for invalid redirect",
      "API routes dev support should show friendly error in case of passing null as first argument redirect",
      "API routes dev support should show warning when the API resolves without ending the request in development mode",
      "API routes dev support should special-case empty JSON body",
      "API routes dev support should support boolean for JSON in api page",
      "API routes dev support should support etag spec",
      "API routes dev support should support null in JSON response body",
      "API routes dev support should support string in JSON response body",
      "API routes dev support should support undefined response body",
      "API routes dev support should throw Internal Server Error",
      "API routes dev support should throw Internal Server Error (async)",
      "API routes dev support should warn if response body is larger than 4MB",
      "API routes dev support should warn with configured size if response body is larger than configured size",
      "API routes dev support should work with child_process correctly",
      "API routes dev support should work with dynamic params and search string",
      "API routes dev support should work with dynamic params and search string like lambda",
      "API routes dev support should work with index api",
      "API routes dev support should work with nullable payload"
    ],
    "failed": [],
    "pending": [
      "API routes dev support should return error exceeded body limit",
      "API routes production mode should 404 on optional dynamic api page",
      "API routes production mode should build api routes",
      "API routes production mode should handle 204 status correctly",
      "API routes production mode should handle proxying to self correctly",
      "API routes production mode should not conflict with /api routes",
      "API routes production mode should not warn if response body is larger than 4MB with responseLimit config = false",
      "API routes production mode should parse JSON body",
      "API routes production mode should parse bigger body then 1mb",
      "API routes production mode should parse body in handler",
      "API routes production mode should parse body with config",
      "API routes production mode should parse query correctly",
      "API routes production mode should parse urlencoded body",
      "API routes production mode should prioritize a non-dynamic page",
      "API routes production mode should redirect to login",
      "API routes production mode should redirect with status code 301",
      "API routes production mode should redirect with status code 307",
      "API routes production mode should render page",
      "API routes production mode should respond from /api/auth/[...nextauth] correctly",
      "API routes production mode should return 200 on POST on pages",
      "API routes production mode should return 404 for undefined path",
      "API routes production mode should return JSON on post on API",
      "API routes production mode should return cookies object",
      "API routes production mode should return custom error",
      "API routes production mode should return data on dynamic nested route",
      "API routes production mode should return data on dynamic optional nested route",
      "API routes production mode should return data on dynamic route",
      "API routes production mode should return empty cookies object",
      "API routes production mode should return empty query object",
      "API routes production mode should return error exceeded body limit",
      "API routes production mode should return error with invalid JSON",
      "API routes production mode should set cors headers when adding cors middleware",
      "API routes production mode should show error with output export",
      "API routes production mode should show friendly error for invalid redirect",
      "API routes production mode should show friendly error in case of passing null as first argument redirect",
      "API routes production mode should special-case empty JSON body",
      "API routes production mode should support boolean for JSON in api page",
      "API routes production mode should support etag spec",
      "API routes production mode should support null in JSON response body",
      "API routes production mode should support string in JSON response body",
      "API routes production mode should support undefined response body",
      "API routes production mode should throw Internal Server Error",
      "API routes production mode should throw Internal Server Error (async)",
      "API routes production mode should warn if response body is larger than 4MB",
      "API routes production mode should warn with configured size if response body is larger than configured size",
      "API routes production mode should work with child_process correctly",
      "API routes production mode should work with dynamic params and search string",
      "API routes production mode should work with dynamic params and search string like lambda",
      "API routes production mode should work with index api",
      "API routes production mode should work with nullable payload"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-aspath/test/index.test.js": {
    "passed": [
      "App asPath should not have any changes in asPath after a bundle rebuild"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-config-asset-prefix/test/index.test.js": {
    "passed": [
      "App assetPrefix config should render correctly with assetPrefix: \"/\""
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/config.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export (next dev / next build) production mode should correctly emit exported assets to config.distDir",
      "app dir - with output export (next dev / next build) production mode should error when running next export",
      "app dir - with output export (next dev / next build) production mode should throw when exportPathMap configured"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dev-custom-dist-dir.test.ts": {
    "passed": [
      "app dir - with output export and custom distDir (next dev) should render properly"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamic-missing-gsp-dev.test.ts": {
    "passed": [
      "app dir - with output export - dynamic missing gsp dev development mode should error when client component has generateStaticParams",
      "app dir - with output export - dynamic missing gsp dev development mode should error when dynamic route is missing generateStaticParams"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamic-missing-gsp-prod.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export - dynamic missing gsp prod production mode should error when client component has generateStaticParams",
      "app dir - with output export - dynamic missing gsp prod production mode should error when dynamic route is missing generateStaticParams"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamicapiroute-dev.test.ts": {
    "passed": [
      "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'error'",
      "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'force-dynamic'",
      "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute 'force-static'",
      "app dir - with output export - dynamic api route dev development mode should work in dev with dynamicApiRoute undefined"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamicapiroute-prod.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'error'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'force-dynamic'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute 'force-static'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicApiRoute undefined"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamicpage-dev.test.ts": {
    "passed": [
      "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'error'",
      "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'force-dynamic'",
      "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage 'force-static'",
      "app dir - with output export - dynamic page dev development mode should work in dev with dynamicPage undefined"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/dynamicpage-prod.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'error'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'force-dynamic'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage 'force-static'",
      "app dir - with output export - dynamic api route prod production mode should work in prod with dynamicPage undefined"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/start.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export (next start) production mode should error during next start with output export",
      "app dir - with output export (next start) production mode should warn during next start with output standalone"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/trailing-slash-dev.test.ts": {
    "passed": [
      "app dir - with output export - trailing slash dev development mode should work in dev with trailingSlash 'false'",
      "app dir - with output export - trailing slash dev development mode should work in dev with trailingSlash 'true'"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dir-export/test/trailing-slash-start.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app dir - with output export - trailing slash prod production mode should work in prod with trailingSlash 'false'",
      "app dir - with output export - trailing slash prod production mode should work in prod with trailingSlash 'true'"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document-add-hmr/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "_app/_document add HMR should HMR when _app is added",
      "_app/_document add HMR should HMR when _document is added"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document-import-order/test/index.test.js": {
    "passed": [
      "development mode root components should be imported in this order _document > _app > page in order to respect side effects"
    ],
    "failed": [],
    "pending": [
      "Root components import order production mode _app chunks should be attached to de dom before page chunks",
      "Root components import order production mode root components should be imported in this order _document > _app > page in order to respect side effects",
      "development mode Skipped in Turbopack _app chunks should be attached to de dom before page chunks"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document-remove-hmr/test/index.test.js": {
    "passed": [
      "_app removal HMR should HMR when _app is removed",
      "_app removal HMR should HMR when _document is removed"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document-style-fragment/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Custom Document Fragment Styles production mode correctly adds styles from fragment styles key"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-document/test/index.test.js": {
    "passed": [
      "Document and App Client side It should share module state with pages",
      "Document and App Client side should detect the changes to pages/_app.js and display it",
      "Document and App Client side should detect the changes to pages/_document.js and display it",
      "Document and App Client side should keep state between page navigations",
      "Document and App Rendering via HTTP _app It should share module state with pages",
      "Document and App Rendering via HTTP _app It should show valid error when thrown in _app getInitialProps",
      "Document and App Rendering via HTTP _app It shows a custom tag",
      "Document and App Rendering via HTTP _document Document.getInitialProps returns html prop representing app shell",
      "Document and App Rendering via HTTP _document It adds a timestamp to link tags with preload attribute to invalidate the cache (DEV only)",
      "Document and App Rendering via HTTP _document It adds crossOrigin to all scripts and preload links",
      "Document and App Rendering via HTTP _document It adds nonces to all scripts and preload links",
      "Document and App Rendering via HTTP _document It renders ctx.renderPage with enhanceApp and enhanceComponent correctly",
      "Document and App Rendering via HTTP _document It renders ctx.renderPage with enhanceApp correctly",
      "Document and App Rendering via HTTP _document It renders ctx.renderPage with enhanceComponent correctly",
      "Document and App Rendering via HTTP _document It renders ctx.renderPage with enhancer correctly",
      "Document and App Rendering via HTTP _document should include required elements in rendered html",
      "Document and App With CSP enabled should load inline script by hash",
      "Document and App With CSP enabled should load inline script by nonce",
      "Document and App should not have any missing key warnings"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-dynamic-error/test/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "app-dynamic-error production mode throws an error when prerendering a page with config dynamic error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-functional/test/index.test.js": {
    "passed": ["Document and App should not have any missing key warnings"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-tree/test/index.test.js": {
    "passed": [
      "AppTree development mode should pass AppTree to NextPageContext",
      "AppTree development mode should provide router context in AppTree on CSR",
      "AppTree development mode should provide router context in AppTree on SSR"
    ],
    "failed": [],
    "pending": [
      "AppTree production mode should pass AppTree to NextPageContext",
      "AppTree production mode should provide router context in AppTree on CSR",
      "AppTree production mode should provide router context in AppTree on SSR"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/app-types/app-types.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "app type checking production mode should generate route types correctly and report link error",
      "app type checking production mode should generate route types correctly and report router API errors",
      "app type checking production mode should type check invalid entry exports"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/auto-export-error-bail/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Auto Export _error bail production mode should not opt-out of auto static optimization from invalid _error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/auto-export-query-error/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Auto Export production mode should show warning for query provided for auto exported page correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/auto-export/test/index.test.js": {
    "passed": [
      "Auto Export dev Refreshes query on mount",
      "Auto Export dev Supports commonjs 1",
      "Auto Export dev Supports commonjs 2",
      "Auto Export dev should include error link when hydration error does occur",
      "Auto Export dev should not replace URL with page name while asPath is delayed",
      "Auto Export dev should not show hydration warning from mismatching asPath",
      "Auto Export dev should update asPath after mount"
    ],
    "failed": [],
    "pending": [
      "Auto Export production mode Refreshes query on mount",
      "Auto Export production mode Supports commonjs 1",
      "Auto Export production mode Supports commonjs 2",
      "Auto Export production mode should not replace URL with page name while asPath is delayed",
      "Auto Export production mode should update asPath after mount"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/babel-custom/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Babel should allow babelrc JSON5 syntax",
      "Babel should allow setting babelrc env",
      "Babel should allow setting targets to a string",
      "Babel should allow setting targets.browsers"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/babel-next-image/babel-next-image.test.js": {
    "passed": [],
    "failed": [],
    "pending": ["babel-next-image should work with babel and next/image"],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/babel/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Babel Rendering via HTTP Should compile a page with flowtype correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/basepath-root-catch-all/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "development mode should use correct data URL for root catch-all",
      "production mode should use correct data URL for root catch-all"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/bigint/test/index.test.js": {
    "passed": [
      "bigint API route support development mode should return 200",
      "bigint API route support development mode should return the BigInt result text"
    ],
    "failed": [],
    "pending": [
      "bigint API route support production mode should return 200",
      "bigint API route support production mode should return the BigInt result text"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/broken-webpack-plugin/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Handles a broken webpack plugin (precompile) should render error correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-indicator/test/index.test.js": {
    "passed": [
      "Build Activity Indicator Disabled with next.config.js Does not add the build indicator container",
      "Build Activity Indicator Enabled Adds the build indicator container",
      "Build Activity Indicator Enabled Shows build indicator when page is built from modifying",
      "Build Activity Indicator should validate buildActivityPosition config"
    ],
    "failed": [],
    "pending": [
      "Build Activity Indicator Enabled webpack only Shows the build indicator when a page is built during navigation"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-output/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Build Output production mode Basic Application Output (experimental: {\"gzipSize\":false}) should not deviate from snapshot",
      "Build Output production mode Basic Application Output (experimental: {\"gzipSize\":false}) should not emit extracted comments",
      "Build Output production mode Basic Application Output (experimental: {\"gzipSize\":false}) should not include internal pages",
      "Build Output production mode Basic Application Output (experimental: {\"gzipSize\":false}) should print duration when rendering or get static props takes long",
      "Build Output production mode Basic Application Output (experimental: {}) should not deviate from snapshot",
      "Build Output production mode Basic Application Output (experimental: {}) should not emit extracted comments",
      "Build Output production mode Basic Application Output (experimental: {}) should not include internal pages",
      "Build Output production mode Basic Application Output (experimental: {}) should print duration when rendering or get static props takes long",
      "Build Output production mode Custom App Output should not include custom error",
      "Build Output production mode Custom Error Output should not include custom app",
      "Build Output production mode Custom Static Error Output should not specify /404 as lambda when static",
      "Build Output production mode With AMP Output should not include custom error",
      "Build Output production mode With Parallel Routes should not have duplicate paths that resolve to the same route"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-trace-extra-entries-turbo/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "build trace with extra entries production mode should build and trace correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-trace-extra-entries/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "build trace with extra entries production mode should build and trace correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/build-warnings/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Build warnings production mode should not shown warning about minification without any modification",
      "Build warnings production mode should not warn about missing cache in non-CI",
      "Build warnings production mode should not warn about missing cache on supported platforms",
      "Build warnings production mode should shown warning about minification for minimize",
      "Build warnings production mode should shown warning about minification for minimizer",
      "Build warnings production mode should warn about missing cache in CI"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/catches-missing-getStaticProps/test/index.test.js": {
    "passed": [
      "Catches Missing getStaticProps development mode should catch it in development mode"
    ],
    "failed": [],
    "pending": [
      "Catches Missing getStaticProps production mode should catch it in server build mode"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/chunking/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Chunking production mode Serving should hydrate with aggressive chunking",
      "Chunking production mode Serving should load chunks when navigating",
      "Chunking production mode should create a framework chunk",
      "Chunking production mode should execute the build manifest",
      "Chunking production mode should not create a commons chunk",
      "Chunking production mode should not create a lib chunk for react or react-dom",
      "Chunking production mode should not include more than one instance of react-dom",
      "Chunking production mode should not preload the build manifest",
      "Chunking production mode should use all url friendly names"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/clean-distdir/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Cleaning distDir production mode disabled write should not clean up .next before build start",
      "Cleaning distDir production mode should clean up .next before build start"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/cli/test/index.test.js": {
    "passed": [
      "CLI Usage dev --experimental-https",
      "CLI Usage dev --experimental-https with provided key/cert",
      "CLI Usage dev --help",
      "CLI Usage dev --hostname",
      "CLI Usage dev --port",
      "CLI Usage dev --port 0",
      "CLI Usage dev -H",
      "CLI Usage dev -h",
      "CLI Usage dev -p",
      "CLI Usage dev -p conflict",
      "CLI Usage dev -p reserved",
      "CLI Usage dev Allow retry if default port is already in use",
      "CLI Usage dev NODE_OPTIONS='--inspect'",
      "CLI Usage dev NODE_OPTIONS='--require=file with spaces to --require.js'",
      "CLI Usage dev NODE_OPTIONS='--require=file with spaces to-require-with-node-require-option.js'",
      "CLI Usage dev PORT=0",
      "CLI Usage dev custom directory",
      "CLI Usage dev invalid directory",
      "CLI Usage dev should exit when SIGINT is signalled",
      "CLI Usage dev should exit when SIGTERM is signalled",
      "CLI Usage dev should format IPv6 addresses correctly",
      "CLI Usage dev should not throw UnhandledPromiseRejectionWarning",
      "CLI Usage dev should warn when unknown argument provided",
      "CLI Usage export --help",
      "CLI Usage export run export command",
      "CLI Usage info --help",
      "CLI Usage info -h",
      "CLI Usage info should print output",
      "CLI Usage info should print output with next.config.mjs",
      "CLI Usage no command --help",
      "CLI Usage no command --version",
      "CLI Usage no command -h",
      "CLI Usage no command -v",
      "CLI Usage no command detects command typos",
      "CLI Usage no command invalid directory"
    ],
    "failed": [],
    "pending": [
      "CLI Usage production mode build --help",
      "CLI Usage production mode build -h",
      "CLI Usage production mode build invalid directory",
      "CLI Usage production mode build should exit when SIGINT is signalled",
      "CLI Usage production mode build should exit when SIGTERM is signalled",
      "CLI Usage production mode build should not throw UnhandledPromiseRejectionWarning",
      "CLI Usage production mode build should warn when unknown argument provided",
      "CLI Usage production mode start --help",
      "CLI Usage production mode start --keepAliveTimeout Infinity",
      "CLI Usage production mode start --keepAliveTimeout happy path",
      "CLI Usage production mode start --keepAliveTimeout negative number",
      "CLI Usage production mode start --keepAliveTimeout string arg",
      "CLI Usage production mode start -h",
      "CLI Usage production mode start duplicate sass deps",
      "CLI Usage production mode start invalid directory",
      "CLI Usage production mode start should exit when SIGINT is signalled",
      "CLI Usage production mode start should exit when SIGTERM is signalled",
      "CLI Usage production mode start should format IPv6 addresses correctly",
      "CLI Usage production mode start should not start on a port out of range",
      "CLI Usage production mode start should not start on a reserved port",
      "CLI Usage production mode start should not throw UnhandledPromiseRejectionWarning",
      "CLI Usage production mode start should warn when unknown argument provided",
      "CLI Usage production mode telemetry --help",
      "CLI Usage production mode telemetry -h",
      "CLI Usage production mode telemetry should not throw UnhandledPromiseRejectionWarning",
      "CLI Usage production mode telemetry should warn when unknown argument provided"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/client-404/test/index.test.js": {
    "passed": [
      "Client 404 development mode Client Navigation 404 should hard navigate to URL on failing to load bundle",
      "Client 404 development mode Client Navigation 404 should show 404 upon client replacestate should navigate the page"
    ],
    "failed": [],
    "pending": [
      "Client 404 production mode Client Navigation 404 should hard navigate to URL on failing to load bundle",
      "Client 404 production mode Client Navigation 404 should hard navigate to URL on failing to load missing bundle",
      "Client 404 production mode Client Navigation 404 should show 404 upon client replacestate should navigate the page"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/client-navigation-a11y/test/index.test.js": {
    "passed": [
      "Client Navigation accessibility <RouteAnnouncer /> There is a title and a h1 tag has the innerText equal to the value of h1",
      "Client Navigation accessibility <RouteAnnouncer /> There is a title but no h1 tag has the innerText equal to the value of document.title",
      "Client Navigation accessibility <RouteAnnouncer /> There is no title and no h1 tag has the innerText equal to the value of the pathname",
      "Client Navigation accessibility <RouteAnnouncer /> There is no title but a h1 tag has the innerText equal to the value of h1",
      "Client Navigation accessibility <RouteAnnouncer /> has aria-live=\"assertive\" and role=\"alert\"",
      "Client Navigation accessibility <RouteAnnouncer /> should not have the initial route announced"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/client-shallow-routing/test/index.test.js": {
    "passed": [
      "Client Shallow Routing development mode should not shallowly navigate back in history when current page was not shallow",
      "Client Shallow Routing development mode should not shallowly navigate forwards in history when current page was not shallow"
    ],
    "failed": [],
    "pending": [
      "Client Shallow Routing production mode should not shallowly navigate back in history when current page was not shallow",
      "Client Shallow Routing production mode should not shallowly navigate forwards in history when current page was not shallow"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/compression/test/index.test.js": {
    "passed": ["Compression should compress responses by default"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-devtool-dev/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "devtool set in development mode in next config should warn and revert when a devtool is set in development mode"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-experimental-warning/test/index.test.js": {
    "passed": [
      "Config Experimental Warning should not show warning with config from object",
      "Config Experimental Warning should not show warning with default config from function",
      "Config Experimental Warning should not show warning with default value",
      "Config Experimental Warning should show warning with config from function with experimental",
      "Config Experimental Warning should show warning with config from object with experimental",
      "Config Experimental Warning should show warning with config from object with experimental and multiple keys"
    ],
    "failed": [],
    "pending": [
      "Config Experimental Warning production mode should not show next app info in next start",
      "Config Experimental Warning production mode should show next app info with all experimental features in next build",
      "Config Experimental Warning production mode should show unrecognized experimental features in warning but not in start log experiments section"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-mjs/test/index.test.js": {
    "passed": [
      "Configuration correctly imports a package that defines `module` but no `main` in package.json",
      "Configuration renders public config on the server only",
      "Configuration renders server config on the server only",
      "Configuration should disable X-Powered-By header support",
      "Configuration should have config available on the client"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-output-export/test/index.test.ts": {
    "passed": [
      "config-output-export should error with \"i18n\" config",
      "config-output-export should error with api routes function",
      "config-output-export should error with getServerSideProps without fallback",
      "config-output-export should error with getStaticPaths and fallback blocking",
      "config-output-export should error with getStaticPaths and fallback true",
      "config-output-export should error with getStaticProps and revalidate 10 seconds (ISR)",
      "config-output-export should error with middleware function",
      "config-output-export should work with getStaticPaths and fallback false",
      "config-output-export should work with getStaticProps and revalidate false",
      "config-output-export should work with getStaticProps and without revalidate",
      "config-output-export should work with static homepage",
      "config-output-export when hasNextSupport = false should error with \"headers\" config",
      "config-output-export when hasNextSupport = false should error with \"redirects\" config",
      "config-output-export when hasNextSupport = false should error with \"rewrites\" config",
      "config-output-export when hasNextSupport = true should error with \"headers\" config",
      "config-output-export when hasNextSupport = true should error with \"redirects\" config",
      "config-output-export when hasNextSupport = true should error with \"rewrites\" config"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-promise-error/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Promise in next config production mode should warn when a promise is returned on webpack"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-resolve-alias/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid resolve alias should show relevant error when webpack resolve alias is wrong"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-syntax-error/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Invalid config syntax production mode should error when next.config.js contains syntax error",
      "Invalid config syntax production mode should error when next.config.mjs contains syntax error"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config-validation/test/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "next.config.js validation production mode it should validate correctly for invalid config types",
      "next.config.js validation production mode it should validate correctly for unexpected config fields",
      "next.config.js validation production mode should allow undefined environment variables"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/config/test/index.test.js": {
    "passed": [
      "Configuration correctly imports a package that defines `module` but no `main` in package.json",
      "Configuration renders public config on the server only",
      "Configuration renders server config on the server only",
      "Configuration should disable X-Powered-By header support",
      "Configuration should have config available on the client"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/conflicting-public-file-page/test/index.test.js": {
    "passed": [
      "Errors on conflict between public file and page file development mode Throws error during development"
    ],
    "failed": [],
    "pending": [
      "Errors on conflict between public file and page file production mode Throws error during build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/conflicting-ssg-paths/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Conflicting SSG paths production mode should show proper error when a dynamic SSG route conflicts with SSR route",
      "Conflicting SSG paths production mode should show proper error when a dynamic SSG route conflicts with normal route",
      "Conflicting SSG paths production mode should show proper error when two dynamic SSG routes have conflicting paths"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/examples.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app --example should create if --example value is default",
      "create-next-app --example should create on valid Next.js example name",
      "create-next-app --example should create with GitHub URL",
      "create-next-app --example should create with GitHub URL and --example-path",
      "create-next-app --example should create with GitHub URL trailing slash",
      "create-next-app --example should fall back to default template if failed to download",
      "create-next-app --example should not create if --example flag value is absent",
      "create-next-app --example should not create if --example flag value is invalid",
      "create-next-app --example should use --example-path over the GitHub URL"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app should not create if the target directory is not empty",
      "create-next-app should not create if the target directory is not writable",
      "create-next-app should not install dependencies if --skip-install"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/package-manager/bun.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app with package manager bun should use bun for --use-bun flag",
      "create-next-app with package manager bun should use bun for --use-bun flag with example",
      "create-next-app with package manager bun should use bun when user-agent is bun",
      "create-next-app with package manager bun should use bun when user-agent is bun with example"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/package-manager/npm.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app with package manager npm should use npm for --use-npm flag",
      "create-next-app with package manager npm should use npm for --use-npm flag with example",
      "create-next-app with package manager npm should use npm when user-agent is npm",
      "create-next-app with package manager npm should use npm when user-agent is npm with example"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/package-manager/pnpm.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app with package manager pnpm should use pnpm for --use-pnpm flag",
      "create-next-app with package manager pnpm should use pnpm for --use-pnpm flag with example",
      "create-next-app with package manager pnpm should use pnpm when user-agent is pnpm",
      "create-next-app with package manager pnpm should use pnpm when user-agent is pnpm with example"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/package-manager/yarn.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app with package manager yarn should use yarn for --use-yarn flag",
      "create-next-app with package manager yarn should use yarn for --use-yarn flag with example",
      "create-next-app with package manager yarn should use yarn when user-agent is yarn",
      "create-next-app with package manager yarn should use yarn when user-agent is yarn with example"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/prompts.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app prompts should prompt user for choice if --import-alias is absent",
      "create-next-app prompts should prompt user for choice if --js or --ts flag is absent",
      "create-next-app prompts should prompt user for choice if --tailwind is absent",
      "create-next-app prompts should prompt user for choice if directory name is absent"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/templates/app.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app --app (App Router) should create JavaScript project with --js flag",
      "create-next-app --app (App Router) should create TailwindCSS project with --tailwind flag",
      "create-next-app --app (App Router) should create TypeScript project with --ts flag",
      "create-next-app --app (App Router) should create an empty TailwindCSS project with --empty flag",
      "create-next-app --app (App Router) should create an empty project with --empty flag",
      "create-next-app --app (App Router) should create project inside \"src\" directory with --src-dir flag",
      "create-next-app --app (App Router) should enable turbopack dev with --turbo flag"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/create-next-app/templates/pages.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "create-next-app --no-app (Pages Router) should create JavaScript project with --js flag",
      "create-next-app --no-app (Pages Router) should create TailwindCSS project with --tailwind flag",
      "create-next-app --no-app (Pages Router) should create TypeScript project with --ts flag",
      "create-next-app --no-app (Pages Router) should create an empty TailwindCSS project with --empty flag",
      "create-next-app --no-app (Pages Router) should create an empty project with --empty flag",
      "create-next-app --no-app (Pages Router) should create project inside \"src\" directory with --src-dir flag",
      "create-next-app --no-app (Pages Router) should enable turbopack dev with --turbo flag"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/critical-css/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "CSS optimization for SSR apps production mode should have all CSS files in manifest",
      "CSS optimization for SSR apps production mode should inline critical CSS",
      "CSS optimization for SSR apps production mode should inline critical CSS (dynamic)",
      "CSS optimization for SSR apps production mode should not inline non-critical css"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-client-nav/test/index.test.js": {
    "passed": [
      "CSS Module client-side navigation dev should be able to client-side navigate from blue to red",
      "CSS Module client-side navigation dev should be able to client-side navigate from none to blue",
      "CSS Module client-side navigation dev should be able to client-side navigate from none to red",
      "CSS Module client-side navigation dev should be able to client-side navigate from red to blue"
    ],
    "failed": [],
    "pending": [
      "CSS Module client-side navigation production mode should be able to client-side navigate from blue to red",
      "CSS Module client-side navigation production mode should be able to client-side navigate from none to blue",
      "CSS Module client-side navigation production mode should be able to client-side navigate from none to red",
      "CSS Module client-side navigation production mode should be able to client-side navigate from red to blue",
      "CSS Module client-side navigation production mode should time out and hard navigate for stalled CSS request"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-customization/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "CSS Customization production mode Bad CSS Customization Array (1) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (2) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (3) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (4) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (5) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (6) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (7) should fail the build",
      "CSS Customization production mode Bad CSS Customization Array (8) should fail the build",
      "CSS Customization production mode Bad CSS Customization Function should fail the build",
      "CSS Customization production mode Bad CSS Customization should compile successfully",
      "CSS Customization production mode Bad CSS Customization should've compiled and prefixed",
      "CSS Customization production mode Bad CSS Customization should've emitted a source map",
      "CSS Customization production mode Basic CSS should compile successfully",
      "CSS Customization production mode Basic CSS should've compiled and prefixed",
      "CSS Customization production mode Basic CSS should've emitted a source map",
      "CSS Customization production mode Correct CSS Customization Array should compile successfully",
      "CSS Customization production mode Correct CSS Customization Array should've compiled and prefixed",
      "CSS Customization production mode Correct CSS Customization Array should've emitted a source map",
      "CSS Customization production mode Correct CSS Customization custom loader should compile successfully",
      "CSS Customization production mode Correct CSS Customization custom loader should've applied style"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-features/test/browserslist.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Browserslist: New production mode should have compiled successfully",
      "Browserslist: New production mode should've emitted a single CSS file",
      "Browserslist: Old production mode should have compiled successfully",
      "Browserslist: Old production mode should've emitted a single CSS file"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-features/test/css-modules.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "CSS Modules: Import Exports production mode should have compiled successfully",
      "CSS Modules: Import Exports production mode should've emitted a single CSS file",
      "CSS Modules: Import Global CSS production mode should have compiled successfully",
      "CSS Modules: Import Global CSS production mode should've emitted a single CSS file",
      "CSS Modules: Importing Invalid Global CSS production mode should fail to build",
      "Custom Properties: Fail for :root {} in CSS Modules production mode should fail to build",
      "Custom Properties: Fail for global element in CSS Modules production mode should fail to build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-features/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Custom Properties: Pass-Through IE11 production mode should have compiled successfully",
      "Custom Properties: Pass-Through IE11 production mode should've emitted a single CSS file",
      "Custom Properties: Pass-Through Modern production mode should have compiled successfully",
      "Custom Properties: Pass-Through Modern production mode should've emitted a single CSS file",
      "Inline Comments: Minify production mode should have compiled successfully",
      "Inline Comments: Minify production mode should've emitted a single CSS file"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-minify/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "css-minify production mode should minify correctly by removing whitespace"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css-modules/test/index.test.js": {
    "passed": [
      "Can hot reload CSS Module without losing state should update CSS color without remounting <input>",
      "Has CSS Module in computed styles in Development should have CSS for page"
    ],
    "failed": [],
    "pending": [
      "3rd Party CSS Module Support production mode should have compiled successfully",
      "3rd Party CSS Module Support production mode should've emitted a single CSS file",
      "3rd Party CSS Module Support production mode should've injected the CSS on server render",
      "Basic CSS Module Support production mode should have compiled successfully",
      "Basic CSS Module Support production mode should've emitted a single CSS file",
      "Basic CSS Module Support production mode should've injected the CSS on server render",
      "CSS Module Composes Usage (Basic) production mode should have compiled successfully",
      "CSS Module Composes Usage (Basic) production mode should've emitted a single CSS file",
      "CSS Module Composes Usage (External) production mode should have compiled successfully",
      "CSS Module Composes Usage (External) production mode should've emitted a single CSS file",
      "Catch-all Route CSS Module Usage production mode should apply styles correctly",
      "Catch-all Route CSS Module Usage production mode should have compiled successfully",
      "Catch-all Route CSS Module Usage production mode should've emitted a single CSS file",
      "Dynamic Route CSS Module Usage production mode should apply styles correctly",
      "Dynamic Route CSS Module Usage production mode should have compiled successfully",
      "Dynamic Route CSS Module Usage production mode should've emitted a single CSS file",
      "Has CSS Module in computed styles in Production production mode should have CSS for page",
      "Has CSS Module in computed styles in Production production mode should have compiled successfully",
      "Invalid CSS Module Usage in node_modules production mode should fail to build",
      "Invalid Global CSS Module Usage in node_modules production mode should fail to build",
      "Valid CSS Module Usage from within node_modules production mode should have compiled successfully",
      "Valid CSS Module Usage from within node_modules production mode should've emitted a single CSS file",
      "Valid CSS Module Usage from within node_modules production mode should've prerendered with relevant data",
      "Valid Nested CSS Module Usage from within node_modules production mode should have compiled successfully",
      "Valid Nested CSS Module Usage from within node_modules production mode should've emitted a single CSS file",
      "Valid Nested CSS Module Usage from within node_modules production mode should've prerendered with relevant data"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css/test/basic-global-support.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Basic Global Support production mode useLightnincsss(false) should compile successfully",
      "Basic Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
      "Basic Global Support production mode useLightnincsss(true) should compile successfully",
      "Basic Global Support production mode useLightnincsss(true) should've emitted a single CSS file",
      "Basic Global Support with special characters in path production mode useLightnincsss(false) should compile successfully",
      "Basic Global Support with special characters in path production mode useLightnincsss(false) should've emitted a single CSS file",
      "Basic Global Support with special characters in path production mode useLightnincsss(true) should compile successfully",
      "Basic Global Support with special characters in path production mode useLightnincsss(true) should've emitted a single CSS file",
      "Basic Global Support with src/ dir production mode useLightnincsss(false) should compile successfully",
      "Basic Global Support with src/ dir production mode useLightnincsss(false) should've emitted a single CSS file",
      "Basic Global Support with src/ dir production mode useLightnincsss(true) should compile successfully",
      "Basic Global Support with src/ dir production mode useLightnincsss(true) should've emitted a single CSS file",
      "CSS URL via `file-loader` and asset prefix (1) production mode should compile successfully",
      "CSS URL via `file-loader` and asset prefix (1) production mode should've emitted expected files",
      "CSS URL via `file-loader` and asset prefix (2) production mode should compile successfully",
      "CSS URL via `file-loader` and asset prefix (2) production mode should've emitted expected files",
      "CSS URL via `file-loader` production mode useLightnincsss(false) should compile successfully",
      "CSS URL via `file-loader` production mode useLightnincsss(false) should've emitted expected files",
      "CSS URL via `file-loader` production mode useLightnincsss(true) should compile successfully",
      "CSS URL via `file-loader` production mode useLightnincsss(true) should've emitted expected files",
      "Multi Global Support (reversed) production mode useLightnincsss(false) should compile successfully",
      "Multi Global Support (reversed) production mode useLightnincsss(false) should've emitted a single CSS file",
      "Multi Global Support (reversed) production mode useLightnincsss(true) should compile successfully",
      "Multi Global Support (reversed) production mode useLightnincsss(true) should've emitted a single CSS file",
      "Multi Global Support production mode useLightnincsss(false) should compile successfully",
      "Multi Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
      "Multi Global Support production mode useLightnincsss(true) should compile successfully",
      "Multi Global Support production mode useLightnincsss(true) should've emitted a single CSS file",
      "Nested @import() Global Support production mode useLightnincsss(false) should compile successfully",
      "Nested @import() Global Support production mode useLightnincsss(false) should've emitted a single CSS file",
      "Nested @import() Global Support production mode useLightnincsss(true) should compile successfully",
      "Nested @import() Global Support production mode useLightnincsss(true) should've emitted a single CSS file"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css/test/css-and-styled-jsx.test.js": {
    "passed": [
      "Ordering with styled-jsx (dev) should have the correct color (css ordering)"
    ],
    "failed": [],
    "pending": [
      "Ordering with styled-jsx (prod) production mode should have compiled successfully",
      "Ordering with styled-jsx (prod) production mode should have the correct color (css ordering)"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css/test/css-compilation.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "CSS Property Ordering production mode useLightnincsss(false) should have compiled successfully",
      "CSS Property Ordering production mode useLightnincsss(false) should have the border width (property ordering)",
      "CSS Property Ordering production mode useLightnincsss(true) should have compiled successfully",
      "CSS Property Ordering production mode useLightnincsss(true) should have the border width (property ordering)",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should compile successfully",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should've compiled and prefixed",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(false) should've emitted a source map",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should compile successfully",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should've compiled and prefixed",
      "CSS Support production mode CSS Compilation and Prefixing useLightnincsss(true) should've emitted a source map",
      "CSS Support production mode Good CSS Import from node_modules useLightnincsss(false) should compile successfully",
      "CSS Support production mode Good CSS Import from node_modules useLightnincsss(false) should've emitted a single CSS file",
      "CSS Support production mode Good CSS Import from node_modules useLightnincsss(true) should compile successfully",
      "CSS Support production mode Good CSS Import from node_modules useLightnincsss(true) should've emitted a single CSS file",
      "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(false) should compile successfully",
      "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(false) should've emitted a single CSS file",
      "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(true) should compile successfully",
      "CSS Support production mode Good Nested CSS Import from node_modules useLightnincsss(true) should've emitted a single CSS file",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should have CSS for page",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should have compiled successfully",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(false) should've preloaded the CSS file and injected it in <head>",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should have CSS for page",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should have compiled successfully",
      "CSS Support production mode Has CSS in computed styles in Production useLightnincsss(true) should've preloaded the CSS file and injected it in <head>",
      "CSS Support production mode React Lifecyce Order (production) useLightnincsss(false) should have compiled successfully",
      "CSS Support production mode React Lifecyce Order (production) useLightnincsss(false) should have the correct color on mount after navigation",
      "CSS Support production mode React Lifecyce Order (production) useLightnincsss(true) should have compiled successfully",
      "CSS Support production mode React Lifecyce Order (production) useLightnincsss(true) should have the correct color on mount after navigation"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css/test/css-modules.test.js": {
    "passed": [
      "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should have the correct color (css ordering)",
      "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should have the correct color (css ordering) during hot reloads",
      "Ordering with Global CSS and Modules (dev) useLightnincsss(false) should not execute scripts in any order",
      "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should have the correct color (css ordering)",
      "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should have the correct color (css ordering) during hot reloads",
      "Ordering with Global CSS and Modules (dev) useLightnincsss(true) should not execute scripts in any order"
    ],
    "failed": [],
    "pending": [
      "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on hover)",
      "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on load)",
      "Basic CSS Modules Ordering useLightnincsss(false) Development Mode should have correct color on index page (on nav)",
      "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on hover)",
      "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on load)",
      "Basic CSS Modules Ordering useLightnincsss(false) production mode should have correct color on index page (on nav)",
      "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on hover)",
      "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on load)",
      "Basic CSS Modules Ordering useLightnincsss(true) Development Mode should have correct color on index page (on nav)",
      "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on hover)",
      "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on load)",
      "Basic CSS Modules Ordering useLightnincsss(true) production mode should have correct color on index page (on nav)",
      "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on hover)",
      "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on load)",
      "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on nav from index)",
      "CSS Modules Composes Ordering useLightnincsss(false) development mode should have correct color on index page (on nav from other)",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct CSS injection order",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on hover)",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on load)",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on nav from index)",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should have correct color on index page (on nav from other)",
      "CSS Modules Composes Ordering useLightnincsss(false) production mode should not change color on hover",
      "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on hover)",
      "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on load)",
      "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on nav from index)",
      "CSS Modules Composes Ordering useLightnincsss(true) development mode should have correct color on index page (on nav from other)",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct CSS injection order",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on hover)",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on load)",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on nav from index)",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should have correct color on index page (on nav from other)",
      "CSS Modules Composes Ordering useLightnincsss(true) production mode should not change color on hover",
      "Data URLs production mode should compile successfully",
      "Data URLs production mode should have emitted expected files",
      "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(false) should have compiled successfully",
      "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(false) should have the correct color (css ordering)",
      "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(true) should have compiled successfully",
      "Ordering with Global CSS and Modules (prod) production mode useLightnincsss(true) should have the correct color (css ordering)",
      "should handle unresolved files gracefully production mode should build correctly",
      "should handle unresolved files gracefully production mode should have correct file references in CSS output"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/css/test/css-rendering.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "CSS Support CSS Cleanup on Render Failure useLightnincsss(false) production mode not have intermediary page styles on error rendering",
      "CSS Support CSS Cleanup on Render Failure useLightnincsss(true) production mode not have intermediary page styles on error rendering",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct CSS injection order",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on hover)",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on load)",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on nav from index)",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should have correct color on index page (on nav from other)",
      "CSS Support CSS page transition inject <style> with nonce so it works with CSP header production mode should not change color on hover",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should hydrate black without dependencies manifest",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should hydrate red without dependencies manifest",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(false) production mode should route from black to red without dependencies",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should hydrate black without dependencies manifest",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should hydrate red without dependencies manifest",
      "CSS Support Page hydrates with CSS and not waiting on dependencies useLightnincsss(true) production mode should route from black to red without dependencies",
      "CSS Support Page reload on CSS missing useLightnincsss(false) production mode should fall back to server-side transition on missing CSS",
      "CSS Support Page reload on CSS missing useLightnincsss(true) production mode should fall back to server-side transition on missing CSS",
      "CSS Support production mode CSS Import from node_modules useLightnincsss(false) should fail the build",
      "CSS Support production mode CSS Import from node_modules useLightnincsss(true) should fail the build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/edge-runtime-response-error/test/index.test.js": {
    "passed": [
      "Edge runtime code with imports test error if response is not Response type Edge API dev test Response",
      "Edge runtime code with imports test error if response is not Response type Middleware dev test Response"
    ],
    "failed": [],
    "pending": [
      "Edge runtime code with imports test error if response is not Response type production mode Edge API build test Response",
      "Edge runtime code with imports test error if response is not Response type production mode Middleware build test Response"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/edge-runtime-streaming-error/test/index.test.ts": {
    "passed": ["development mode logs the error correctly"],
    "failed": [],
    "pending": ["production mode logs the error correctly"],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/edge-runtime-with-node.js-apis/test/index.test.ts": {
    "passed": [
      "Edge route using Node.js API development mode does not throw on using process.arch",
      "Edge route using Node.js API development mode does not throw on using process.version",
      "Edge route using Node.js API development mode throws error when using BroadcastChannel",
      "Edge route using Node.js API development mode throws error when using ByteLengthQueuingStrategy",
      "Edge route using Node.js API development mode throws error when using CompressionStream",
      "Edge route using Node.js API development mode throws error when using CountQueuingStrategy",
      "Edge route using Node.js API development mode throws error when using DecompressionStream",
      "Edge route using Node.js API development mode throws error when using DomException",
      "Edge route using Node.js API development mode throws error when using MessageChannel",
      "Edge route using Node.js API development mode throws error when using MessageEvent",
      "Edge route using Node.js API development mode throws error when using MessagePort",
      "Edge route using Node.js API development mode throws error when using ReadableByteStreamController",
      "Edge route using Node.js API development mode throws error when using ReadableStreamBYOBRequest",
      "Edge route using Node.js API development mode throws error when using ReadableStreamDefaultController",
      "Edge route using Node.js API development mode throws error when using TransformStreamDefaultController",
      "Edge route using Node.js API development mode throws error when using WritableStreamDefaultController",
      "Edge route using Node.js API development mode throws error when using clearImmediate",
      "Edge route using Node.js API development mode throws error when using process.cpuUsage",
      "Edge route using Node.js API development mode throws error when using process.cwd",
      "Edge route using Node.js API development mode throws error when using process.getuid",
      "Edge route using Node.js API development mode throws error when using setImmediate",
      "Middleware using Node.js API development mode does not throw on using process.arch",
      "Middleware using Node.js API development mode does not throw on using process.version",
      "Middleware using Node.js API development mode throws error when using BroadcastChannel",
      "Middleware using Node.js API development mode throws error when using ByteLengthQueuingStrategy",
      "Middleware using Node.js API development mode throws error when using CompressionStream",
      "Middleware using Node.js API development mode throws error when using CountQueuingStrategy",
      "Middleware using Node.js API development mode throws error when using DecompressionStream",
      "Middleware using Node.js API development mode throws error when using DomException",
      "Middleware using Node.js API development mode throws error when using MessageChannel",
      "Middleware using Node.js API development mode throws error when using MessageEvent",
      "Middleware using Node.js API development mode throws error when using MessagePort",
      "Middleware using Node.js API development mode throws error when using ReadableByteStreamController",
      "Middleware using Node.js API development mode throws error when using ReadableStreamBYOBRequest",
      "Middleware using Node.js API development mode throws error when using ReadableStreamDefaultController",
      "Middleware using Node.js API development mode throws error when using TransformStreamDefaultController",
      "Middleware using Node.js API development mode throws error when using WritableStreamDefaultController",
      "Middleware using Node.js API development mode throws error when using clearImmediate",
      "Middleware using Node.js API development mode throws error when using process.cpuUsage",
      "Middleware using Node.js API development mode throws error when using process.cwd",
      "Middleware using Node.js API development mode throws error when using process.getuid",
      "Middleware using Node.js API development mode throws error when using setImmediate"
    ],
    "failed": [],
    "pending": [
      "Edge route using Node.js API production mode does not warn on using process.arch",
      "Edge route using Node.js API production mode does not warn on using process.version",
      "Edge route using Node.js API production mode warns for BroadcastChannel during build",
      "Edge route using Node.js API production mode warns for ByteLengthQueuingStrategy during build",
      "Edge route using Node.js API production mode warns for CompressionStream during build",
      "Edge route using Node.js API production mode warns for CountQueuingStrategy during build",
      "Edge route using Node.js API production mode warns for DecompressionStream during build",
      "Edge route using Node.js API production mode warns for DomException during build",
      "Edge route using Node.js API production mode warns for MessageChannel during build",
      "Edge route using Node.js API production mode warns for MessageEvent during build",
      "Edge route using Node.js API production mode warns for MessagePort during build",
      "Edge route using Node.js API production mode warns for ReadableByteStreamController during build",
      "Edge route using Node.js API production mode warns for ReadableStreamBYOBRequest during build",
      "Edge route using Node.js API production mode warns for ReadableStreamDefaultController during build",
      "Edge route using Node.js API production mode warns for TransformStreamDefaultController during build",
      "Edge route using Node.js API production mode warns for WritableStreamDefaultController during build",
      "Edge route using Node.js API production mode warns for clearImmediate during build",
      "Edge route using Node.js API production mode warns for process.cpuUsage during build",
      "Edge route using Node.js API production mode warns for process.cwd during build",
      "Edge route using Node.js API production mode warns for process.getuid during build",
      "Edge route using Node.js API production mode warns for setImmediate during build",
      "Middleware using Node.js API production mode does not warn on using process.arch",
      "Middleware using Node.js API production mode does not warn on using process.version",
      "Middleware using Node.js API production mode warns for BroadcastChannel during build",
      "Middleware using Node.js API production mode warns for ByteLengthQueuingStrategy during build",
      "Middleware using Node.js API production mode warns for CompressionStream during build",
      "Middleware using Node.js API production mode warns for CountQueuingStrategy during build",
      "Middleware using Node.js API production mode warns for DecompressionStream during build",
      "Middleware using Node.js API production mode warns for DomException during build",
      "Middleware using Node.js API production mode warns for MessageChannel during build",
      "Middleware using Node.js API production mode warns for MessageEvent during build",
      "Middleware using Node.js API production mode warns for MessagePort during build",
      "Middleware using Node.js API production mode warns for ReadableByteStreamController during build",
      "Middleware using Node.js API production mode warns for ReadableStreamBYOBRequest during build",
      "Middleware using Node.js API production mode warns for ReadableStreamDefaultController during build",
      "Middleware using Node.js API production mode warns for TransformStreamDefaultController during build",
      "Middleware using Node.js API production mode warns for WritableStreamDefaultController during build",
      "Middleware using Node.js API production mode warns for clearImmediate during build",
      "Middleware using Node.js API production mode warns for process.cpuUsage during build",
      "Middleware using Node.js API production mode warns for process.cwd during build",
      "Middleware using Node.js API production mode warns for process.getuid during build",
      "Middleware using Node.js API production mode warns for setImmediate during build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/empty-object-getInitialProps/test/index.test.js": {
    "passed": [
      "Empty Project It should not show empty object warning for page without `getInitialProps`",
      "Empty Project It should show empty object warning on SSR",
      "Empty Project should show empty object warning during client transition"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/empty-project/test/index.test.js": {
    "passed": ["Empty Project Should not time out and return 404"],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/env-config/test/index.test.js": {
    "passed": [
      "Env Config development mode should have process environment override .env",
      "Env Config development mode should inline global values during build",
      "Env Config development mode should load env from .env",
      "Env Config development mode should provide env correctly for API routes",
      "Env Config development mode should provide env correctly for SSR",
      "Env Config development mode should provide env for SSG",
      "Env Config development mode should provide global env to next.config.js",
      "Env Config development mode with hot reload should have process environment override .env",
      "Env Config development mode with hot reload should have updated runtime values after change",
      "Env Config development mode with hot reload should inline global values during build",
      "Env Config development mode with hot reload should load env from .env",
      "Env Config development mode with hot reload should provide env correctly for API routes",
      "Env Config development mode with hot reload should provide env correctly for SSR",
      "Env Config development mode with hot reload should provide env for SSG",
      "Env Config development mode with hot reload should provide global env to next.config.js",
      "Env Config development mode with hot reload should trigger HMR correctly when NEXT_PUBLIC_ env is changed",
      "Env Config test environment should have process environment override .env",
      "Env Config test environment should inline global values during build",
      "Env Config test environment should load env from .env",
      "Env Config test environment should provide env correctly for API routes",
      "Env Config test environment should provide env correctly for SSR",
      "Env Config test environment should provide env for SSG",
      "Env Config test environment should provide global env to next.config.js"
    ],
    "failed": [],
    "pending": [
      "Env Config production mode should have process environment override .env",
      "Env Config production mode should inline global values during build",
      "Env Config production mode should load env from .env",
      "Env Config production mode should provide env correctly for API routes",
      "Env Config production mode should provide env correctly for SSR",
      "Env Config production mode should provide env for SSG",
      "Env Config production mode should provide global env to next.config.js"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/error-in-error/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Handles an Error in _error production mode Handles error during SSR",
      "Handles an Error in _error production mode Handles error during client transition"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/error-load-fail/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Failing to load _error production mode handles failing to load _error correctly"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/error-plugin-stack-overflow/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Reports stack trace when webpack plugin stack overflows shows details in next build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/errors-on-output-to-public/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Errors on output to public production mode Throws error when `distDir` is set to public",
      "Errors on output to public production mode Throws error when export out dir is public"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/errors-on-output-to-static/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Errors on output to static production mode Throws error when export out dir is static"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/eslint/test/lint-cache.test.js": {
    "passed": [
      "cache with content strategy is different from the one with default strategy",
      "eslint caching is disabled with the --no-cache flag",
      "eslint caching is enabled by default",
      "the --cache-location flag allows the user to define a separate cache location",
      "the default eslint cache lives in the user defined build directory",
      "the default eslint caching strategy is metadata"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/eslint/test/next-build.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Next Build production mode base directories are linted by default during builds",
      "Next Build production mode custom directories",
      "Next Build production mode empty directories do not fail the build",
      "Next Build production mode eslint cache lives in the user defined build directory",
      "Next Build production mode eslint caching is enabled",
      "Next Build production mode eslint ignored directories do not fail the build",
      "Next Build production mode ignore during builds",
      "Next Build production mode invalid older eslint version",
      "Next Build production mode missing Next.js plugin",
      "Next Build production mode shows warnings and errors"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/eslint/test/next-lint.test.js": {
    "passed": [
      "Next Lint First Time Setup  creates .eslintrc.json file with a default app router configuration",
      "Next Lint First Time Setup  creates .eslintrc.json file with a default configuration",
      "Next Lint First Time Setup  installs eslint and eslint-config-next as devDependencies if missing with npm",
      "Next Lint First Time Setup  installs eslint and eslint-config-next as devDependencies if missing with pnpm",
      "Next Lint First Time Setup  installs eslint and eslint-config-next as devDependencies if missing with yarn",
      "Next Lint First Time Setup  show a prompt to set up ESLint if no configuration detected",
      "Next Lint First Time Setup  shows a successful message when completed",
      "Next Lint base directories are linted by default",
      "Next Lint custom directories",
      "Next Lint don't create .eslintrc file if package.json has eslintConfig field",
      "Next Lint file flag can selectively lint only a single file",
      "Next Lint file flag can selectively lints multiple files",
      "Next Lint format flag \"compact\" creates a file respecting the chosen format",
      "Next Lint format flag \"json\" creates a file respecting the chosen format",
      "Next Lint format flag supports additional user-defined formats",
      "Next Lint lint files with cjs and mjs file extension",
      "Next Lint max warnings flag does not error when warnings do not exceed threshold",
      "Next Lint max warnings flag errors when warnings exceed threshold",
      "Next Lint quiet flag suppresses warnings and only reports errors",
      "Next Lint should add relative path for dist types in tsconfig.json when app dir exist",
      "Next Lint should generate next-env.d.ts before lint command",
      "Next Lint should not generate next-env.d.ts without typescript",
      "Next Lint show error message when the file path is a directory",
      "Next Lint shows warnings and errors",
      "Next Lint shows warnings and errors when extending plugin core-web-vitals config",
      "Next Lint shows warnings and errors when extending plugin recommended config",
      "Next Lint shows warnings and errors with next/core-web-vitals config",
      "Next Lint success message when no warnings or errors",
      "Next Lint verify options name and type with auto-generated help output"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-404/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with a page named 404.js production mode should export a custom 404.html instead of default 404.html",
      "Static 404 Export production mode export 404.html and 404/index.html when trailingSlash: true",
      "Static 404 Export production mode only export 404.html when trailingSlash: false"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-default-map/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with default map production mode should export an amp only page to clean path",
      "Export with default map production mode should export hybrid amp page correctly",
      "Export with default map production mode should export hybrid index amp page correctly",
      "Export with default map production mode should export nested hybrid amp page correctly",
      "Export with default map production mode should export nested hybrid amp page correctly with folder",
      "Export with default map production mode should export with folder that has dot in name"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-dynamic-pages/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export Dynamic Pages production mode should hydrate with correct asPath",
      "Export Dynamic Pages production mode should of exported with correct asPath"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-fallback-true-error/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export error for fallback: true production mode should build successfully"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-getInitialProps-warn/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with getInitialProps production mode should show warning with next export"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-image-default/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with default loader next/image component production mode should error during next build"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-image-loader-legacy/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with cloudinary loader next/legacy/image component production mode should build successfully",
      "Export with cloudinary loader next/legacy/image component production mode should contain img element in html output",
      "Export with custom loader config but no loader prop on next/legacy/image production mode should fail build",
      "Export with custom loader next/legacy/image component production mode should build successfully",
      "Export with custom loader next/legacy/image component production mode should contain img element with same src in html output",
      "Export with unoptimized next/legacy/image component production mode should build successfully",
      "Export with unoptimized next/legacy/image component production mode should contain img element with same src in html output"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-image-loader/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export with cloudinary loader next/image component production mode should build successfully",
      "Export with cloudinary loader next/image component production mode should contain img element in html output",
      "Export with custom loader config but no loader prop on next/image production mode should fail build",
      "Export with custom loader next/image component production mode should build successfully",
      "Export with custom loader next/image component production mode should contain img element with same src in html output",
      "Export with loaderFile config next/image component production mode should build successfully",
      "Export with loaderFile config next/image component production mode should contain img element with same src in html output",
      "Export with unoptimized next/image component production mode should build successfully",
      "Export with unoptimized next/image component production mode should contain img element with same src in html output"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-index-not-found-gsp/test/index.test.ts": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export index page with `notFound: true` in `getStaticProps` production mode should build successfully"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-intent/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Application Export Intent Output Bad Export production mode should build and export",
      "Application Export Intent Output Bad Export production mode should have the expected outputs for export",
      "Application Export Intent Output Custom Export production mode should build and export",
      "Application Export Intent Output Custom Export production mode should have the expected outputs for export",
      "Application Export Intent Output Custom Out production mode should build and export",
      "Application Export Intent Output Custom Out production mode should have the expected outputs for export",
      "Application Export Intent Output No Export production mode should build and clean up",
      "Application Export Intent Output No Export production mode should build and not export",
      "Application Export Intent Output No Export production mode should have the expected outputs for export",
      "Application Export Intent Output production mode Default Export should build and export",
      "Application Export Intent Output production mode Default Export should have the expected outputs for export"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/export-subfolders/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Export config#exportTrailingSlash set to false production mode should export pages as [filename].html instead of [filename]/index.html"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/externals-esm-loose/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Handle ESM externals with esmExternals: 'loose' production mode should render the ssg page",
      "Handle ESM externals with esmExternals: 'loose' production mode should render the ssr page",
      "Handle ESM externals with esmExternals: 'loose' production mode should render the static page"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/externals-pages-bundle/test/externals.test.js": {
    "passed": [
      "default should use externals for unvendored node_modules reachable from the project"
    ],
    "failed": [],
    "pending": [],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/externals-pages-bundle/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "bundle pages externals with config.bundlePagesRouterDependencies production mode should have no externals with the config set",
      "bundle pages externals with config.bundlePagesRouterDependencies production mode should respect the serverExternalPackages config"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/fallback-false-rewrite/test/index.test.js": {
    "passed": [
      "fallback: false rewrite development mode should behave properly when accessing the dynamic param directly",
      "fallback: false rewrite development mode should not rewrite for path from fallback: false SSR",
      "fallback: false rewrite development mode should not rewrite for path from fallback: false client",
      "fallback: false rewrite development mode should rewrite correctly for path above fallback: false SSR",
      "fallback: false rewrite development mode should rewrite correctly for path above fallback: false client",
      "fallback: false rewrite development mode should rewrite correctly for path at same level as fallback: false SSR",
      "fallback: false rewrite development mode should rewrite correctly for path at same level as fallback: false client"
    ],
    "failed": [],
    "pending": [
      "fallback: false rewrite production mode should behave properly when accessing the dynamic param directly",
      "fallback: false rewrite production mode should not rewrite for path from fallback: false SSR",
      "fallback: false rewrite production mode should not rewrite for path from fallback: false client",
      "fallback: false rewrite production mode should rewrite correctly for path above fallback: false SSR",
      "fallback: false rewrite production mode should rewrite correctly for path above fallback: false client",
      "fallback: false rewrite production mode should rewrite correctly for path at same level as fallback: false SSR",
      "fallback: false rewrite production mode should rewrite correctly for path at same level as fallback: false client"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/fallback-modules/test/index.test.js": {
    "passed": [],
    "failed": [],
    "pending": [
      "Fallback Modules production mode Crypto Application should not include crypto"
    ],
    "flakey": [],
    "runtimeError": false
  },
  "test/integration/fallback-route-params/test/index.test.js": {
    "passed": [
      "Fallback Dynamic Route Params development mode should have correct fallback query (hydration)",
      "Fallback Dynamic Route Params development mode should have correct fallback query (skeleton)"
    ],
    "failed": [],
    "pending": [
      "Fallback Dynamic Route Params production mode should have correct fallback query (hydration)",
      "Fallback Dynamic Route Params production mode should have correct fallback query (skeleton)"
    ],
    "flakey": [],
    "runtimeError": false
  }
}
